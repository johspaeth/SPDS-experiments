Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r12.iterator(),r59 (SSAPRE.codeMotion) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;486;158;287996;7;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r18.iterator(),r108 (CachingBloatContext.toString) Value: interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>());r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;1;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeLater $r6.iterator(),r14 (SSAPRE.computeLater) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;104;89;287548;7;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r14.iterator(),r30 (SSA.placePhiFunctions) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;250;120;287444;19;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r16.iterator(),r61 (SSAPRE.codeMotion) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;240;191;287193;12;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation.propExpr $r5.iterator(),r34 (ExprPropagation.propExpr) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;22;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.ClassHierarchy.superclass r3.iterator(),r4 (ClassHierarchy.superclass) Value: interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;98;94;286913;11;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r3.iterator(),r28 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;true;false;446;151;286817;18;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r7.iterator(),r26 (SSA.placePhiFunctions) Value: interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;106;120;286388;12;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r37.iterator(),r164 (FlowGraph.peelLoops) Value: interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>());r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r4.iterator(),r41 (SSA.rename) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis r32.iterator(),r40 (SSAPRE.placePhis) Value: interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>());r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r21.iterator(),r22 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>());r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;0;2;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation.propExpr $r11.iterator(),r32 (ExprPropagation.propExpr) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;10;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier r24.iterator(),r25 (DominanceFrontier.calcFrontier) Value: virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>());r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;137;163;286272;15;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r162.iterator(),r177 (FlowGraph.peelLoops) Value: interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>());r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;1762;1092;286139;40;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r163.iterator(),r179 (FlowGraph.peelLoops) Value: interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>());r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;1363;1092;284380;188;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.insertCode $r5.iterator(),r2 (SSA.insertCode) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;21;36;283017;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r10.iterator(),r100 (CachingBloatContext.toString) Value: interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>());r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r37.iterator(),r154 (MethodEditor.commit) Value: virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>());r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;650;897;282997;10;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r7.iterator(),r76 (DominatorTree.buildTree) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;92;255;282349;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph.printSCCs r4.iterator(),r5 (SSAGraph.printSCCs) Value: interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>());r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;0;7;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.ReplaceVisitor.visitPhiJoinStmt $r7.iterator(),r2 (ReplaceVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit r138.iterator(),r143 (MethodEditor.commit) Value: virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>());r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;85;259;282259;16;10;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.buildLists $r7.iterator(),r17 (Graph.buildLists) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;37;47;282165;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetCanBeAvail $r10.iterator(),r3 (SSAPRE.resetCanBeAvail) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;27;52;282137;2;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitRetStmt $r7.iterator(),r3 (VerifyCFG.visitRetStmt) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;61;70;282102;7;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitPhiJoinStmt $r6.iterator(),r20 (PrintVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;67;70;282041;5;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.Peephole.removeUnreachable r1.iterator(),r53 (Peephole.removeUnreachable) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;true;false;349;514;281984;7;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r4.iterator(),r22 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor.start $r39.iterator(),r40 (TypeInferenceVisitor.start) Value: interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>());r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.search $r6.iterator(),r50 (SSA.search) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.print $r11.iterator(),r25 (MethodEditor.print) Value: virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>());r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;62;130;281632;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r6.iterator(),r140 (FlowGraph.peelLoops) Value: interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>());r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;621;723;281571;34;16;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes r49.iterator(),r55 (FlowGraph.setBlockTypes) Value: interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>());r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;10;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.computeWeight $r9.iterator(),r1 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeCriticalEdges $r19.iterator(),r24 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>());r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;42;147;280939;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r15.iterator(),r32 (SSA.rename) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r89.iterator(),r142 (FlowGraph.peelLoops) Value: interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>());r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5664;2474;280899;45;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r18.iterator(),r90 (Liveness.computeIntersections) Value: interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>());r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;217;431;275235;21;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r22.iterator(),r179 (RegisterAllocator.<init>) Value: interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>());r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename r51.iterator(),r55 (SSAPRE.rename) Value: interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>());r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30089;19728;30076;0;801;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r12.iterator(),r130 (MethodEditor.commit) Value: virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>());r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;298;897;258291;28;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r20.iterator(),r218 (CodeArray.buildCode) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (dacapo.Benchmark.validate $r5.iterator(),r2 (Benchmark.validate) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$EdgeSet.clear $r4.iterator(),r1 (Graph$EdgeSet.clear) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;false;12;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r158.iterator(),r159 (MethodEditor.commit) Value: virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>());r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;1058;897;257981;12;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.PersistentBloatContext.addClasses r1.iterator(),r2 (PersistentBloatContext.addClasses) Value: interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;false;50;65;256922;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitNode r2.iterator(),r3 (VerifyCFG.visitNode) Value: virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>());r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;64;67;256861;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r6.iterator(),r43 (SSA.rename) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;98;166;256808;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.search $r41.iterator(),r4 (SSA.search) Value: interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;62;164;256710;5;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$EdgeSet.iterator $r3.iterator(),r1 (Graph$EdgeSet.iterator) Value: interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;30013;6323;30001;0;93;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeCriticalEdges r1.iterator(),r26 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;52;120;226641;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey.equals r4.iterator(),r6 (SSAPRE$ExprKey.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;true;false;193;160;226581;7;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r146.iterator(),r223 (CodeArray.buildCode) Value: interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>());r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename r51.iterator(),r58 (SSAPRE.rename) Value: interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>());r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30003;20131;30001;0;802;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildTreeForBlock $r72.iterator(),r91 (FlowGraph.buildTreeForBlock) Value: interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>());r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;38;66;196451;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.downSafety $r11.iterator(),r5 (SSAPRE.downSafety) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;33;107;196413;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.ReplaceTarget.visitRetStmt $r5.iterator(),r2 (ReplaceTarget.visitRetStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;false;49;100;196372;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.finalizeVisit $r8.iterator(),r34 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;35;122;196330;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r4.iterator(),r26 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;82;151;196288;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r29.iterator(),r40 (SSA.rename) Value: interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>());r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation.propExpr $r10.iterator(),r30 (ExprPropagation.propExpr) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;8;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (dacapo.Benchmark.postIterationCleanup $r5.iterator(),r2 (Benchmark.postIterationCleanup) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.copyBlock $r10.iterator(),r4 (FlowGraph.copyBlock) Value: interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;14;34;196202;0;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.addHandlerEdges $r14.iterator(),r24 (FlowGraph.addHandlerEdges) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;36;136;196188;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.release $r20.iterator(),r4 (CachingBloatContext.release) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;6;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$1.iterator $r2.iterator(),r1 (Graph$1.iterator) Value: interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;true;false;4542;2964;196148;305;89;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.idf r13.iterator(),r6 (FlowGraph.idf) Value: interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.replaceJoinPhis $r4.iterator(),r2 (CodeGenerator.replaceJoinPhis) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;60;108;191608;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut $r31.iterator(),r93 (Liveness.liveOut) Value: interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>());r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;319;552;191548;16;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph.printSCCs r2.iterator(),r3 (SSAGraph.printSCCs) Value: interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;0;3;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r25.iterator(),r35 (SSAPRE.placePhis) Value: interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>());r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;57;148;191227;7;12;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r16.iterator(),r88 (Liveness.computeIntersections) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;138;431;191170;15;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.verifyTargets r2.iterator(),r3 (VerifyCFG.verifyTargets) Value: interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.search $r11.iterator(),r73 (SSAPRE.search) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.array $r4.iterator(),r27 (CodeArray.array) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$NodeList.iterator r0.iterator(),r1 (Graph$NodeList.iterator) Value: specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>());r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;true;false;1327;906;191018;52;39;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r7.iterator(),r31 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;33;98;189689;3;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$Phi.toString $r24.iterator(),r1 (SSAPRE$Phi.toString) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;65;169;189658;6;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.buildLists $r2.iterator(),r15 (Graph.buildLists) Value: interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>());r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;59;128;189592;7;13;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetCanBeAvail $r13.iterator(),r6 (SSAPRE.resetCanBeAvail) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;34;115;189539;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r25.iterator(),r105 (Liveness.computeIntersections) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;41;116;189506;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.visitFlowGraph $r20.iterator(),r6 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>());r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;true;false;131;216;189457;6;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.visitFlowGraph $r13.iterator(),r2 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;98;216;189326;7;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r56.iterator(),r168 (FlowGraph.peelLoops) Value: interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>());r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.insertProtStores $r10.iterator(),r21 (FlowGraph.insertProtStores) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r29.iterator(),r55 (SSAPRE.codeMotion) Value: interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>());r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;47;203;189235;7;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$1.visitComponent r1.iterator(),r2 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;54;147;189180;7;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r16.iterator(),$r26 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;49;165;189134;6;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueFolder.cleanup $r3.iterator(),r1 (ValueFolder.cleanup) Value: virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>());r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;39;64;189084;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r14.iterator(),r42 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;66;145;189039;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r5.iterator(),$r26 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;44;165;188979;7;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.BloatContext.ignoreClass $r5.iterator(),r2 (BloatContext.ignoreClass) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r139.iterator(),r145 (FlowGraph.peelLoops) Value: interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>());r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.buildPhiOperand $r6.iterator(),r4 (SSAPRE.buildPhiOperand) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30022;19076;30017;187098;792;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness$2.visitPhiJoinStmt $r13.iterator(),r3 (Liveness$2.visitPhiJoinStmt) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;false;53;125;158964;6;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$Phi.leaves $r4.iterator(),r1 (SSAPRE$Phi.leaves) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;47;77;158919;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering.valnum $r27.iterator(),r3 (ValueNumbering.valnum) Value: interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetDownSafe $r8.iterator(),r5 (SSAPRE.resetDownSafe) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;40;94;158863;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r20.iterator(),r110 (CachingBloatContext.toString) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueFolding$1.visitComponent r1.iterator(),r3 (ValueFolding$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;false;59;97;158816;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename $r15.iterator(),r62 (SSAPRE.rename) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;44;158763;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r6.iterator(),r154 (RegisterAllocator.<init>) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;120;399;158743;36;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r15.iterator(),r139 (MethodEditor.commit) Value: virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>());r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;365;897;158625;22;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.CompactArrayInitializer.transform $r6.iterator(),r2 (CompactArrayInitializer.transform) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;175;380;158259;23;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r6.iterator(),r3 (SSA.placePhiFunctions) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;56;152;158086;5;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode $r46.iterator(),r55 (SSAGraph$5.visitNode) Value: interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>());r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;60;176;158021;7;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r3.iterator(),r24 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;67;151;157962;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.toString $r4.iterator(),r1 (Graph.toString) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;false;29;55;157894;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r11.iterator(),r63 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>());r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;105;113;157867;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$12.<init> $r3.iterator(),$r4 (SSAPRE$12.<init>) Value: interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>());$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;true;false;207;428;157769;18;13;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.PersistentCheckElimination.search $r6.iterator(),r13 (PersistentCheckElimination.search) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r47.iterator(),r175 (FlowGraph.peelLoops) Value: interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>());r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5353;2474;157563;30;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PhiJoinStmt.<init> $r8.iterator(),r3 (PhiJoinStmt.<init>) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;false;32;99;152210;3;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.number $r7.iterator(),r3 (Graph.number) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;false;42;101;152169;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r6.iterator(),r96 (CachingBloatContext.toString) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitBlock $r75.iterator(),r76 (VerifyCFG.visitBlock) Value: interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>());r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;53;173;152131;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> r168.iterator(),r172 (RegisterAllocator.<init>) Value: virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>());r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;185;548;152083;9;10;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r14.iterator(),r31 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;72;238;151898;9;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r20.iterator(),r28 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>());r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;265;225;151826;9;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.Tree$StmtList.iterator r0.iterator(),r1 (Tree$StmtList.iterator) Value: specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>());r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;30018;26302;30001;0;886;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.visitFlowGraph $r16.iterator(),r3 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;73;94;121579;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.finalizeVisit $r30.iterator(),r4 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;55;133;121520;7;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueFolder.visitPhiJoinStmt $r4.iterator(),r2 (ValueFolder.visitPhiJoinStmt) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;352;110;121168;7;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r22.iterator(),r38 (SSAPRE.placePhis) Value: interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;90;148;121113;6;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeCriticalEdges $r5.iterator(),r2 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;31;84;121022;3;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r14.iterator(),r59 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;76;113;120973;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.Tree.initLocals r1.iterator(),r3 (Tree.initLocals) Value: interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;false;36;69;120908;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.release $r16.iterator(),r4 (CachingBloatContext.release) Value: interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;8;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.enqueueParents $r10.iterator(),r3 (SSAPRE.enqueueParents) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;27;53;120860;2;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r6.iterator(),r74 (DominatorTree.buildTree) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;51;255;120836;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> r160.iterator(),r166 (RegisterAllocator.<init>) Value: virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>());r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;128;548;120785;25;10;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.DefExpr.cleanupOnly r1.iterator(),r2 (DefExpr.cleanupOnly) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;false;45;64;120648;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r53.iterator(),$r58 (DominatorTree.buildTree) Value: interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>());$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;96;460;120611;20;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetLater $r13.iterator(),r6 (SSAPRE.resetLater) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;41;111;120515;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r19.iterator(),r210 (CodeArray.buildCode) Value: interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>());r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;1124;2366;120475;113;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r4.iterator(),r29 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;true;false;189;151;119342;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r85.iterator(),r148 (FlowGraph.peelLoops) Value: interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>());r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5314;2474;119163;30;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PhiJoinStmt.visitForceChildren $r4.iterator(),r2 (PhiJoinStmt.visitForceChildren) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;false;50;70;113838;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitEdge $r21.iterator(),r6 (FlowGraph.splitEdge) Value: interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r16.iterator(),r106 (CachingBloatContext.toString) Value: interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>());r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r33.iterator(),r159 (FlowGraph.peelLoops) Value: interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>());r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;1016;1092;113800;34;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitPhiCatchStmt $r5.iterator(),r2 (PrintVisitor.visitPhiCatchStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;65;68;112774;7;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness$1.<init> $r6.iterator(),$r7 (Liveness$1.<init>) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;true;false;193;633;112719;35;11;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r36.iterator(),r42 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>());r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;73;239;112514;10;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.get_swizzler $r4.iterator(),r1 (InductionVarAnalyzer.get_swizzler) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;11;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation$1.visitTree $r3.iterator(),$r4 (ExprPropagation$1.visitTree) Value: interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>());$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;30012;25456;30001;0;849;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.search $r61.iterator(),r5 (SSAPRE.search) Value: interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>());r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;135;428;82468;12;13;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.Peephole.removeUnreachable r1.iterator(),r40 (Peephole.removeUnreachable) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;108;514;82332;9;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.file.ClassFileLoader.loadClass $r5.iterator(),r94 (ClassFileLoader.loadClass) Value: virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>());r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;false;106;298;82215;15;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut r4.iterator(),r7 (Liveness.liveOut) Value: interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>());r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;563;552;82117;14;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r91.iterator(),r135 (FlowGraph.peelLoops) Value: interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>());r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5807;2474;81556;29;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r69.iterator(),r74 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>());r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;130;331;75747;10;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeCanBeAvail $r9.iterator(),r2 (SSAPRE.computeCanBeAvail) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;21;51;75617;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.beginTry $r16.iterator(),r6 (SSAPRE.beginTry) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r25.iterator(),r231 (CodeArray.buildCode) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;1126;2366;75598;42;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitPhiJoinStmt $r10.iterator(),r2 (PrintVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;52;107;74463;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.insertEdgesToSinkDFS $r6.iterator(),r5 (DominatorTree.insertEdgesToSinkDFS) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;41;138;74418;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r7.iterator(),r38 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;111;225;74374;5;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree r68.iterator(),r69 (DominatorTree.buildTree) Value: interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>());r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;79;297;74263;17;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.print $r12.iterator(),r26 (MethodEditor.print) Value: virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>());r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;93;130;74184;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor.visitPhiStmt $r5.iterator(),r12 (TypeInferenceVisitor.visitPhiStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;48;93;74083;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut $r57.iterator(),r11 (Liveness.liveOut) Value: interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>());r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;790;552;74043;12;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops r1.iterator(),r20 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;47;105;73252;3;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r57.iterator(),r170 (FlowGraph.peelLoops) Value: interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>());r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5990;2474;73207;35;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA$1.visitTree $r4.iterator(),r2 (SSA$1.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;false;30;46;67207;1;8;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitFlowGraph $r5.iterator(),r2 (PrintVisitor.visitFlowGraph) Value: interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;69;107;67179;6;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r44.iterator(),r9 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>());r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.insert_aswrange $r7.iterator(),r2 (InductionVarAnalyzer.insert_aswrange) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;59;139;67108;6;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetLater $r10.iterator(),r3 (SSAPRE.resetLater) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;48;67057;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$5.visitFlowGraph $r4.iterator(),r2 (CodeGenerator$5.visitFlowGraph) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;58;64;67023;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeCanBeAvail $r12.iterator(),r5 (SSAPRE.computeCanBeAvail) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;43;114;66975;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.insertProtectedRegionStores $r16.iterator(),r6 (FlowGraph.insertProtectedRegionStores) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$1.visitPhiStmt $r12.iterator(),r4 (RegisterAllocator$1.visitPhiStmt) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;false;false;52;86;66923;5;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r12.iterator(),r1 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops $r40.iterator(),r47 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>());r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;43;203;66880;7;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$5.visitPhiCatchStmt $r8.iterator(),r3 (CodeGenerator$5.visitPhiCatchStmt) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;62;136;66829;8;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r14.iterator(),r104 (CachingBloatContext.toString) Value: interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>());r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$1.visitComponent r1.iterator(),r25 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;76;147;66767;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeBlock $r14.iterator(),r30 (FlowGraph.removeBlock) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;8;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename $r25.iterator(),r52 (SSAPRE.rename) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;51;207;66689;8;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode r243.iterator(),r244 (CodeArray.buildCode) Value: interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>());r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.beginTry $r10.iterator(),r2 (SSAPRE.beginTry) Value: interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;44;92;66638;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph.makeEquiv r4.iterator(),r5 (SSAGraph.makeEquiv) Value: interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>());r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r13.iterator(),r177 (RegisterAllocator.<init>) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;74;251;66584;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.addHandlerEdges $r11.iterator(),r6 (FlowGraph.addHandlerEdges) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r14.iterator(),r86 (Liveness.computeIntersections) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;43;213;66509;10;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.ClassHierarchy.<init> $r11.iterator(),r3 (ClassHierarchy.<init>) Value: virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>());r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;35;64;66466;3;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.enqueueParents $r12.iterator(),r5 (SSAPRE.enqueueParents) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;51;125;66430;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes r48.iterator(),r4 (FlowGraph.setBlockTypes) Value: interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r10.iterator(),r31 (SSA.placePhiFunctions) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r11.iterator(),r169 (RegisterAllocator.<init>) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;67;251;66369;8;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.array $r6.iterator(),r36 (CodeArray.array) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r8.iterator(),r98 (CachingBloatContext.toString) Value: interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>());r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r11.iterator(),r40 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>());r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;46;98;66292;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.optimize.Main.main r123.iterator(),r130 (Main.main) Value: interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>());r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;156;114;66253;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r38.iterator(),r171 (FlowGraph.peelLoops) Value: interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>());r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey.equals r3.iterator(),r5 (SSAPRE$ExprKey.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;true;false;233;160;66088;8;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r11.iterator(),r30 (SSAPRE.placePhis) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;29;151;65864;2;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.finalizeVisit $r10.iterator(),r37 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r31.iterator(),r156 (FlowGraph.peelLoops) Value: interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>());r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5569;2474;65836;38;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.coalesce $r4.iterator(),r2 (RegisterAllocator$IGNode.coalesce) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.optimize.Main.main r123.iterator(),r133 (Main.main) Value: interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>());r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;74;114;60268;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r17.iterator(),r34 (SSA.rename) Value: interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;63;166;60193;8;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.isMu $r9.iterator(),r3 (InductionVarAnalyzer.isMu) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;45;120;60112;4;6;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInference$1.visitInitStmt $r11.iterator(),r5 (TypeInference$1.visitInitStmt) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;false;false;7;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.search $r5.iterator(),r43 (SSA.search) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;34;119;60077;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph$6.visitBlock $r11.iterator(),r2 (FlowGraph$6.visitBlock) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;false;41;110;60036;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$1.visitComponent r1.iterator(),r26 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;100;147;59996;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r12.iterator(),r47 (SSA.rename) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r22.iterator(),r112 (CachingBloatContext.toString) Value: interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>());r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r4.iterator(),r35 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;19;48;59901;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r9.iterator(),r36 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>());r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;31;98;59874;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r6.iterator(),r133 (FlowGraph.peelLoops) Value: interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>());r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;973;723;59851;42;16;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.beginTry r5.iterator(),r25 (SSAPRE.beginTry) Value: virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>());r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r202.iterator(),r208 (CodeArray.buildCode) Value: interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>());r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;589;2366;58878;70;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildTrees $r25.iterator(),r4 (FlowGraph.buildTrees) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;77;191;58289;6;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops r2.iterator(),r19 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>());r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r59.iterator(),r100 (Liveness.computeIntersections) Value: interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>());r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;53;237;58212;11;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.DeadCodeElimination$5.visitTree $r4.iterator(),r2 (DeadCodeElimination$5.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;false;27;59;58150;1;8;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops $r6.iterator(),r16 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;20;68;58131;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1.visitComponent r1.iterator(),r2 (InductionVarAnalyzer$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;false;44;81;58104;4;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r24.iterator(),r181 (RegisterAllocator.<init>) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAConstructionInfo.addRetPhis $r4.iterator(),r2 (SSAConstructionInfo.addRetPhis) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;false;37;65;58065;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r28.iterator(),r175 (RegisterAllocator.<init>) Value: interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>());r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;47;225;58029;9;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r115.iterator(),r126 (FlowGraph.peelLoops) Value: interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>());r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;323;2474;57983;41;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.removeEmptyBlocks $r62.iterator(),r66 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>());r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;49;218;57659;13;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitFlowGraph $r6.iterator(),r2 (VerifyCFG.visitFlowGraph) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;8;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops r50.iterator(),r52 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>());r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode $r15.iterator(),r53 (SSAGraph$5.visitNode) Value: interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>());r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;5;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r10.iterator(),r52 (SSAPRE.codeMotion) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;42;158;57597;4;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.removeEmptyBlocks r68.iterator(),r69 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>());r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitBlock $r14.iterator(),r78 (VerifyCFG.visitBlock) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;82;173;57548;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeBlock $r16.iterator(),r32 (FlowGraph.removeBlock) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;7;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$12.<init> $r6.iterator(),$r7 (SSAPRE$12.<init>) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;true;false;203;428;57465;25;13;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeBlock $r20.iterator(),r34 (FlowGraph.removeBlock) Value: interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>());r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;30;41;57252;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$3.visitTree $r4.iterator(),$r5 (CodeGenerator$3.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;35679;25443;35667;0;851;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.phiRelatedFind r1.iterator(),r2 (SSAPRE.phiRelatedFind) Value: virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>());r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;57;65;21593;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation$1.visitPhiStmt $r6.iterator(),r3 (ExprPropagation$1.visitPhiStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;false;66;97;21536;6;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.allocReturnAddresses $r6.iterator(),r3 (CodeGenerator.allocReturnAddresses) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r12.iterator(),r102 (CachingBloatContext.toString) Value: interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>());r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops $r12.iterator(),r3 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;35;131;21479;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename r2.iterator(),r5 (SSAPRE.rename) Value: virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>());r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;2337;17107;21448;10;793;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.search $r9.iterator(),r70 (SSAPRE.search) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;48;115;19111;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r19.iterator(),r57 (SSAPRE.codeMotion) Value: interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>());r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;72;191;19064;9;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.computeWeight $r12.iterator(),r3 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$7.visitPhiJoinStmt $r8.iterator(),r2 (CodeGenerator$7.visitPhiJoinStmt) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;false;58;128;18981;6;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.firstBlock $r4.iterator(),r1 (MethodEditor.firstBlock) Value: virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>());r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;61;107;18932;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops $r8.iterator(),r3 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;38;140;18871;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r18.iterator(),r38 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;62;145;18823;6;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r10.iterator(),r57 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;8;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.release $r15.iterator(),r3 (CachingBloatContext.release) Value: interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;6;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInference$2.visitComponent r1.iterator(),r2 (TypeInference$2.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;false;56;72;18748;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r138.iterator(),r151 (FlowGraph.peelLoops) Value: interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>());r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.addCatchPhiOperands $r8.iterator(),r3 (SSA.addCatchPhiOperands) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.optimize.Main.main $r7.iterator(),r135 (Main.main) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$1.visitPhiStmt $r6.iterator(),r2 (SSAPRE$1.visitPhiStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;false;false;61;73;18689;6;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildTrees $r62.iterator(),r15 (FlowGraph.buildTrees) Value: interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>());r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;31;119;18638;3;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitBlock $r46.iterator(),r59 (VerifyCFG.visitBlock) Value: interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;9;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.toString r1.iterator(),r2 (ValueNumbering$Tuple.toString) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;45;78;18592;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.ImmutableIterator.<init> $r2.iterator(),$r3 (ImmutableIterator.<init>) Value: virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>());$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;true;false;3636;1963;18556;122;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.Peephole.removeUnreachable $r12.iterator(),r4 (Peephole.removeUnreachable) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;true;false;165;514;14920;11;17;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops $r22.iterator(),r5 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$4.visitTree $r4.iterator(),r2 (CodeGenerator$4.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;false;26;44;14744;1;8;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeLater $r8.iterator(),r17 (SSAPRE.computeLater) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;38;89;14727;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r50.iterator(),r95 (Liveness.computeIntersections) Value: interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>());r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r8.iterator(),r28 (SSA.placePhiFunctions) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode $r13.iterator(),r50 (SSAGraph$5.visitNode) Value: interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>());r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;7;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.downSafety $r8.iterator(),r2 (SSAPRE.downSafety) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;19;44;14681;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r37.iterator(),$r58 (DominatorTree.buildTree) Value: interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>());$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;96;460;14663;20;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeLater $r11.iterator(),r2 (SSAPRE.computeLater) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;37;113;14567;5;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.removeEmptyBlocks $r5.iterator(),r64 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;59;220;14530;12;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.collectVars $r4.iterator(),$r5 (SSA.collectVars) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;1;2;0;0;3;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode r225.iterator(),r226 (CodeArray.buildCode) Value: interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>());r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r24.iterator(),r6 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;165;331;14470;12;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r27.iterator(),r54 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>());r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;10;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r18.iterator(),r33 (SSAPRE.placePhis) Value: interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>());r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;49;151;14294;2;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.StackOptimizer.optimizeCFG r1.iterator(),r2 (StackOptimizer.optimizeCFG) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;false;20;48;14244;1;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree r71.iterator(),r72 (DominatorTree.buildTree) Value: interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>());r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;1;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.get_local $r4.iterator(),r1 (InductionVarAnalyzer.get_local) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;8;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor.visitPhiStmt r2.iterator(),r14 (TypeInferenceVisitor.visitPhiStmt) Value: interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>());r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;65;93;14209;4;15;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut $r19.iterator(),r95 (Liveness.liveOut) Value: interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>());r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;55;252;14149;10;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.computeWeight $r23.iterator(),r6 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;45;143;14094;7;7;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r15.iterator(),r4 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.insertProtectedRegionStores $r9.iterator(),r2 (FlowGraph.insertProtectedRegionStores) Value: interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;48;86;14048;5;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode r57.iterator(),r59 (SSAGraph$5.visitNode) Value: virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>());r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;112;176;13990;6;9;4455;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.removeUnreachable $r9.iterator(),r1 (Graph.removeUnreachable) Value: interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;false;32;92;13877;1;8;4455;0;
