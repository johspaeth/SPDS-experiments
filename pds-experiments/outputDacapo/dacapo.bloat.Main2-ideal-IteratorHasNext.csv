Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath
ideal;IteratorHasNext;ForwardQuery: (splitReducibleLoops r50.iterator(),r52 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>());r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;25;1;9;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTree $r6.iterator(),r74 (DominatorTree.buildTree) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;271;133;413794;24;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r15.iterator(),r62 (SSAPRE.rename) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;90;30;413580;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (codeMotion $r16.iterator(),r61 (SSAPRE.codeMotion) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;288;57;413432;22;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (codeMotion $r29.iterator(),r55 (SSAPRE.codeMotion) Value: interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>());r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;197;185;413165;30;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (insertProtectedRegionStores $r9.iterator(),r2 (FlowGraph.insertProtectedRegionStores) Value: interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;157;68;412983;22;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitFlowGraph $r6.iterator(),r2 (VerifyCFG.visitFlowGraph) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;29;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (collectVars $r4.iterator(),$r5 (SSA.collectVars) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;2;0;0;3;4450;0;
ideal;IteratorHasNext;ForwardQuery: (insertProtStores $r10.iterator(),r21 (FlowGraph.insertProtStores) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (liveOut $r19.iterator(),r95 (Liveness.liveOut) Value: interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>());r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;176;234;412797;28;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (printSCCs r2.iterator(),r3 (SSAGraph.printSCCs) Value: interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;1;3;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (main $r7.iterator(),r135 (Main.main) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r17.iterator(),r34 (SSA.rename) Value: interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;182;118;412701;25;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r12.iterator(),r47 (SSA.rename) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;1;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitBlock $r14.iterator(),r78 (VerifyCFG.visitBlock) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;250;98;412424;20;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitComponent r1.iterator(),r2 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;219;88;412158;28;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r6.iterator(),r50 (SSA.search) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (printSCCs r4.iterator(),r5 (SSAGraph.printSCCs) Value: interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>());r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;1;7;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r37.iterator(),r164 (FlowGraph.peelLoops) Value: interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>());r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r28.iterator(),r175 (RegisterAllocator.<init>) Value: interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>());r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;183;207;411979;31;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitFlowGraph $r4.iterator(),r2 (CodeGenerator$5.visitFlowGraph) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;178;46;411779;18;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeUnreachable r1.iterator(),r53 (Peephole.removeUnreachable) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;819;104;411496;13;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (addClasses r1.iterator(),r2 (PersistentBloatContext.addClasses) Value: interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;false;80;47;410846;9;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r6.iterator(),r96 (CachingBloatContext.toString) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode r243.iterator(),r244 (CodeArray.buildCode) Value: interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>());r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (calcFrontier $r21.iterator(),r22 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>());r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;1;2;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitNode $r13.iterator(),r50 (SSAGraph$5.visitNode) Value: interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>());r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;17;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r6.iterator(),$r7 (Liveness$1.<init>) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;true;false;253;479;410748;86;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode $r202.iterator(),r208 (CodeArray.buildCode) Value: interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>());r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;863;603;410547;86;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (addHandlerEdges $r11.iterator(),r6 (FlowGraph.addHandlerEdges) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (valnum $r27.iterator(),r3 (ValueNumbering.valnum) Value: interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;false;false;16;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitRetStmt $r7.iterator(),r3 (VerifyCFG.visitRetStmt) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;89;52;409621;10;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (beginTry r5.iterator(),r25 (SSAPRE.beginTry) Value: virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>());r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (start $r39.iterator(),r40 (TypeInferenceVisitor.start) Value: interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>());r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;18;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r4.iterator(),r1 (Graph.toString) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;false;53;41;409532;3;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiStmt $r12.iterator(),r4 (RegisterAllocator$1.visitPhiStmt) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;false;false;88;68;409466;11;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops r163.iterator(),r179 (FlowGraph.peelLoops) Value: interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>());r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;1161;378;409111;32;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (commit $r158.iterator(),r159 (MethodEditor.commit) Value: virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>());r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;922;82;408075;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitFlowGraph $r20.iterator(),r6 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>());r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;128;83;407290;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeUnreachable $r9.iterator(),r1 (Graph.removeUnreachable) Value: interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;false;31;76;407199;2;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiStmt $r6.iterator(),r2 (SSAPRE$1.visitPhiStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;false;false;52;55;407158;5;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (finalizeVisit $r10.iterator(),r37 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r29.iterator(),r40 (SSA.rename) Value: interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>());r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r47.iterator(),r175 (FlowGraph.peelLoops) Value: interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>());r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;4954;401;406609;30;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (propExpr $r10.iterator(),r30 (ExprPropagation.propExpr) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitBlock $r46.iterator(),r59 (VerifyCFG.visitBlock) Value: interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;7;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r56.iterator(),r168 (FlowGraph.peelLoops) Value: interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>());r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhis $r18.iterator(),r33 (SSAPRE.placePhis) Value: interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>());r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;38;62;402162;2;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r85.iterator(),r148 (FlowGraph.peelLoops) Value: interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>());r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;6584;401;399966;30;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setValueNumbers $r14.iterator(),r31 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;91;188;395511;9;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiStmt $r6.iterator(),r3 (ExprPropagation$1.visitPhiStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;false;74;79;395431;6;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitRetStmt $r5.iterator(),r2 (ReplaceTarget.visitRetStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;false;53;82;395365;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes r48.iterator(),r4 (FlowGraph.setBlockTypes) Value: interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode $r19.iterator(),r210 (CodeArray.buildCode) Value: interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>());r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;924;590;395330;81;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeIntersections $r59.iterator(),r100 (Liveness.computeIntersections) Value: interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>());r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;62;219;394385;12;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode r225.iterator(),r226 (CodeArray.buildCode) Value: interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>());r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops r162.iterator(),r177 (FlowGraph.peelLoops) Value: interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>());r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;901;378;394039;28;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (idf r13.iterator(),r6 (FlowGraph.idf) Value: interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (phiRelatedFind r1.iterator(),r2 (SSAPRE.phiRelatedFind) Value: virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>());r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;50;47;393421;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTree r71.iterator(),r72 (DominatorTree.buildTree) Value: interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>());r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r24.iterator(),r181 (RegisterAllocator.<init>) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitTree $r4.iterator(),r2 (SSA$1.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;false;26;34;393384;1;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r22.iterator(),r112 (CachingBloatContext.toString) Value: interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>());r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (liveOut $r31.iterator(),r93 (Liveness.liveOut) Value: interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>());r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;263;204;393376;12;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (release $r15.iterator(),r3 (CachingBloatContext.release) Value: interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhiFunctions $r8.iterator(),r28 (SSA.placePhiFunctions) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r8.iterator(),r3 (PhiJoinStmt.<init>) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;false;38;81;393090;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (resetLater $r10.iterator(),r3 (SSAPRE.resetLater) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;34;393058;2;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (isMu $r9.iterator(),r3 (InductionVarAnalyzer.isMu) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;38;102;393027;5;3;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitReducibleLoops $r22.iterator(),r5 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeBlock $r14.iterator(),r30 (FlowGraph.removeBlock) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;10;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes $r11.iterator(),r63 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>());r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;112;51;392960;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitPhiBlocks $r44.iterator(),r9 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>());r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename r51.iterator(),r55 (SSAPRE.rename) Value: interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>());r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30134;14793;30117;0;784;4450;0;
ideal;IteratorHasNext;ForwardQuery: (equals r4.iterator(),r6 (SSAPRE$ExprKey.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;false;121;90;362757;10;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLoopTree $r11.iterator(),r40 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>());r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;44;44;362651;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhiFunctions $r10.iterator(),r31 (SSA.placePhiFunctions) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitIrreducibleLoops r2.iterator(),r19 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>());r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (equals r3.iterator(),r24 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;67;71;362597;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (iterator r0.iterator(),r1 (Graph$NodeList.iterator) Value: specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>());r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;true;false;887;762;362556;136;24;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes $r27.iterator(),r54 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>());r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeIntersections $r25.iterator(),r105 (Liveness.computeIntersections) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;65;98;361642;11;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhiFunctions $r6.iterator(),r3 (SSA.placePhiFunctions) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;78;102;361562;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (initLocals r1.iterator(),r3 (Tree.initLocals) Value: interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;false;44;51;361504;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiJoinStmt $r6.iterator(),r20 (PrintVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;78;52;361442;7;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitPhiBlocks $r24.iterator(),r6 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;125;176;361363;10;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitComponent r1.iterator(),r2 (InductionVarAnalyzer$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;false;53;63;361248;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitTree $r4.iterator(),r2 (CodeGenerator$4.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;false;28;32;361207;1;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (clear $r4.iterator(),r1 (Graph$EdgeSet.clear) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r6.iterator(),r13 (PersistentCheckElimination.search) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildPhiOperand $r6.iterator(),r4 (SSAPRE.buildPhiOperand) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30034;18091;30001;0;794;4450;0;
ideal;IteratorHasNext;ForwardQuery: (resetCanBeAvail $r13.iterator(),r6 (SSAPRE.resetCanBeAvail) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;41;97;331181;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTree $r37.iterator(),$r58 (DominatorTree.buildTree) Value: interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>());$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;85;445;331129;20;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode $r25.iterator(),r231 (CodeArray.buildCode) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;989;401;330570;35;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (array $r6.iterator(),r36 (CodeArray.array) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiJoinStmt $r8.iterator(),r2 (CodeGenerator$7.visitPhiJoinStmt) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;false;48;110;330061;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes $r14.iterator(),r59 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;74;83;330009;9;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r20.iterator(),r110 (CachingBloatContext.toString) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeWeight $r9.iterator(),r1 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (enqueueParents $r12.iterator(),r5 (SSAPRE.enqueueParents) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60;75;329935;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (validate $r5.iterator(),r2 (Benchmark.validate) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitFlowGraph $r16.iterator(),r3 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;52;76;329875;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r11.iterator(),r169 (RegisterAllocator.<init>) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;66;194;329841;8;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitInitStmt $r11.iterator(),r5 (TypeInference$1.visitInitStmt) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhis $r25.iterator(),r35 (SSAPRE.placePhis) Value: interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>());r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;49;91;329776;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (commit $r12.iterator(),r130 (MethodEditor.commit) Value: virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>());r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;243;327;329582;19;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r8.iterator(),r98 (CachingBloatContext.toString) Value: interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>());r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (propExpr $r5.iterator(),r34 (ExprPropagation.propExpr) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;7;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitEdge $r21.iterator(),r6 (FlowGraph.splitEdge) Value: interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeLater $r8.iterator(),r17 (SSAPRE.computeLater) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;35;36;329466;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r10.iterator(),r100 (CachingBloatContext.toString) Value: interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>());r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (liveOut $r57.iterator(),r11 (Liveness.liveOut) Value: interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>());r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;274;204;329374;13;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r15.iterator(),r32 (SSA.rename) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitComponent r1.iterator(),r2 (TypeInference$2.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;false;46;54;329143;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTree $r53.iterator(),$r58 (DominatorTree.buildTree) Value: interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>());$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;83;446;329095;22;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiStmt r2.iterator(),r14 (TypeInferenceVisitor.visitPhiStmt) Value: interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>());r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;73;49;329011;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiCatchStmt $r5.iterator(),r2 (PrintVisitor.visitPhiCatchStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;61;50;328941;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r9.iterator(),r70 (SSAPRE.search) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;37;97;328889;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeCanBeAvail $r9.iterator(),r2 (SSAPRE.computeCanBeAvail) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;20;37;328859;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (addRetPhis $r4.iterator(),r2 (SSAConstructionInfo.addRetPhis) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;false;40;47;328828;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (commit r138.iterator(),r143 (MethodEditor.commit) Value: virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>());r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;69;241;328781;15;6;4450;0;
ideal;IteratorHasNext;ForwardQuery: (cleanup $r3.iterator(),r1 (ValueFolder.cleanup) Value: virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>());r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;39;46;328720;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiJoinStmt $r7.iterator(),r2 (ReplaceVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;false;false;7;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhis r32.iterator(),r40 (SSAPRE.placePhis) Value: interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>());r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeIntersections $r16.iterator(),r88 (Liveness.computeIntersections) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;116;219;328693;13;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitNode r2.iterator(),r3 (VerifyCFG.visitNode) Value: virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>());r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;53;49;328548;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (print $r11.iterator(),r25 (MethodEditor.print) Value: virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>());r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;62;69;328489;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (insertProtectedRegionStores $r16.iterator(),r6 (FlowGraph.insertProtectedRegionStores) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r6.iterator(),r43 (SSA.rename) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;77;69;328434;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhiFunctions $r7.iterator(),r26 (SSA.placePhiFunctions) Value: interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;45;75;328362;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r11.iterator(),r73 (SSAPRE.search) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitTree $r4.iterator(),$r5 (CodeGenerator$3.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;33101;7826;33084;0;844;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhiFunctions $r14.iterator(),r30 (SSA.placePhiFunctions) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;63;66;295238;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTree r68.iterator(),r69 (DominatorTree.buildTree) Value: interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>());r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;66;279;295169;15;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (calcFrontier r24.iterator(),r25 (DominanceFrontier.calcFrontier) Value: virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>());r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;64;113;295097;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r18.iterator(),r108 (CachingBloatContext.toString) Value: interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>());r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setValueNumbers $r7.iterator(),r38 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;95;65;295031;4;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (iterator $r3.iterator(),r1 (Graph$EdgeSet.iterator) Value: interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;71868;5415;294433;0;70;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitForceChildren $r4.iterator(),r2 (PhiJoinStmt.visitForceChildren) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;false;48;52;223082;5;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitIrreducibleLoops r1.iterator(),r20 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;54;55;223031;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r41.iterator(),r4 (SSA.search) Value: interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;68;114;223005;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (release $r20.iterator(),r4 (CachingBloatContext.release) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r2.iterator(),$r3 (ImmutableIterator.<init>) Value: virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>());$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;true;false;3779;2020;222865;858;16;4450;0;
ideal;IteratorHasNext;ForwardQuery: (finalizeVisit $r30.iterator(),r4 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;48;115;219132;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (calcFrontier $r16.iterator(),$r26 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;45;147;219085;6;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (beginTry $r16.iterator(),r6 (SSAPRE.beginTry) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (print $r12.iterator(),r26 (MethodEditor.print) Value: virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>());r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;99;57;219021;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeUnreachable r1.iterator(),r40 (Peephole.removeUnreachable) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;126;185;218963;10;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (postIterationCleanup $r5.iterator(),r2 (Benchmark.postIterationCleanup) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeCriticalEdges $r19.iterator(),r24 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>());r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;44;129;218816;6;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops r6.iterator(),r133 (FlowGraph.peelLoops) Value: interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>());r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;566;373;218631;47;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitComponent r1.iterator(),r26 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;104;48;218192;7;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLoopTree $r7.iterator(),r31 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;38;84;218100;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiJoinStmt $r4.iterator(),r2 (ValueFolder.visitPhiJoinStmt) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;57;92;218050;6;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (equals r3.iterator(),r5 (SSAPRE$ExprKey.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;false;111;91;217988;7;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitComponent r1.iterator(),r25 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;76;71;217884;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r33.iterator(),r159 (FlowGraph.peelLoops) Value: interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>());r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;900;378;217555;29;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (cleanupOnly r1.iterator(),r2 (DefExpr.cleanupOnly) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;false;55;46;216911;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (addCatchPhiOperands $r8.iterator(),r3 (SSA.addCatchPhiOperands) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitPhiBlocks $r12.iterator(),r1 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (enqueueParents $r10.iterator(),r3 (SSAPRE.enqueueParents) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;23;39;216873;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r13.iterator(),r177 (RegisterAllocator.<init>) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;70;53;216837;2;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (firstBlock $r4.iterator(),r1 (MethodEditor.firstBlock) Value: virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>());r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;53;57;216762;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitIrreducibleLoops $r6.iterator(),r16 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;23;54;216725;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r61.iterator(),r5 (SSAPRE.search) Value: interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>());r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;1308;259;215474;13;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode $r20.iterator(),r218 (CodeArray.buildCode) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitIrreducibleLoops $r12.iterator(),r3 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;40;113;215387;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (search $r5.iterator(),r43 (SSA.search) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;37;101;215348;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTree $r7.iterator(),r76 (DominatorTree.buildTree) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;80;118;215301;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename r51.iterator(),r58 (SSAPRE.rename) Value: interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>());r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60086;159;10;0;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r22.iterator(),r179 (RegisterAllocator.<init>) Value: interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>());r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (loadClass $r5.iterator(),r94 (ClassFileLoader.loadClass) Value: virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>());r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;false;95;246;155114;13;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r91.iterator(),r135 (FlowGraph.peelLoops) Value: interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>());r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;4969;401;154488;30;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildCode $r146.iterator(),r223 (CodeArray.buildCode) Value: interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>());r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (beginTry $r10.iterator(),r2 (SSAPRE.beginTry) Value: interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;39;74;150082;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitNode $r46.iterator(),r55 (SSAGraph$5.visitNode) Value: interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>());r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;745;123;150032;692;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhis $r11.iterator(),r30 (SSAPRE.placePhis) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;85;149306;2;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLoopTree $r18.iterator(),r38 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;49;109;149286;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitNode $r15.iterator(),r53 (SSAGraph$5.visitNode) Value: interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>());r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (addHandlerEdges $r14.iterator(),r24 (FlowGraph.addHandlerEdges) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;44;118;149218;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> r168.iterator(),r172 (RegisterAllocator.<init>) Value: virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>());r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;167;177;149129;8;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r24.iterator(),r1 (SSAPRE$Phi.toString) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;71;151;148997;7;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (transform $r6.iterator(),r2 (CompactArrayInitializer.transform) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;168;330;148869;20;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeEmptyBlocks $r62.iterator(),r66 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>());r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;51;206;148768;12;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTrees $r25.iterator(),r4 (FlowGraph.buildTrees) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;72;141;148735;7;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeIntersections $r50.iterator(),r95 (Liveness.computeIntersections) Value: interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>());r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops r6.iterator(),r140 (FlowGraph.peelLoops) Value: interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>());r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;513;373;148514;27;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r4.iterator(),r41 (SSA.rename) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (codeMotion $r12.iterator(),r59 (SSAPRE.codeMotion) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;53;28;148134;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (optimizeCFG r1.iterator(),r2 (StackOptimizer.optimizeCFG) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;false;16;34;148089;0;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (downSafety $r8.iterator(),r2 (SSAPRE.downSafety) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;19;30;148071;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLists $r2.iterator(),r15 (Graph.buildLists) Value: interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>());r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;66;99;148026;7;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLists $r7.iterator(),r17 (Graph.buildLists) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;27;33;147979;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename $r25.iterator(),r52 (SSAPRE.rename) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;55;189;147944;8;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString r1.iterator(),r2 (ValueNumbering$Tuple.toString) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;51;60;147886;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> r160.iterator(),r166 (RegisterAllocator.<init>) Value: virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>());r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;133;392;147815;25;6;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeEmptyBlocks r68.iterator(),r69 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>());r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setValueNumbers $r4.iterator(),r35 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;19;34;147719;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeCanBeAvail $r12.iterator(),r5 (SSAPRE.computeCanBeAvail) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;33;96;147695;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (insertEdgesToSinkDFS $r6.iterator(),r5 (DominatorTree.insertEdgesToSinkDFS) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;37;120;147659;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeLater $r11.iterator(),r2 (SSAPRE.computeLater) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;35;95;147623;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitBlock $r75.iterator(),r76 (VerifyCFG.visitBlock) Value: interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>());r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;62;126;147593;6;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (placePhis $r22.iterator(),r38 (SSAPRE.placePhis) Value: interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;82;78;147511;5;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (equals r3.iterator(),r28 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;111;61;147450;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r16.iterator(),r106 (CachingBloatContext.toString) Value: interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>());r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeWeight $r23.iterator(),r6 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;40;125;147330;7;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitTree $r3.iterator(),$r4 (ExprPropagation$1.visitTree) Value: interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>());$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;31994;4304;31983;0;820;4450;0;
ideal;IteratorHasNext;ForwardQuery: (equals r4.iterator(),r29 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;112;60;115289;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (copyBlock $r10.iterator(),r4 (FlowGraph.copyBlock) Value: interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;16;22;115201;0;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitReducibleLoops $r8.iterator(),r3 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;32;126;115178;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeWeight $r12.iterator(),r3 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (resetCanBeAvail $r10.iterator(),r3 (SSAPRE.resetCanBeAvail) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;21;38;115150;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeBlock $r16.iterator(),r32 (FlowGraph.removeBlock) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (leaves $r4.iterator(),r1 (SSAPRE$Phi.leaves) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;41;59;115111;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (commit $r15.iterator(),r139 (MethodEditor.commit) Value: virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>());r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;293;261;114947;18;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r89.iterator(),r142 (FlowGraph.peelLoops) Value: interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>());r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;4952;401;114273;44;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeIntersections $r14.iterator(),r86 (Liveness.computeIntersections) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;40;199;109830;8;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitComponent r1.iterator(),r3 (ValueFolding$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;false;52;79;109780;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes $r36.iterator(),r42 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>());r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;66;221;109724;10;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitNode r57.iterator(),r59 (SSAGraph$5.visitNode) Value: virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>());r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;82;74;109661;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (iterator r0.iterator(),r1 (Tree$StmtList.iterator) Value: specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>());r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;30037;19964;30001;0;814;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes r49.iterator(),r55 (FlowGraph.setBlockTypes) Value: interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>());r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r115.iterator(),r126 (FlowGraph.peelLoops) Value: interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>());r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;325;464;79656;42;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (downSafety $r11.iterator(),r5 (SSAPRE.downSafety) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;37;89;79315;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r6.iterator(),$r7 (SSAPRE$12.<init>) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;true;false;234;342;79266;34;10;4450;0;
ideal;IteratorHasNext;ForwardQuery: (codeMotion $r19.iterator(),r57 (SSAPRE.codeMotion) Value: interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>());r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;59;155;79041;8;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLoopTree $r14.iterator(),r42 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;69;87;78976;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeBlock $r20.iterator(),r34 (FlowGraph.removeBlock) Value: interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>());r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;25;29;78920;0;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (main r123.iterator(),r133 (Main.main) Value: interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>());r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;917;48;78035;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r38.iterator(),r171 (FlowGraph.peelLoops) Value: interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>());r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r31.iterator(),r156 (FlowGraph.peelLoops) Value: interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>());r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;4917;401;77460;32;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeCriticalEdges r1.iterator(),r26 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;54;70;73049;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r11.iterator(),r3 (ClassHierarchy.<init>) Value: virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>());r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;41;46;73002;4;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitFlowGraph $r5.iterator(),r2 (PrintVisitor.visitFlowGraph) Value: interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;65;57;72973;7;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTreeForBlock $r72.iterator(),r91 (FlowGraph.buildTreeForBlock) Value: interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>());r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;41;48;72896;5;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitReducibleLoops $r40.iterator(),r47 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>());r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;49;185;72853;8;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildLoopTree $r9.iterator(),r36 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>());r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;36;66;72817;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiJoinStmt $r10.iterator(),r2 (PrintVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;58;89;72762;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeLater $r6.iterator(),r14 (SSAPRE.computeLater) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;49;72719;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (resetLater $r13.iterator(),r6 (SSAPRE.resetLater) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;34;93;72692;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (insert_aswrange $r7.iterator(),r2 (InductionVarAnalyzer.insert_aswrange) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;51;121;72646;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (calcFrontier $r5.iterator(),$r26 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;40;146;72604;6;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiJoinStmt $r13.iterator(),r3 (Liveness$2.visitPhiJoinStmt) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;false;48;107;72555;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r3.iterator(),$r4 (SSAPRE$12.<init>) Value: interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>());$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;true;false;201;364;72506;33;10;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r12.iterator(),r102 (CachingBloatContext.toString) Value: interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>());r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiCatchStmt $r8.iterator(),r3 (CodeGenerator$5.visitPhiCatchStmt) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;65;118;72301;8;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (resetDownSafe $r8.iterator(),r5 (SSAPRE.resetDownSafe) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;36;76;72250;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (array $r4.iterator(),r27 (CodeArray.array) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (<init> $r6.iterator(),r154 (RegisterAllocator.<init>) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;96;385;72204;29;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (number $r7.iterator(),r3 (Graph.number) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;false;44;83;72111;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (ignoreClass $r5.iterator(),r2 (BloatContext.ignoreClass) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (get_local $r4.iterator(),r1 (InductionVarAnalyzer.get_local) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitPhiStmt $r5.iterator(),r12 (TypeInferenceVisitor.visitPhiStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;53;65;72054;5;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (commit $r37.iterator(),r154 (MethodEditor.commit) Value: virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>());r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;582;103;71832;7;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (equals r4.iterator(),r26 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;91;58;71440;8;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (get_swizzler $r4.iterator(),r1 (InductionVarAnalyzer.get_swizzler) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (verifyTargets r2.iterator(),r3 (VerifyCFG.verifyTargets) Value: interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeCriticalEdges $r5.iterator(),r2 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;28;70;71326;2;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (allocReturnAddresses $r6.iterator(),r3 (CodeGenerator.allocReturnAddresses) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (finalizeVisit $r8.iterator(),r34 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;41;104;71293;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setBlockTypes $r10.iterator(),r57 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;7;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (calcFrontier $r4.iterator(),r22 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (iterator $r2.iterator(),r1 (Graph$1.iterator) Value: interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;true;false;4070;2700;71250;462;65;4450;0;
ideal;IteratorHasNext;ForwardQuery: (codeMotion $r10.iterator(),r52 (SSAPRE.codeMotion) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;41;126;67182;5;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops $r57.iterator(),r170 (FlowGraph.peelLoops) Value: interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>());r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5265;401;66582;27;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (replaceJoinPhis $r4.iterator(),r2 (CodeGenerator.replaceJoinPhis) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;51;58;61864;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeEmptyBlocks $r5.iterator(),r64 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;45;206;61823;10;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (coalesce $r4.iterator(),r2 (RegisterAllocator$IGNode.coalesce) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (removeUnreachable $r12.iterator(),r4 (Peephole.removeUnreachable) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;151;160;61795;7;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops r138.iterator(),r151 (FlowGraph.peelLoops) Value: interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>());r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (main r123.iterator(),r130 (Main.main) Value: interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>());r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;130;87;61623;6;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (liveOut r4.iterator(),r7 (Liveness.liveOut) Value: interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>());r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;261;204;61452;11;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitTree $r4.iterator(),r2 (DeadCodeElimination$5.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;false;27;47;61235;1;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (release $r16.iterator(),r4 (CachingBloatContext.release) Value: interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;7;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (superclass r3.iterator(),r4 (ClassHierarchy.superclass) Value: interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;38;76;61196;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitFlowGraph $r13.iterator(),r2 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;117;129;61129;9;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (rename r2.iterator(),r5 (SSAPRE.rename) Value: virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>());r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60102;174;61061;0;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (visitBlock $r11.iterator(),r2 (FlowGraph$6.visitBlock) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;false;48;92;931;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (toString $r14.iterator(),r104 (CachingBloatContext.toString) Value: interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>());r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (buildTrees $r62.iterator(),r15 (FlowGraph.buildTrees) Value: interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>());r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;33;105;898;4;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (insertCode $r5.iterator(),r2 (SSA.insertCode) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;22;22;869;1;4;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitPhiBlocks $r69.iterator(),r74 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>());r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;138;176;816;13;5;4450;0;
ideal;IteratorHasNext;ForwardQuery: (computeIntersections $r18.iterator(),r90 (Liveness.computeIntersections) Value: interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>());r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;151;208;646;11;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (setValueNumbers $r20.iterator(),r28 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>());r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;72;183;567;10;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (makeEquiv r4.iterator(),r5 (SSAGraph.makeEquiv) Value: interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>());r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (splitPhiBlocks $r15.iterator(),r4 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (propExpr $r11.iterator(),r32 (ExprPropagation.propExpr) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (peelLoops r139.iterator(),r145 (FlowGraph.peelLoops) Value: interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>());r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
