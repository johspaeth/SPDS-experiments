Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.CompactArrayInitializer.transform $r6.iterator(),r2 (CompactArrayInitializer.transform) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;733;380;284012;77;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r53.iterator(),$r58 (DominatorTree.buildTree) Value: interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>());$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;356;460;283311;75;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r24.iterator(),r181 (RegisterAllocator.<init>) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;1;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.ImmutableIterator.<init> $r2.iterator(),$r3 (ImmutableIterator.<init>) Value: virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>());$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;true;false;5513;1963;282965;151;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r11.iterator(),r63 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>());r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;129;113;277443;7;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAConstructionInfo.addRetPhis $r4.iterator(),r2 (SSAConstructionInfo.addRetPhis) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;false;43;65;277325;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r14.iterator(),r30 (SSA.placePhiFunctions) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;79;120;277283;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r6.iterator(),r140 (FlowGraph.peelLoops) Value: interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>());r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;614;723;277207;32;16;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode r225.iterator(),r226 (CodeArray.buildCode) Value: interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>());r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops $r8.iterator(),r3 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;37;140;276595;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.finalizeVisit $r8.iterator(),r34 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;47;122;276559;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$4.visitTree $r4.iterator(),r2 (CodeGenerator$4.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;false;30;44;276504;1;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r8.iterator(),r98 (CachingBloatContext.toString) Value: interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>());r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitPhiJoinStmt $r6.iterator(),r20 (PrintVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;79;70;276468;8;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildTrees $r62.iterator(),r15 (FlowGraph.buildTrees) Value: interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>());r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;34;119;276405;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r20.iterator(),r110 (CachingBloatContext.toString) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$1.visitPhiStmt $r12.iterator(),r4 (RegisterAllocator$1.visitPhiStmt) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;false;false;56;86;276364;6;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.get_local $r4.iterator(),r1 (InductionVarAnalyzer.get_local) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;10;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.verifyTargets r2.iterator(),r3 (VerifyCFG.verifyTargets) Value: interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename $r25.iterator(),r52 (SSAPRE.rename) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;59;207;276298;8;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$EdgeSet.clear $r4.iterator(),r1 (Graph$EdgeSet.clear) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.computeWeight $r12.iterator(),r3 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r3.iterator(),r24 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;83;151;276222;8;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.array $r6.iterator(),r36 (CodeArray.array) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode $r15.iterator(),r53 (SSAGraph$5.visitNode) Value: interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>());r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;10;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetLater $r13.iterator(),r6 (SSAPRE.resetLater) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;46;111;276136;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$3.visitTree $r4.iterator(),$r5 (CodeGenerator$3.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;30018;25387;30001;0;852;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$5.visitFlowGraph $r4.iterator(),r2 (CodeGenerator$5.visitFlowGraph) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;51;64;246155;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r16.iterator(),r106 (CachingBloatContext.toString) Value: interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>());r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.addCatchPhiOperands $r8.iterator(),r3 (SSA.addCatchPhiOperands) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.visitFlowGraph $r20.iterator(),r6 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>());r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;true;false;156;216;246103;6;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.isMu $r9.iterator(),r3 (InductionVarAnalyzer.isMu) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;40;120;245948;5;6;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.finalizeVisit $r30.iterator(),r4 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;50;133;245916;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.insertProtectedRegionStores $r16.iterator(),r6 (FlowGraph.insertProtectedRegionStores) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops r1.iterator(),r20 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;53;105;245865;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.get_swizzler $r4.iterator(),r1 (InductionVarAnalyzer.get_swizzler) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.removeEmptyBlocks r68.iterator(),r69 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>());r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r47.iterator(),r175 (FlowGraph.peelLoops) Value: interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>());r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5709;2474;245805;34;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeCanBeAvail $r9.iterator(),r2 (SSAPRE.computeCanBeAvail) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;23;51;240095;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r10.iterator(),r31 (SSA.placePhiFunctions) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r139.iterator(),r145 (FlowGraph.peelLoops) Value: interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>());r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r91.iterator(),r135 (FlowGraph.peelLoops) Value: interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>());r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5421;2474;240075;26;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.collectVars $r4.iterator(),$r5 (SSA.collectVars) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;2;0;0;3;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r10.iterator(),r100 (CachingBloatContext.toString) Value: interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>());r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops $r40.iterator(),r47 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>());r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;44;203;234654;7;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r20.iterator(),r218 (CodeArray.buildCode) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode r243.iterator(),r244 (CodeArray.buildCode) Value: interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>());r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r25.iterator(),r231 (CodeArray.buildCode) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;1232;2366;234613;62;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.buildLists $r7.iterator(),r17 (Graph.buildLists) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;33;47;233373;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor.visitPhiStmt $r5.iterator(),r12 (TypeInferenceVisitor.visitPhiStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;54;93;233340;5;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r6.iterator(),r74 (DominatorTree.buildTree) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;47;255;233294;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.buildPhiOperand $r6.iterator(),r4 (SSAPRE.buildPhiOperand) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30329;17645;30314;221492;798;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.release $r16.iterator(),r4 (CachingBloatContext.release) Value: interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;11;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r16.iterator(),$r26 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;45;165;202968;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r15.iterator(),r32 (SSA.rename) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r27.iterator(),r54 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>());r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.StackOptimizer.optimizeCFG r1.iterator(),r2 (StackOptimizer.optimizeCFG) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;false;18;48;202914;0;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.release $r20.iterator(),r4 (CachingBloatContext.release) Value: interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops r50.iterator(),r52 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>());r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r37.iterator(),r164 (FlowGraph.peelLoops) Value: interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>());r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r14.iterator(),r104 (CachingBloatContext.toString) Value: interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>());r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r6.iterator(),r43 (SSA.rename) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;89;166;202886;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.optimize.Main.main r123.iterator(),r130 (Main.main) Value: interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>());r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;130;114;202798;7;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.ReplaceVisitor.visitPhiJoinStmt $r7.iterator(),r2 (ReplaceVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueFolder.cleanup $r3.iterator(),r1 (ValueFolder.cleanup) Value: virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>());r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;41;64;202658;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$NodeList.iterator r0.iterator(),r1 (Graph$NodeList.iterator) Value: specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>());r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;true;false;812;906;202611;64;39;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.DefExpr.cleanupOnly r1.iterator(),r2 (DefExpr.cleanupOnly) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;false;53;64;201799;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree r71.iterator(),r72 (DominatorTree.buildTree) Value: interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>());r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetCanBeAvail $r13.iterator(),r6 (SSAPRE.resetCanBeAvail) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;39;115;201754;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.Peephole.removeUnreachable r1.iterator(),r40 (Peephole.removeUnreachable) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;116;514;201715;9;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r19.iterator(),r210 (CodeArray.buildCode) Value: interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>());r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;1118;2366;201601;95;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph.printSCCs r4.iterator(),r5 (SSAGraph.printSCCs) Value: interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>());r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;0;7;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitRetStmt $r7.iterator(),r3 (VerifyCFG.visitRetStmt) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;51;70;200474;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.buildLists $r2.iterator(),r15 (Graph.buildLists) Value: interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>());r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;66;128;200423;6;13;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode r57.iterator(),r59 (SSAGraph$5.visitNode) Value: virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>());r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;94;176;200357;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r15.iterator(),r4 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitNode r2.iterator(),r3 (VerifyCFG.visitNode) Value: virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>());r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;54;67;200264;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree r68.iterator(),r69 (DominatorTree.buildTree) Value: interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>());r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;64;297;200219;14;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r18.iterator(),r90 (Liveness.computeIntersections) Value: interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>());r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;179;431;200155;12;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeBlock $r20.iterator(),r34 (FlowGraph.removeBlock) Value: interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>());r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;27;41;199967;0;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$7.visitPhiJoinStmt $r8.iterator(),r2 (CodeGenerator$7.visitPhiJoinStmt) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;false;50;128;199941;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitReducibleLoops $r22.iterator(),r5 (FlowGraph.splitReducibleLoops) Value: interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut $r57.iterator(),r11 (Liveness.liveOut) Value: interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>());r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;770;552;199899;11;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA$1.visitTree $r4.iterator(),r2 (SSA$1.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;false;25;46;199121;1;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.replaceJoinPhis $r4.iterator(),r2 (CodeGenerator.replaceJoinPhis) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;51;108;199104;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r12.iterator(),r102 (CachingBloatContext.toString) Value: interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>());r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r4.iterator(),r35 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;19;48;199053;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.removeEmptyBlocks $r62.iterator(),r66 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>());r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;49;218;199034;13;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r6.iterator(),r96 (CachingBloatContext.toString) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey.equals r4.iterator(),r6 (SSAPRE$ExprKey.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;true;false;212;160;198976;8;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.removeEmptyBlocks $r5.iterator(),r64 (CodeGenerator.removeEmptyBlocks) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;45;220;198772;8;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.search $r41.iterator(),r4 (SSA.search) Value: interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;64;164;198727;7;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r4.iterator(),r41 (SSA.rename) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.search $r5.iterator(),r43 (SSA.search) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;38;119;198663;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r12.iterator(),r1 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.print $r11.iterator(),r25 (MethodEditor.print) Value: virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>());r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;64;130;198625;5;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r22.iterator(),r38 (SSAPRE.placePhis) Value: interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;83;148;198560;7;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.optimize.Main.main $r7.iterator(),r135 (Main.main) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation.propExpr $r10.iterator(),r30 (ExprPropagation.propExpr) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;10;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.beginTry r5.iterator(),r25 (SSAPRE.beginTry) Value: virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>());r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r14.iterator(),r31 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;78;238;198467;9;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.phiRelatedFind r1.iterator(),r2 (SSAPRE.phiRelatedFind) Value: virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>());r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;55;65;198380;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r18.iterator(),r38 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;51;145;198325;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueFolding$1.visitComponent r1.iterator(),r3 (ValueFolding$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;false;59;97;198273;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r13.iterator(),r177 (RegisterAllocator.<init>) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;77;251;198223;2;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.BloatContext.ignoreClass $r5.iterator(),r2 (BloatContext.ignoreClass) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r14.iterator(),r59 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;78;113;198137;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r20.iterator(),r28 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>());r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;74;225;198068;11;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator$5.visitPhiCatchStmt $r8.iterator(),r3 (CodeGenerator$5.visitPhiCatchStmt) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;63;136;197987;7;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.insertProtectedRegionStores $r9.iterator(),r2 (FlowGraph.insertProtectedRegionStores) Value: interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;41;86;197932;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename $r15.iterator(),r62 (SSAPRE.rename) Value: interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>());r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;22;44;197890;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.setValueNumbers $r7.iterator(),r38 (SSAPRE.setValueNumbers) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;103;225;197868;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation.propExpr $r11.iterator(),r32 (ExprPropagation.propExpr) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r4.iterator(),r29 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;true;false;188;151;197750;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.downSafety $r8.iterator(),r2 (SSAPRE.downSafety) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;22;44;197569;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r10.iterator(),r57 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r57.iterator(),r170 (FlowGraph.peelLoops) Value: interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>());r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;6025;2474;197540;25;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.coalesce $r4.iterator(),r2 (RegisterAllocator$IGNode.coalesce) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r25.iterator(),r105 (Liveness.computeIntersections) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;46;116;191515;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation$1.visitPhiStmt $r6.iterator(),r3 (ExprPropagation$1.visitPhiStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;false;67;97;191460;7;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetLater $r10.iterator(),r3 (SSAPRE.resetLater) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;48;191401;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.beginTry $r16.iterator(),r6 (SSAPRE.beginTry) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.firstBlock $r4.iterator(),r1 (MethodEditor.firstBlock) Value: virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>());r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;52;107;191377;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.insertEdgesToSinkDFS $r6.iterator(),r5 (DominatorTree.insertEdgesToSinkDFS) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;39;138;191324;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r29.iterator(),r40 (SSA.rename) Value: interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>());r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeLater $r8.iterator(),r17 (SSAPRE.computeLater) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;43;89;191286;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$Phi.leaves $r4.iterator(),r1 (SSAPRE$Phi.leaves) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;45;77;191242;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r37.iterator(),$r58 (DominatorTree.buildTree) Value: interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>());$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;99;460;191196;22;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r5.iterator(),$r26 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;45;165;191097;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename r51.iterator(),r55 (SSAPRE.rename) Value: interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>());r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30030;18724;30018;0;792;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.Tree$StmtList.iterator r0.iterator(),r1 (Tree$StmtList.iterator) Value: specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>());r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;30022;26030;30008;0;881;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r14.iterator(),r86 (Liveness.computeIntersections) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;44;213;131127;11;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph.makeEquiv r4.iterator(),r5 (SSAGraph.makeEquiv) Value: interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>());r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;14;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r50.iterator(),r95 (Liveness.computeIntersections) Value: interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>());r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInference$2.visitComponent r1.iterator(),r2 (TypeInference$2.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;false;55;72;131059;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r162.iterator(),r177 (FlowGraph.peelLoops) Value: interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>());r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;1011;1092;131015;32;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r24.iterator(),r6 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;139;331;130005;9;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r158.iterator(),r159 (MethodEditor.commit) Value: virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>());r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;931;897;129866;15;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r44.iterator(),r9 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>());r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeLater $r11.iterator(),r2 (SSAPRE.computeLater) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;33;113;128935;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$12.<init> $r6.iterator(),$r7 (SSAPRE$12.<init>) Value: interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>());$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;true;false;215;428;128901;22;13;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.addHandlerEdges $r11.iterator(),r6 (FlowGraph.addHandlerEdges) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> r160.iterator(),r166 (RegisterAllocator.<init>) Value: virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>());r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;131;548;128687;29;10;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitBlock $r14.iterator(),r78 (VerifyCFG.visitBlock) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;82;173;128546;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r25.iterator(),r35 (SSAPRE.placePhis) Value: interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>());r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;47;148;128473;5;12;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r12.iterator(),r130 (MethodEditor.commit) Value: virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>());r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;235;897;128427;19;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeCriticalEdges r1.iterator(),r26 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;54;120;128192;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r17.iterator(),r34 (SSA.rename) Value: interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;52;166;128137;7;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitBlock $r75.iterator(),r76 (VerifyCFG.visitBlock) Value: interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>());r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;56;173;128076;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes $r36.iterator(),r42 (FlowGraph.setBlockTypes) Value: interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>());r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;68;239;128018;10;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r16.iterator(),r61 (SSAPRE.codeMotion) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;93;191;127960;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r8.iterator(),r28 (SSA.placePhiFunctions) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r37.iterator(),r154 (MethodEditor.commit) Value: virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>());r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;684;897;127866;11;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.search $r61.iterator(),r5 (SSAPRE.search) Value: interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>());r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;147;428;127183;12;13;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$1.visitPhiStmt $r6.iterator(),r2 (SSAPRE$1.visitPhiStmt) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;false;false;50;73;127027;6;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.toString $r4.iterator(),r1 (Graph.toString) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;false;35;55;126974;2;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitPhiCatchStmt $r5.iterator(),r2 (PrintVisitor.visitPhiCatchStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;63;68;126942;7;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$EdgeSet.iterator $r3.iterator(),r1 (Graph$EdgeSet.iterator) Value: interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;30013;7589;30001;0;93;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor.start $r39.iterator(),r40 (TypeInferenceVisitor.start) Value: interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>());r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r89.iterator(),r142 (FlowGraph.peelLoops) Value: interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>());r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5390;2474;96869;40;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r31.iterator(),r156 (FlowGraph.peelLoops) Value: interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>());r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5364;2474;91480;24;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.downSafety $r11.iterator(),r5 (SSAPRE.downSafety) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;33;107;86116;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r6.iterator(),r154 (RegisterAllocator.<init>) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;91;399;86084;25;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.PersistentBloatContext.addClasses r1.iterator(),r2 (PersistentBloatContext.addClasses) Value: interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;false;41;65;85993;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetDownSafe $r8.iterator(),r5 (SSAPRE.resetDownSafe) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;34;94;85951;3;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.print $r12.iterator(),r26 (MethodEditor.print) Value: virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>());r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;99;130;85918;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitEdge $r21.iterator(),r6 (FlowGraph.splitEdge) Value: interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph$1.iterator $r2.iterator(),r1 (Graph$1.iterator) Value: interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;true;false;6500;2964;85817;505;89;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r138.iterator(),r151 (FlowGraph.peelLoops) Value: interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>());r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r4.iterator(),r26 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;98;151;79317;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r11.iterator(),r30 (SSAPRE.placePhis) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;29;151;79226;3;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$1.visitComponent r1.iterator(),r2 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;59;147;79189;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r21.iterator(),r22 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>());r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;0;2;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.release $r15.iterator(),r3 (CachingBloatContext.release) Value: interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeCriticalEdges $r19.iterator(),r24 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>());r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;43;147;79130;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.search $r6.iterator(),r50 (SSA.search) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer.insert_aswrange $r7.iterator(),r2 (InductionVarAnalyzer.insert_aswrange) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;52;139;79078;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeLater $r6.iterator(),r14 (SSAPRE.computeLater) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;24;89;79034;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r163.iterator(),r179 (FlowGraph.peelLoops) Value: interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>());r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;1047;1092;79011;51;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.copyBlock $r10.iterator(),r4 (FlowGraph.copyBlock) Value: interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>());r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;15;34;77964;0;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r38.iterator(),r171 (FlowGraph.peelLoops) Value: interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>());r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit r138.iterator(),r143 (MethodEditor.commit) Value: virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>());r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;68;259;77950;11;10;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.insertCode $r5.iterator(),r2 (SSA.insertCode) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;17;36;77881;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut $r31.iterator(),r93 (Liveness.liveOut) Value: interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>());r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;303;552;77864;10;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r6.iterator(),r3 (SSA.placePhiFunctions) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;54;152;77561;5;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename r51.iterator(),r58 (SSAPRE.rename) Value: interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>());r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;30014;20109;30006;0;801;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r202.iterator(),r208 (CodeArray.buildCode) Value: interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>());r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;608;2366;47534;63;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r11.iterator(),r169 (RegisterAllocator.<init>) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;69;251;46926;9;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness$2.visitPhiJoinStmt $r13.iterator(),r3 (Liveness$2.visitPhiJoinStmt) Value: interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;false;52;125;46848;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.removeUnreachable $r9.iterator(),r1 (Graph.removeUnreachable) Value: interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;false;34;92;46795;1;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering.valnum $r27.iterator(),r3 (ValueNumbering.valnum) Value: interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>());r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.DeadCodeElimination$5.visitTree $r4.iterator(),r2 (DeadCodeElimination$5.visitTree) Value: interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;false;29;59;46753;1;8;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops $r6.iterator(),r16 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;29;68;46733;2;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r18.iterator(),r108 (CachingBloatContext.toString) Value: interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>());r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r22.iterator(),r179 (RegisterAllocator.<init>) Value: interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>());r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.allocReturnAddresses $r6.iterator(),r3 (CodeGenerator.allocReturnAddresses) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation.propExpr $r5.iterator(),r34 (ExprPropagation.propExpr) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeCriticalEdges $r5.iterator(),r2 (FlowGraph.removeCriticalEdges) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;26;84;46694;2;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r33.iterator(),r159 (FlowGraph.peelLoops) Value: interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>());r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;1035;1092;46669;36;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitFlowGraph $r6.iterator(),r2 (VerifyCFG.visitFlowGraph) Value: interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r11.iterator(),r40 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>());r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;42;98;45617;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.equals r3.iterator(),r28 (ValueNumbering$Tuple.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;true;false;210;151;45574;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode $r13.iterator(),r50 (SSAGraph$5.visitNode) Value: interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>());r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;11;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey.equals r3.iterator(),r5 (SSAPRE$ExprKey.equals) Value: interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>());r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;true;false;216;160;45351;9;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.Peephole.removeUnreachable $r12.iterator(),r4 (Peephole.removeUnreachable) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;true;false;200;514;45145;13;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r7.iterator(),r31 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;33;98;44936;2;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r16.iterator(),r88 (Liveness.computeIntersections) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;117;431;44911;10;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueFolder.visitPhiJoinStmt $r4.iterator(),r2 (ValueFolder.visitPhiJoinStmt) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;56;110;44786;6;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PhiJoinStmt.visitForceChildren $r4.iterator(),r2 (PhiJoinStmt.visitForceChildren) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;false;52;70;44730;5;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (dacapo.Benchmark.validate $r5.iterator(),r2 (Benchmark.validate) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.rename $r12.iterator(),r47 (SSA.rename) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.PersistentCheckElimination.search $r6.iterator(),r13 (PersistentCheckElimination.search) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.computeIntersections $r59.iterator(),r100 (Liveness.computeIntersections) Value: interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>());r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;53;237;44686;10;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.context.CachingBloatContext.toString $r22.iterator(),r112 (CachingBloatContext.toString) Value: interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>());r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops $r12.iterator(),r3 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;36;131;44632;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r10.iterator(),r52 (SSAPRE.codeMotion) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;45;158;44596;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInference$1.visitInitStmt $r11.iterator(),r5 (TypeInference$1.visitInitStmt) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1.visitComponent r1.iterator(),r2 (InductionVarAnalyzer$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;false;51;81;44533;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes r48.iterator(),r4 (FlowGraph.setBlockTypes) Value: interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>());r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.MethodEditor.commit $r15.iterator(),r139 (MethodEditor.commit) Value: virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>());r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;true;false;348;897;44481;23;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.file.ClassFileLoader.loadClass $r5.iterator(),r94 (ClassFileLoader.loadClass) Value: virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>());r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;false;86;298;44126;11;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis r32.iterator(),r40 (SSAPRE.placePhis) Value: interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>());r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitPhiBlocks $r69.iterator(),r74 (FlowGraph.splitPhiBlocks) Value: interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>());r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;138;331;44048;11;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r12.iterator(),r59 (SSAPRE.codeMotion) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;58;158;43909;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.idf r13.iterator(),r6 (FlowGraph.idf) Value: interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness$1.<init> $r6.iterator(),$r7 (Liveness$1.<init>) Value: interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>());$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;true;false;174;633;43851;41;11;4450;0;
ideal;IteratorHasNext;ForwardQuery: (dacapo.Benchmark.postIterationCleanup $r5.iterator(),r2 (Benchmark.postIterationCleanup) Value: interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor.visitPhiStmt r2.iterator(),r14 (TypeInferenceVisitor.visitPhiStmt) Value: interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>());r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;75;93;43669;5;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r56.iterator(),r168 (FlowGraph.peelLoops) Value: interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>());r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeBlock $r16.iterator(),r32 (FlowGraph.removeBlock) Value: interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>());r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.search $r9.iterator(),r70 (SSAPRE.search) Value: interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>());r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;41;115;43593;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.addHandlerEdges $r14.iterator(),r24 (FlowGraph.addHandlerEdges) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;38;136;43552;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildTreeForBlock $r72.iterator(),r91 (FlowGraph.buildTreeForBlock) Value: interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>());r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;37;66;43515;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops r6.iterator(),r133 (FlowGraph.peelLoops) Value: interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>());r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;604;723;43478;38;16;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> r168.iterator(),r172 (RegisterAllocator.<init>) Value: virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>());r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;191;548;42874;9;10;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.optimize.Main.main r123.iterator(),r133 (Main.main) Value: interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>());r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;64;114;42683;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph.printSCCs r2.iterator(),r3 (SSAGraph.printSCCs) Value: interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;false;false;0;3;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitFlowGraph $r5.iterator(),r2 (PrintVisitor.visitFlowGraph) Value: interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;61;107;42609;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$12.<init> $r3.iterator(),$r4 (SSAPRE$12.<init>) Value: interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>());$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;true;false;239;428;42557;19;13;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.computeCanBeAvail $r12.iterator(),r5 (SSAPRE.computeCanBeAvail) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;34;114;42318;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut $r19.iterator(),r95 (Liveness.liveOut) Value: interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>());r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;53;252;42284;9;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.splitIrreducibleLoops r2.iterator(),r19 (FlowGraph.splitIrreducibleLoops) Value: interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>());r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r115.iterator(),r126 (FlowGraph.peelLoops) Value: interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>());r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;326;2474;42232;35;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$1.visitComponent r1.iterator(),r25 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;87;147;41898;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.ReplaceTarget.visitRetStmt $r5.iterator(),r2 (ReplaceTarget.visitRetStmt) Value: interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;false;57;100;41810;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.visitFlowGraph $r13.iterator(),r2 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;104;216;41753;7;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph$6.visitBlock $r11.iterator(),r2 (FlowGraph$6.visitBlock) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;false;45;110;41649;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.Tree.initLocals r1.iterator(),r3 (Tree.initLocals) Value: interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;false;40;69;41611;4;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r29.iterator(),r55 (SSAPRE.codeMotion) Value: interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>());r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;52;203;41571;8;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.array $r4.iterator(),r27 (CodeArray.array) Value: interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>());r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.Peephole.removeUnreachable r1.iterator(),r53 (Peephole.removeUnreachable) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;true;false;350;514;41519;7;17;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.CodeGenerator.visitFlowGraph $r16.iterator(),r3 (CodeGenerator.visitFlowGraph) Value: interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>());r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;54;94;41160;6;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.rename r2.iterator(),r5 (SSAPRE.rename) Value: virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>());r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;3301;17107;41120;8;793;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PrintVisitor.visitPhiJoinStmt $r10.iterator(),r2 (PrintVisitor.visitPhiJoinStmt) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;57;107;37809;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.finalizeVisit $r10.iterator(),r37 (SSAPRE.finalizeVisit) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.tree.PhiJoinStmt.<init> $r8.iterator(),r3 (PhiJoinStmt.<init>) Value: interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;false;36;99;37762;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.search $r11.iterator(),r73 (SSAPRE.search) Value: interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>());r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.ClassHierarchy.superclass r3.iterator(),r4 (ClassHierarchy.superclass) Value: interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;41;94;37717;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominatorTree.buildTree $r7.iterator(),r76 (DominatorTree.buildTree) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;90;255;37683;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier $r4.iterator(),r22 (DominanceFrontier.calcFrontier) Value: interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>());r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.peelLoops $r85.iterator(),r148 (FlowGraph.peelLoops) Value: interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>());r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;5460;2474;37595;26;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.resetCanBeAvail $r10.iterator(),r3 (SSAPRE.resetCanBeAvail) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;22;52;32135;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildTrees $r25.iterator(),r4 (FlowGraph.buildTrees) Value: interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>());r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;76;191;32113;6;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.util.Graph.number $r7.iterator(),r3 (Graph.number) Value: interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;false;46;101;32028;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator.<init> $r28.iterator(),r175 (RegisterAllocator.<init>) Value: interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>());r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;48;225;31991;8;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.computeWeight $r23.iterator(),r6 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>());r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;42;143;31943;5;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ExprPropagation$1.visitTree $r3.iterator(),$r4 (ExprPropagation$1.visitTree) Value: interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>());$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;30021;25341;30005;0;850;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.VerifyCFG.visitBlock $r46.iterator(),r59 (VerifyCFG.visitBlock) Value: interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>());r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode.computeWeight $r9.iterator(),r1 (RegisterAllocator$IGNode.computeWeight) Value: interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>());r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r14.iterator(),r42 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;70;145;1950;4;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.setBlockTypes r49.iterator(),r55 (FlowGraph.setBlockTypes) Value: interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>());r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;8;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.insertProtStores $r10.iterator(),r21 (FlowGraph.insertProtStores) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSA.placePhiFunctions $r7.iterator(),r26 (SSA.placePhiFunctions) Value: interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;45;120;1879;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.buildLoopTree $r9.iterator(),r36 (FlowGraph.buildLoopTree) Value: interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>());r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;33;98;1825;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.FlowGraph.removeBlock $r14.iterator(),r30 (FlowGraph.removeBlock) Value: interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>());r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;9;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.ClassHierarchy.<init> $r11.iterator(),r3 (ClassHierarchy.<init>) Value: virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>());r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;42;64;1791;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.cfg.DominanceFrontier.calcFrontier r24.iterator(),r25 (DominanceFrontier.calcFrontier) Value: virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>());r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;63;163;1748;5;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.codeMotion $r19.iterator(),r57 (SSAPRE.codeMotion) Value: interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>());r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60;191;1686;7;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.enqueueParents $r12.iterator(),r5 (SSAPRE.enqueueParents) Value: interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>());r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;59;125;1626;4;15;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.ssa.SSAGraph$5.visitNode $r46.iterator(),r55 (SSAGraph$5.visitNode) Value: interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>());r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;67;176;1558;10;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.enqueueParents $r10.iterator(),r3 (SSAPRE.enqueueParents) Value: interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>());r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;23;53;1500;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.editor.CodeArray.buildCode $r146.iterator(),r223 (CodeArray.buildCode) Value: interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>());r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;0;1;0;0;2;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE$Phi.toString $r24.iterator(),r1 (SSAPRE$Phi.toString) Value: interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>());r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;66;169;1470;6;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.beginTry $r10.iterator(),r2 (SSAPRE.beginTry) Value: interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;46;92;1411;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.codegen.Liveness.liveOut r4.iterator(),r7 (Liveness.liveOut) Value: interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>());r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;524;552;1367;10;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.SSAPRE.placePhis $r18.iterator(),r33 (SSAPRE.placePhis) Value: interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>());r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;42;151;843;1;7;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$1.visitComponent r1.iterator(),r26 (ValueNumbering$1.visitComponent) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;118;147;792;5;9;4450;0;
ideal;IteratorHasNext;ForwardQuery: (EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple.toString r1.iterator(),r2 (ValueNumbering$Tuple.toString) Value: interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>());r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;50;78;675;7;9;4450;0;
