Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;1784;56;1784;0;3;4450;r0[hierarchy, implementsGraph, nodes, this$0];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;183;32;25;158;3;4450;r0[hierarchy, implementsGraph, nodes, this$0];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;35260;76;35260;0;6;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1425;123;1425;0;4;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1236;153;1236;0;4;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1215;117;1215;0;3;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;1273;211;1273;0;3;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;868;79;868;0;3;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;873;101;873;0;3;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;true;false;115;71;24;91;4;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;61374;120;61374;0;6;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1325;405;1325;0;3;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;8975;663;8975;0;4;4450;r0[params, array, array, expr, size, array, expr, value];
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;false;true;60047;812;60047;0;22;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r154 @ r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60041;109;60041;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;false;true;60055;316;60055;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;61796;385;61796;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;745;88;745;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60627;54;60627;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;true;60048;59;60048;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;true;60057;110;60057;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r62 @ r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;737;33;737;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r37 @ r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30106;63;30036;70;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;37452;25;37452;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30103;76;30031;72;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;107;191;29;78;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r13 @ r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;false;true;9226;82;9226;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30203;147;30092;111;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;true;60026;95;60026;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;2768;67;2768;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1206;129;1206;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60816;61;60816;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3929;37;3929;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;860;129;860;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;true;false;30104;145;30030;74;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;31325;11267;31325;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;855;42;855;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;false;true;60041;123;60041;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;103;166;24;79;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r58 @ r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60037;231;60037;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;31017;65;30947;70;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60053;123;60053;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;706;78;706;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;825;93;825;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;3375;100;3375;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r102 @ r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;97;357;24;73;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r130 @ r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;true;60054;91;60054;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60053;283;60053;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;true;60086;86;60086;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;4675;25;4675;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r231 @ r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;60040;407;60040;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30122;118;30047;75;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;38270;56;38270;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60043;385;60043;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r94 @ r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;true;60045;254;60045;0;8;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;true;60056;149;60056;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;true;60052;86;60052;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30112;187;30040;72;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60055;136;60055;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r169 @ r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;3574;197;3574;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r181 @ r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;30128;248;30034;94;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r73 @ r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30103;63;30038;65;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;true;60048;50;60048;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r9 @ r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2079;1271;2079;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r105 @ r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60255;103;60255;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1006;113;1006;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r108 @ r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;92;192;23;69;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;true;40540;120;40540;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r143 @ r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60058;247;60058;0;5;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30136;1281;30052;84;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2550;1164;2550;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;103;227;27;76;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60052;202;60052;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r19 @ r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30095;299;30027;68;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2152;308;2152;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;839;39;839;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;true;60047;105;60047;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;60069;90;60069;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60061;449;60061;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r139 @ r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60050;267;60050;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;97;67;21;76;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;true;31339;67;31339;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;870;47;870;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;true;60048;128;60048;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;845;37;845;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;true;60039;63;60039;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;true;60050;67;60050;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;true;60053;105;60053;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r218 @ r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30833;11566;30394;439;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;806;53;806;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;823;114;823;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60055;121;60055;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30711;161;30647;64;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r63 @ r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1394;55;1394;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r223 @ r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;31764;5377;30700;1064;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r140 @ r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60293;8936;60293;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60065;63;60065;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;true;36431;77;36431;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1541;71;1541;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;60096;1;60096;0;67;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;true;60059;92;60059;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1241;109;1241;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;31047;1984550;31047;0;853;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30124;142;30024;100;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;40436;431;40436;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1563;89;1563;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r29 @ r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60043;75;60043;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r16 @ r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;3945;57;3945;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;true;60047;51;60047;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r33 @ r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;4545;65;4545;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;877;52;877;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;true;60047;95;60047;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;true;60052;113;60052;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30117;443;30034;83;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;717;193;717;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;30571;798;30489;82;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1204;87;1204;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r110 @ r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;95;137;21;74;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;31759;737;31759;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1005;160;1005;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30106;65;30039;67;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;31032;1876265;31032;0;827;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;31019;1475321;31019;0;827;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;true;60050;52;60050;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r151 @ r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30494;8161;30227;267;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r54 @ r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30131;976;30050;81;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1494;40;1494;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;false;true;60118;2769;60118;0;61;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r159 @ r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1750;385;1750;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;10974;189;10974;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;60046;142;60046;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;4003;161;4003;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60047;65;60047;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;true;60049;154;60049;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;61119;82;61119;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r90 @ r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;1112;214;1112;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;833;31;833;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30140;846;30038;102;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60063;178;60063;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;111;400;23;88;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r59 @ r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;true;60053;78;60053;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;60066;206;60066;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30123;563;30034;89;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30100;115;30028;72;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r96 @ r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;102;522;24;78;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r41 @ r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;15408;109;15408;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r112 @ r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;99;82;23;76;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r126 @ r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;36240;467;36240;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;899;33;899;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r104 @ r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;98;302;21;77;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r168 @ r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30666;8227;30344;322;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;true;false;30119;84;30047;72;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r66 @ r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;1236;391;1236;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1325;88;1325;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30097;123;30029;68;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;99;412;24;75;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;92;64;21;71;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60042;120;60042;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;5967;64;5967;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r98 @ r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;100;467;25;75;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r7 @ r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;871;209;871;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;843;189;843;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30332;1013;30254;78;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;true;false;136;71;61;75;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;true;60041;36;60041;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r70 @ r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60052;100;60052;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r12 @ r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;true;60043;192;60043;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1031;265;1031;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1212;73;1212;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;true;60051;85;60051;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r25 @ r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;true;60051;76;60051;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;true;1292;84;1292;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r72 @ r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;779;2325;779;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r226 @ r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30741;10396;30340;401;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;3117;147;3117;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1236;225;1236;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1282;323;1282;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30090;204;30023;67;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;true;60067;50;60067;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r61 @ r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60051;62;60051;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;1576;63;1576;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r164 @ r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60228;1;60228;0;5;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60276;195;60276;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1299;72;1299;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;8870;372;8870;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30093;188;30024;69;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r88 @ r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;2194;225;2194;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r170 @ r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1250;405;1250;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30093;105;30022;71;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;true;60051;122;60051;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;true;60052;173;60052;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r159 @ r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60043;88;60043;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;true;1341;37;1341;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r91 @ r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;8213;52;8213;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60047;75;60047;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;750;119;750;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r106 @ r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;114;247;24;90;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r64 @ r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;1191;209;1191;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60052;449;60052;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;true;38477;44;38477;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;101;112;28;73;8;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;true;60051;50;60051;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r244 @ r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30518;8598;30243;275;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60050;92;60050;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1157;109;1157;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r156 @ r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1226;405;1226;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;true;60058;52;60058;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r148 @ r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2722;405;2722;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;37709;148;37709;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;true;60046;127;60046;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;true;false;30103;144;30031;72;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1533;181;1533;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r210 @ r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;60042;596;60042;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60041;62;60041;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;60068;80;60068;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30104;292;30037;67;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30108;100;30042;66;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1259;74;1259;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;true;1256;51;1256;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;3004;89;3004;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1229;357;1229;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;1231;67;1231;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30105;76;30037;68;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1270;63;1270;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;32286;1940481;32286;0;785;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1258;133;1258;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r78 @ r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;60042;101;60042;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;721;96;721;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;31021;1789509;31021;0;785;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r21 @ r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1256;67;1256;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;100;336;26;74;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;4810;165;4810;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60035;240;60035;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60050;51;60050;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r130 @ r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;30102;333;30034;68;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;true;60053;51;60053;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;100;374;26;74;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r26 @ r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;91;63;20;71;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60047;64;60047;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r11 @ r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;871;349;871;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;true;1194;55;1194;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;true;60028;80;60028;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;true;60052;36;60052;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;true;60049;150;60049;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1276;79;1276;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1300;104;1300;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r154 @ r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;872;388;872;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;90;124;21;69;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1119;41;1119;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r27 @ r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30101;302;30030;71;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r208 @ r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;60039;609;60039;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;true;60042;38;60042;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;851;118;851;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30106;158;30033;73;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;true;60049;53;60049;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;60037;129;60037;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r166 @ r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;694;398;694;0;5;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;true;false;89;72;22;67;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r142 @ r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1225;727;1225;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;90;75;23;67;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30105;291;30037;68;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r93 @ r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60040;209;60040;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;32445;1696;32445;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;true;false;30106;73;30042;64;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r145 @ r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30572;8895;30262;310;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30088;63;30024;64;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;90;75;21;69;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;true;60046;78;60046;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;false;true;60042;149;60042;0;7;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;1194;348;1194;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;true;false;124;410;50;74;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;false;true;30682;468;30682;0;6;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;684;191;684;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30108;626;30037;71;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;true;false;30110;127;30040;70;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;90;162;21;69;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;$r3 @ $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;false;true;60068;1871;60068;0;10;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r86 @ r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;1190;202;1190;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;86;103;18;68;2;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60050;238;60050;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r172 @ r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;60056;181;60056;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;true;60049;50;60049;0;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;30109;192;30035;74;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1275;405;1275;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;859;69;859;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30092;113;30028;64;4;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60051;107;60051;0;3;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
ideal-ap;IteratorHasNext;r171 @ r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60265;8190;60265;0;5;4450;r0[table, array, next, after, before, prev, left, parent, right, value];
