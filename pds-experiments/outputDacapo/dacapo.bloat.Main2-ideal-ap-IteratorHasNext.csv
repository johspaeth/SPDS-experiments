Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;false;true;60198;812;60198;0;22;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;60041;1;60039;2;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r181 @ r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;30178;248;30041;137;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r106 @ r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;116;247;34;82;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;60051;211;60051;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r41 @ r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30105;109;30038;67;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30133;663;30052;81;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;false;true;32949;77;32949;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;true;60034;78;60034;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;123;112;36;87;8;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;91;90;28;63;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60040;75;60040;0;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30102;100;30037;65;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r164 @ r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60292;6972;60292;0;5;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60069;385;60069;0;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60041;181;60041;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r151 @ r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30606;8161;30286;320;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30078;76;30022;56;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;true;false;30074;73;30025;49;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;60033;1;60033;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60047;449;60047;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2336;160;2336;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60043;161;60043;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60050;133;60050;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;false;true;60038;149;60038;0;7;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60046;449;60046;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30116;626;30041;75;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;31021;983428;31021;0;785;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60033;283;60033;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r169 @ r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;60039;197;60039;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;true;60041;55;60041;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3316;39;3316;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;true;60028;52;60028;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;true;60026;38;60026;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;false;true;3253;2769;3253;0;61;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30086;291;30031;55;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30118;65;30060;58;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3279;37;3279;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;true;39907;105;39907;0;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60030;238;60030;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;true;false;69;71;19;50;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30075;123;30023;52;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;true;60028;51;60028;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;true;60032;80;60032;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;true;60030;53;60030;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r27 @ r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30091;302;30031;60;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r126 @ r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60028;467;60028;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;true;60035;105;60035;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;true;60030;44;60030;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30104;1013;30036;68;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60038;117;60038;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;73;124;21;52;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60035;109;60035;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60038;348;60038;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30082;76;30029;53;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60034;1;60034;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60041;88;60041;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;7200;129;7200;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r13 @ r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;true;false;30084;82;30027;57;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3457;114;3457;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60354;11267;60354;0;7;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60027;51;60027;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60030;107;60030;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r110 @ r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;78;137;22;56;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;33624;63;33624;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;82;64;24;58;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;60042;79;60042;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;true;60109;5462;60109;0;67;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30082;165;30029;53;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r54 @ r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30158;976;30057;101;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3364;31;3364;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;true;false;30076;145;30023;53;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;4123;42;4123;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60038;100;60038;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;true;60034;67;60034;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r156 @ r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60052;405;60052;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30086;67;30028;58;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;true;false;93;71;42;51;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30104;737;30043;61;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;true;60025;50;60025;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;5913;119;5913;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r91 @ r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60038;52;60038;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r93 @ r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60034;209;60034;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;72;63;22;50;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r62 @ r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60037;33;60037;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60041;64;60041;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2359;88;2359;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60030;240;60030;0;7;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r11 @ r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60049;349;60049;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;true;false;30103;67;30037;66;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r98 @ r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;100;467;30;70;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30078;65;30027;51;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;true;34953;113;34953;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;true;39004;110;39004;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;true;60027;78;60027;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60026;75;60026;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2831;52;2831;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r29 @ r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60033;75;60033;0;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r208 @ r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;60036;609;60036;0;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;31039;1048292;31039;0;850;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30119;1164;30048;71;4;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r154 @ r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;60034;388;60034;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r86 @ r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60035;202;60035;0;3;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r231 @ r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;60031;407;60031;0;6;4455;r0[this$0, ig, nodes, map, tail, parent, next, prev, right];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;64732;25;64732;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60033;65;60033;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;31019;1063176;31019;0;827;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r159 @ r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2061;385;2061;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r61 @ r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60027;62;60027;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;true;32972;36;32972;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30077;113;30027;50;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30085;443;30024;61;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;true;false;106;410;50;56;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30080;115;30020;60;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;true;60033;51;60033;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r70 @ r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60029;100;60029;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r142 @ r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60045;727;60045;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;true;60027;173;60027;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2975;40;2975;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30091;142;30021;70;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60042;93;60042;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;true;60036;149;60036;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30120;1281;30054;66;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r143 @ r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60028;247;60028;0;5;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60030;123;60030;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60036;385;60036;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60039;113;60039;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;104;374;33;71;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30094;161;30042;52;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;false;true;2342;468;2342;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60033;87;60033;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r102 @ r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;85;357;22;63;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r105 @ r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60031;103;60031;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;true;33172;128;33172;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60027;61;60027;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;80;412;23;57;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30078;89;30027;51;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r244 @ r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30523;8598;30217;306;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;true;60026;50;60026;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60034;54;60034;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3638;37;3638;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60035;73;60035;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;68;75;19;49;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;60033;53;60033;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;true;60032;62;60032;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r139 @ r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60032;267;60032;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;false;true;60028;123;60028;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2125;78;2125;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;75;166;20;55;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30089;846;30028;61;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30078;105;30027;51;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60063;202;60063;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60043;405;60043;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;73;82;19;54;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30086;372;30030;56;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30076;123;30029;47;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r226 @ r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30694;10396;30322;372;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30084;187;30034;50;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;true;60030;150;60030;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;30106;798;30047;59;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r7 @ r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60036;209;60036;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60065;1696;60065;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30081;158;30021;60;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r112 @ r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;62;82;18;44;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;60037;71;60037;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;77;64;22;55;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r130 @ r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60029;333;60029;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2931;41;2931;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;true;60028;63;60028;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;11218;118;11218;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;true;60035;86;60035;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r3 @ $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;false;true;60064;1871;60064;0;10;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r9 @ r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30106;1271;30039;67;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r72 @ r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;2222;2325;2222;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30100;323;30035;65;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;true;60042;84;60042;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r171 @ r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60221;1;60221;0;5;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2091;178;2091;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r16 @ r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60034;57;60034;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;true;60036;37;60036;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30105;563;30030;75;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r130 @ r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;true;60033;91;60033;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;31210;76;31210;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;60037;129;60037;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60034;92;60034;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r223 @ r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30719;9458;30329;390;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3028;109;3028;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;78;147;20;58;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60046;189;60046;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r145 @ r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;31416;7051;30304;1112;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;true;false;30079;144;30026;53;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60037;72;60037;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2178;96;2178;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;true;false;30100;431;30044;56;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;true;false;63;72;19;44;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r96 @ r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;93;522;24;69;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r19 @ r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30090;299;30033;57;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;79;191;24;55;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;true;60027;92;60027;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r66 @ r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;60035;1;60035;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30086;147;30024;62;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;true;60022;95;60022;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60029;120;60029;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30083;89;30028;55;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r218 @ r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30811;11566;30353;458;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60038;79;60038;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60042;308;60042;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;true;60049;154;60049;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;true;60027;36;60027;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;80;120;20;60;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r148 @ r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60044;405;60044;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r25 @ r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;true;60033;76;60033;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r159 @ r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60027;88;60027;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;true;60052;127;60052;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r88 @ r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;60026;225;60026;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;true;60030;95;60030;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;60032;80;60032;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;60027;142;60027;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r33 @ r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2073;65;2073;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60036;193;60036;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;72;206;20;52;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;31017;1068659;31017;0;827;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;true;60027;52;60027;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30081;204;30022;59;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;false;true;2392;127;2392;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2795;101;2795;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r108 @ r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;84;192;24;60;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60029;121;60029;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r37 @ r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30089;63;30029;60;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r210 @ r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;true;60040;596;60040;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r168 @ r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30529;8227;30218;311;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30082;292;30029;53;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;true;31010;188;30967;43;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;79;400;26;53;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;true;60027;85;60027;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60046;225;60046;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;true;60037;136;60037;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;74;195;21;53;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r140 @ r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60272;8936;60272;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30099;153;30029;70;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r154 @ r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60028;109;60028;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;76;162;19;57;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;true;60038;51;60038;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;6634;191;6634;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r21 @ r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30082;67;30027;55;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r64 @ r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;60035;209;60035;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r172 @ r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;60029;181;60029;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60041;47;60041;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r94 @ r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;false;101;254;37;64;8;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;77;67;22;55;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;73;103;23;50;2;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;true;false;30080;84;30025;55;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;true;60027;63;60027;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60035;69;60035;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;true;38630;86;38630;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r170 @ r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60044;405;60044;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;60037;104;60037;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;60040;357;60040;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r12 @ r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;true;60026;192;60026;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30081;118;30024;57;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;30078;192;30027;51;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r63 @ r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60036;55;60036;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;true;60029;120;60029;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;31011;1041495;31011;0;785;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;true;60026;50;60026;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;true;60033;59;60033;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;95;336;29;66;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;76;32;22;54;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r73 @ r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30077;63;30027;50;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;false;true;60028;316;60028;0;7;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30096;67;30041;55;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30084;63;30028;56;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;true;60032;50;60032;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60036;1;60036;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r104 @ r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;76;302;22;54;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r58 @ r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;60030;231;60030;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r78 @ r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;60029;101;60029;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;60044;56;60044;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r166 @ r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;2137;398;2137;0;5;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;75;227;21;54;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;60036;74;60036;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3115;189;3115;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r90 @ r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;2403;214;2403;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;60043;405;60043;0;3;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r26 @ r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;60036;63;60036;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;72;148;19;53;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;8587;265;8587;0;6;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;true;60029;122;60029;0;4;4455;r0[params, array, expr, array, expr, size, array, expr, value, map];
