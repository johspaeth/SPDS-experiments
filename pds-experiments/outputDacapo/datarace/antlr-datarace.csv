QueryA;QueryB;Boomerang_res;Boomerang_time(ms);Boomerang_timeout;Sridharan_res;Sridharan_time(ms);Sridharan_timeout;Dacong_res;Dacong_time(ms);Dacong_timeout
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r4 = r0.bits,r0 (BitSet.orInPlace));false;357;false;true;480;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;459;false;true;185;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r15 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;521;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i8 = $r11.guessing,$r11 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;480;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i26 = $r36.guessing,$r36 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;420;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: boolean lastInRule()> $i0 = r0.blockNesting,r0 (ANTLRParser.lastInRule));BackwardQuery: (<antlr.ANTLRParser: void block()> r0.blockNesting = $i5,r0 (ANTLRParser.block));true;735;false;true;246;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: java.lang.String superClass()> $i0 = $r1.guessing,$r1 (ANTLRParser.superClass));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;257;false;true;53;false
BackwardQuery: (<antlr.MakeGrammar: void refMemberAction(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.refMemberAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(long[])> r0.bits = r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: int degree()> $r1 = r0.bits,r0 (BitSet.degree));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r11 = r0.options,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (TokenBuffer.syncConsume));true;-1;true;true;857;false;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2587,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.generateAmbigWarnings = $z3,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;17;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.terminal));true;-1;true;true;279;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i10 = $r24.guessing,$r24 (ANTLRParser.terminal));true;-1;true;true;318;false;true;4;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r28 = $r27.tokenManager,$r27 (DefineGrammarSymbols.defineToken));true;-1;true;true;658;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r12 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;482;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r2 = r0.inputState,r0 (ANTLRParser.range));true;640;false;true;372;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i0 = r0.nargs,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i8,r0 (Tool.processArguments));true;35;false;true;285;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.ruleOptionsSpec));true;-1;true;true;313;false;true;7;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitive = varReplacer2444,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2657,r0 (LexerGrammar.setOption));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r21 = r0.inputState,r0 (ANTLRParser.ebnf));true;718;false;true;287;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;348;false;true;3;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $r10 = r0.inputState,r0 (ANTLRParser.tokensSpec));true;526;false;true;228;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r123 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;281;false;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $z2 = $r7.caseSensitive,$r7 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2664,r0 (LexerGrammar.setOption));true;-1;true;true;734;false;true;341;false
BackwardQuery: (<antlr.preprocessor.Rule: boolean getBang()> $z0 = r0.bang,r0 (Rule.getBang));BackwardQuery: (<antlr.preprocessor.Rule: void setBang()> r0.bang = varReplacer1800,r0 (Rule.setBang));false;2;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r81 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;358;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;464;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.traceRules = varReplacer2398,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: void processArguments(java.lang.String[])> r0.traceRules = varReplacer2410,r0 (ParserGrammar.processArguments));true;-1;true;true;598;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r20 = r0.antlrTool,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));true;25;false;true;251;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;254;false;true;17;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r17 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;251;false;true;456;false
BackwardQuery: (<antlr.RuleRefElement: void setIdAssign(java.lang.String)> r0.idAssign = r1,r0 (RuleRefElement.setIdAssign));BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.idAssign = varReplacer2171,r0 (RuleRefElement.<init>));true;-1;true;true;489;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;218;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refArgAction));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r10 = r0.tool,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;240;false;true;470;false
BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r19 = r0.tool,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;236;false;true;603;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r82 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;255;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r4 = $r3.exportVocab,$r3 (DefineGrammarSymbols.endOptions));true;-1;true;true;355;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i13 = $r47.guessing,$r47 (ANTLRParser.rule));true;-1;true;true;251;false;true;1;false
BackwardQuery: (<antlr.ANTLRHashString: char charAt(int)> $r3 = r0.s,r0 (ANTLRHashString.charAt));BackwardQuery: (<antlr.ANTLRHashString: void setBuffer(char[],int)> r0.s = varReplacer3199,r0 (ANTLRHashString.setBuffer));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;263;false;true;460;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: void setTool(antlr.Tool)> r0.antlrTool = r1,r0 (Preprocessor.setTool));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.Tool getTool()> $r1 = r0.antlrTool,r0 (Preprocessor.getTool));true;84;false;true;223;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r5 = r1.bits,r1 (BitSet.orInPlace));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;24;false;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r108 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;252;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $r3 = r1.initAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.initAction = varReplacer2239,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17.preambleAction = $r16,$r17 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r6.preambleAction = $r13,r6 (DefineGrammarSymbols.startLexer));true;-1;true;true;367;false;false;0;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r2 = r0.head,r0 (LList.top));true;-1;true;true;490;false;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.tail = varReplacer1585,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.tail = $r6,r0 (LList.insertHead));true;-1;true;true;350;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r10 = r0.lastRuleRef,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.lastRuleRef = varReplacer2400,r0 (MakeGrammar.reset));true;-1;true;true;255;false;true;-1;true
BackwardQuery: (<antlr.CharQueue: void append(char)> $i2 = r0.nbrEntries,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r23 = r0.antlrTool,r0 (Tool.preprocess));true;25;false;true;233;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.NoViableAltForCharException: void <init>(char,java.lang.String,int,int)> r0.foundChar = c0,r0 (NoViableAltForCharException.<init>));BackwardQuery: (<antlr.NoViableAltForCharException: java.lang.String getMessage()> $c12 = r0.foundChar,r0 (NoViableAltForCharException.getMessage));false;14;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r27 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;399;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r4 = r0.bits,r0 (BitSet.orInPlace));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;24;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r33 = r0.block,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.block = r2,r0 (Rule.<init>));false;1;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;250;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.SimpleTokenManager: void setReadOnly(boolean)> r0.readOnly = z0,r0 (SimpleTokenManager.setReadOnly));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.readOnly = varReplacer2365,r0 (SimpleTokenManager.<init>));false;11;false;true;219;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;749;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r9 = r0.grammarFileName,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammarFileName = $r6,r0 (Tool.processArguments));true;28;false;true;222;false;true;0;false
BackwardQuery: (<antlr.Tool: boolean hasError()> $z0 = r0.hasError,r0 (Tool.hasError));BackwardQuery: (<antlr.Tool: void error(java.lang.String,java.lang.String,int,int)> r0.hasError = varReplacer2129,r0 (Tool.error));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z4 = r1.greedy,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.greedy = varReplacer2179,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void refMemberAction(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.refMemberAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;258;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;254;false;true;2;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i8 = $r11.guessing,$r11 (ANTLRParser.rule));true;-1;true;true;365;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i2 = $r2.guessing,$r2 (ANTLRParser.exceptionSpec));true;-1;true;true;299;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.RuleBlock: void setDefaultErrorHandler(boolean)> r0.defaultErrorHandler = z0,r0 (RuleBlock.setDefaultErrorHandler));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.defaultErrorHandler = varReplacer2565,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;324;false;true;0;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r8 = $r7.tokenManager,$r7 (DefineGrammarSymbols._refToken));true;-1;true;true;759;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $i5 = r0.sizeLessOne,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void expand()> r0.sizeLessOne = $i4,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i10 = $r35.guessing,$r35 (ANTLRParser.rule));true;-1;true;true;256;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r17 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;275;false;true;477;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r30 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;393;false;true;8;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r37 = r0.initAction,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void setInitAction(java.lang.String)> r0.initAction = r1,r0 (Rule.setInitAction));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;392;false;true;963;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;321;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r39 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;314;false;true;31;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.warnWhenFollowAmbig = varReplacer2236,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2593,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.CharScanner: int getColumn()> $r1 = r0.inputState,r0 (CharScanner.getColumn));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;417;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i2 = $r1.guessing,$r1 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;279;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i1 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;31;false;true;246;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.superGrammar = r3,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r6 = r0.superGrammar,r0 (Grammar.toString));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $i2 = r4.end,r4 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> r0.end = $i2,r0 (TokenRangeElement.<init>));true;116;false;true;246;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = z0,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $r4 = r0.behavior,r0 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;467;false;true;290;false;true;1;false
BackwardQuery: (<antlr.CharStreamIOException: void <init>(java.io.IOException)> r0.io = r1,r0 (CharStreamIOException.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r12 = $r11.io,$r11 (ANTLRTokdefLexer.nextToken));false;5;false;true;352;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r39 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;316;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;932;false;true;548;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;378;false;true;-1;true
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rootNode()> $i4 = $r6.guessing,$r6 (ANTLRParser.rootNode));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r24 = $r23.block,$r23 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.Token: java.lang.String toString()> $i0 = r0.type,r0 (Token.toString));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> r0.nested = $i1,r0 (MakeGrammar.beginSubRule));true;-1;true;true;288;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i1 = $r2.guessing,$r2 (ANTLRParser.rule));true;-1;true;true;230;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r3 = r0.buffer,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r4 = r1.block,r1 (MakeGrammar.endTree));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i7 = $r5.guessing,$r5 (ANTLRParser.rule));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;233;false;true;10;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i10 = r0.expecting,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.expecting = c1,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r13 = r0.grammar,r0 (MakeGrammar.refReturnAction));true;-1;true;true;241;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r9 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammars = $r11,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r3 = r0.grammars,r0 (Tool.preprocess));true;26;false;true;217;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i2 = $r1.guessing,$r1 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;244;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r17 = $r16.ruleName,$r16 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));true;-1;true;true;342;false;true;913;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r24 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;217;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i28 = $r44.guessing,$r44 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.TokenQueue: void expand()> r0.sizeLessOne = $i4,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i4 = r0.sizeLessOne,r0 (TokenQueue.append));true;-1;true;true;738;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i16 = $r38.guessing,$r38 (ANTLRParser.ebnf));true;-1;true;true;413;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;313;false;true;0;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r27 = r0.atomText,r0 (StringLiteralElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));true;158;false;true;327;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i17 = $r39.guessing,$r39 (ANTLRParser.ebnf));true;-1;true;true;246;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mID));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r123 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2439,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.defaultErrorHandler = varReplacer2699,r0 (Grammar.setOption));true;-1;true;true;469;false;true;1;false
BackwardQuery: (<antlr.CharQueue: void append(char)> r0.nbrEntries = $i9,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (CharQueue.removeFirst));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r19 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i11 = $r28.guessing,$r28 (ANTLRParser.ebnf));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r147 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r2 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;236;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r5 = $r4.block,$r4 (MakeGrammar.endChildList));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> $r3 = r0.bits,r0 (BitSet.growToInclude));BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r2 = r1.block,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void add(int)> $r2 = r0.bits,r0 (BitSet.add));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r24 = $r23.block,$r23 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.warnWhenFollowAmbig = $z2,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2602,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $r7 = r0.table,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.table = $r5,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mID));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;758;false;true;117;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;738;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r15 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;316;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;733;false;true;275;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $r2 = r0.inputState,r0 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;483;false;true;213;false;true;80;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r4 = $r3.exportVocab,$r3 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;475;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i11 = $r39.guessing,$r39 (ANTLRParser.rule));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r20 = r0.tool,r0 (MakeGrammar.refToken));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;239;false;true;521;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i20 = $r23.guessing,$r23 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;348;false;true;0;false
BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z0 = r0.genDiagnostics,r0 (Tool.getLanguage));BackwardQuery: (<antlr.Tool: void <init>()> r0.genDiagnostics = varReplacer1908,r0 (Tool.<init>));false;0;false;true;347;false;true;1;false
BackwardQuery: (<antlr.AlternativeElement: int getAutoGenType()> $i0 = r0.autoGenType,r0 (AlternativeElement.getAutoGenType));BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar)> r0.autoGenType = varReplacer2168,r0 (AlternativeElement.<init>));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r149 = $r148.exportVocab,$r148 (DefineGrammarSymbols.endOptions));true;-1;true;true;532;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r68 = $r66.exportVocab,$r66 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;534;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i9 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $r2 = r0.data,r0 (Vector.setElementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void <init>(antlr.LexerSharedInputState)> r0.caseSensitiveLiterals = varReplacer1625,r0 (ANTLRLexer.<init>));BackwardQuery: (<antlr.CharScanner: boolean getCaseSensitiveLiterals()> $z0 = r0.caseSensitiveLiterals,r0 (CharScanner.getCaseSensitiveLiterals));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;242;false;true;558;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mRANGE));true;-1;true;true;737;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $i1 = r0.offset,r0 (CharQueue.elementAt));BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.offset = $i3,r0 (CharQueue.removeFirst));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.grammarFile = $r7,r0 (Tool.processArguments));BackwardQuery: (<antlr.Tool: int doEverything(java.lang.String[])> $r18 = r0.grammarFile,r0 (Tool.doEverything));true;-1;true;true;214;false;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.queue = $r1,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.CharBuffer: void fill(int)> $r4 = r0.queue,r0 (CharBuffer.fill));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $r2 = r0.buffer,r0 (TokenQueue.append));true;-1;true;true;473;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r41 = $r40.importVocab,$r40 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));true;-1;true;true;482;false;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> $r52 = r0.antlrTool,r0 (ImportVocabTokenManager.<init>));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));false;5;false;true;219;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r12 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;11;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i1 = $r2.guessing,$r2 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;243;false;true;88;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genDiagnostics = varReplacer1908,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDiagnostics = varReplacer1883,r0 (Tool.processArguments));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;751;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r29 = r0.options,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.options = r3,r0 (Rule.<init>));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r77 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;249;false;true;12;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r53 = r1.memberAction,r1 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(java.lang.String,antlr.preprocessor.Grammar)> r0.memberAction = r1,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.name = r1,r0 (Rule.<init>));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String getName()> $r1 = r0.name,r0 (Rule.getName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r18 = r0.ruleBlock,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;243;false;true;12;false
BackwardQuery: (<antlr.TokenSymbol: void setTokenType(int)> r0.ttype = i0,r0 (TokenSymbol.setTokenType));BackwardQuery: (<antlr.TokenSymbol: int getTokenType()> $i0 = r0.ttype,r0 (TokenSymbol.getTokenType));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;747;false;true;115;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;901;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rootNode()> $i4 = $r6.guessing,$r6 (ANTLRParser.rootNode));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r2 = $r1.exportVocab,$r1 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;473;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r81 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;242;false;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r14 = r0.analyzer,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.analyzer = r3,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;294;false;true;-1;true
BackwardQuery: (<antlr.CharBuffer: void fill(int)> $r3 = r0.input,r0 (CharBuffer.fill));BackwardQuery: (<antlr.CharBuffer: void <init>(java.io.Reader)> r0.input = r1,r0 (CharBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r25 = r0.tool,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;416;false;true;33;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r18 = $r17.tokenManager,$r17 (DefineGrammarSymbols.defineToken));true;-1;true;true;572;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (GrammarFile.setOptions));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r8 = r0.options,r0 (GrammarFile.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i2 = $r6.guessing,$r6 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;248;false;true;86;false
BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1.column = i0,$r1 (CharScanner.setColumn));BackwardQuery: (<antlr.CharScanner: void consume()> $i3 = $r4.column,$r4 (CharScanner.consume));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r18 = r0.grammar,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;520;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r1 = r0.inputState,r0 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;820;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r9 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammars = $r24,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r3 = r0.grammars,r0 (Tool.preprocess));true;26;false;true;211;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i38 = $r64.guessing,$r64 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;242;false;true;66;false
BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i2 = $r6.guessing,$r6 (ANTLRParser.throwsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;361;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;303;false;true;553;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i1 = $r5.guessing,$r5 (ANTLRParser.exceptionGroup));true;-1;true;true;290;false;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> $r32 = r0.antlrTool,r0 (ImportVocabTokenManager.<init>));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));false;0;false;true;267;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r27 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;316;false;true;-1;true
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void resetText()> $i1 = $r4.line,$r4 (CharScanner.resetText));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.line = varReplacer1622,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.collections.impl.LLCell: void <init>(java.lang.Object)> r0.data = r1,r0 (LLCell.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r3 = $r2.data,$r2 (LList.top));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r11 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r5 = r0.grammar,r0 (AlternativeBlock.prepareForAnalysis));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i42 = $r68.guessing,$r68 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r108 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;237;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $r4 = r0.inputState,r0 (ANTLRParser.treeParserSpec));true;474;false;true;217;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;740;false;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i3 = r0.lastElement,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genHTML = varReplacer1901,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genHTML = varReplacer1884,r0 (Tool.processArguments));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r105 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;424;false;true;13;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.offset = $i3,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.offset = varReplacer1618,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r61 = r0.options,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i3 = $r2.guessing,$r2 (ANTLRParser.setBlockElement));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;243;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r6 = $r5.block,$r5 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r97 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;247;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;242;false;true;10;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;729;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r4 = r1.alternatives,r1 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $i0 = r0.numTreeParsers,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numTreeParsers = varReplacer1591,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;294;false;true;10;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $r2 = r0.inputState,r0 (ANTLRParser.alternative));true;588;false;true;278;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i0 = $r4.guessing,$r4 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;308;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r61 = r0.options,r0 (Grammar.toString));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (GrammarFile.setOptions));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r7 = r0.options,r0 (GrammarFile.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i1 = $r4.guessing,$r4 (ANTLRParser.throwsSpec));true;-1;true;true;295;false;true;5;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> $r3 = r0.bits,r0 (BitSet.setSize));true;-1;true;true;258;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $r3 = r0.block,r0 (TreeBlockContext.addAlternativeElement));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $r6 = r0.vector,r0 (VectorEnumerator.nextElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.vector = r1,r0 (VectorEnumerator.<init>));true;22;false;true;214;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r6 = r0.grammar,r0 (MakeGrammar.refRule));true;-1;true;true;248;false;true;24;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r68 = $r66.exportVocab,$r66 (DefineGrammarSymbols.endOptions));true;-1;true;true;499;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;738;false;true;166;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i4 = $r7.guessing,$r7 (ANTLRParser.range));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r31 = $r29.exportVocab,$r29 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));false;0;false;true;483;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r107 = $r105.exportVocab,$r105 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));false;0;false;true;480;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.specifiedVocabulary = varReplacer1742,r1 (Preprocessor.optionSpec));BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.specifiedVocabulary = varReplacer1705,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleSymbol: boolean isDefined()> $z0 = r0.defined,r0 (RuleSymbol.isDefined));BackwardQuery: (<antlr.RuleSymbol: void setDefined()> r0.defined = varReplacer2290,r0 (RuleSymbol.setDefined));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> $r2 = r0.bits,r0 (BitSet.setSize));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void appendElement(java.lang.Object,java.lang.Object)> $r4 = r0.index,r0 (IndexedVector.appendElement));BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>(int)> r0.index = $r2,r0 (IndexedVector.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r23 = r0.tool,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;295;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i6 = $r10.guessing,$r10 (ANTLRParser.range));true;-1;true;true;381;false;true;10;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.saveConsumedInput = varReplacer1662,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void append(char)> $z0 = r0.saveConsumedInput,r0 (CharScanner.append));true;-1;true;true;731;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r27 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;774;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void addAlternative(antlr.Alternative)> $r2 = r0.alternatives,r0 (AlternativeBlock.addAlternative));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;237;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;238;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionHandler));true;-1;true;true;241;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;262;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mWS));true;-1;true;true;756;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r148 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;826;false;true;367;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $i2 = r0.numToConsume,r0 (InputBuffer.syncConsume));BackwardQuery: (<antlr.InputBuffer: void consume()> r0.numToConsume = $i1,r0 (InputBuffer.consume));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r7 = $r6.tokenManager,$r6 (DefineGrammarSymbols._refStringLiteral));true;-1;true;true;554;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r3 = r0.tool,r0 (MakeGrammar.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;297;false;true;7;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.hasASynPred = varReplacer2245,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.hasASynPred = $z0,r0 (MakeGrammar.setBlock));true;-1;true;true;218;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i7 = $r14.guessing,$r14 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;237;false;true;61;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r18 = r0.grammar,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;311;false;true;536;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;249;false;true;735;false
BackwardQuery: (<antlr.CharScanner: void resetText()> $r3 = r0.inputState,r0 (CharScanner.resetText));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;754;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.antlrTool = r1,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: void readGrammarFile(java.lang.String)> $r8 = r0.antlrTool,r0 (Hierarchy.readGrammarFile));true;-1;true;true;209;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mCARET));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $r8 = r0.behavior,r0 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;446;false;true;216;false;true;88;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void addGrammar(antlr.preprocessor.Grammar)> $r3 = r0.symbols,r0 (Hierarchy.addGrammar));BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.symbols = $r5,r0 (Hierarchy.<init>));true;-1;true;true;211;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r15 = r0.behavior,r0 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;526;false;true;213;false;true;117;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z1 = r1.hasAnAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.hasAnAction = varReplacer2174,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r23 = r0.grammar,r0 (StringLiteralElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));false;0;false;true;208;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r125 = $r124.exportVocab,$r124 (DefineGrammarSymbols.endOptions));true;-1;true;true;338;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i9 = $r26.guessing,$r26 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;236;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i3 = $r3.guessing,$r3 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;400;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r124 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;271;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.notTerminal));true;-1;true;true;272;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r4.throwsSpec = r1,$r4 (MakeGrammar.setUserExceptions));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.throwsSpec = varReplacer2284,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r1 = r0.head,r0 (LList.top));true;-1;true;true;538;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;260;false;true;631;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r39 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;269;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r10 = r0.grammar,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;249;false;true;41;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r10 = $r9.block,$r9 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r123 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;368;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i6 = $r16.guessing,$r16 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;244;false;true;156;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r15 = $r14.block,$r14 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r2 = r0.inputState,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;499;false;true;212;false;true;7;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i4 = $r4.guessing,$r4 (ANTLRParser.rule));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r12 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r29 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setCharVocabulary(antlr.collections.impl.BitSet)> $r2 = r0.grammar,r0 (DefineGrammarSymbols.setCharVocabulary));true;-1;true;true;241;false;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i1 = $r2.guessing,$r2 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;240;false;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: int size()> $i0 = r0.lastElement,r0 (Vector.size));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i2 = $r6.guessing,$r6 (ANTLRParser.throwsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;433;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;441;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;355;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r39 = r0.inputState,r0 (ANTLRParser.rule));true;584;false;true;279;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r91 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;303;false;true;11;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r20 = r0.tool,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;230;false;true;117;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = varReplacer2176,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $z0 = r2.not,r2 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.language = varReplacer1588,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r53 = r0.language,r0 (DefineGrammarSymbols.setFileOption));true;-1;true;true;368;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $r1 = r0.queue,r0 (InputBuffer.syncConsume));BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.queue = $r1,r0 (InputBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i0 = $r3.guessing,$r3 (ANTLRParser.throwsSpec));true;-1;true;true;236;false;true;3;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $r6 = r0.inputState,r0 (ANTLRParser.throwsSpec));true;487;false;true;219;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.bang = varReplacer1801,r0 (Rule.<init>));BackwardQuery: (<antlr.preprocessor.Rule: void setBang()> r0.bang = varReplacer1800,r0 (Rule.setBang));true;80;false;true;212;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void <init>(antlr.LexerSharedInputState)> r0.literals = $r2,r0 (PreprocessorLexer.<init>));BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(java.lang.String,int)> $r5 = r0.literals,r0 (CharScanner.testLiteralsTable));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i2 = $r6.guessing,$r6 (ANTLRParser.tree));true;-1;true;true;242;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z0 = r1.hasASynPred,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.hasASynPred = varReplacer2175,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (MakeGrammar.defineRuleName));true;-1;true;true;247;false;true;8;false
BackwardQuery: (<antlr.RuleEndElement: void <init>(antlr.Grammar)> $i0 = r1.maxk,r1 (RuleEndElement.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));true;-1;true;true;607;false;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mCARET));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;745;false;true;197;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.vector = r1,r0 (VectorEnumerator.<init>));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $r4 = r0.vector,r0 (VectorEnumerator.nextElement));true;21;false;true;209;false;true;0;false
BackwardQuery: (<antlr.AlternativeElement: int getAutoGenType()> $i0 = r0.autoGenType,r0 (AlternativeElement.getAutoGenType));BackwardQuery: (<antlr.CharRangeElement: void <init>(antlr.LexerGrammar,antlr.Token,antlr.Token,int)> r0.autoGenType = i0,r0 (CharRangeElement.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;738;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i3 = $r10.guessing,$r10 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i15 = $r50.guessing,$r50 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;239;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;729;false;true;162;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r77 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i9 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;6;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.hasError = varReplacer1909,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void error(java.lang.String)> r0.hasError = varReplacer1900,r0 (Tool.error));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.lastRuleRef = varReplacer2400,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r14 = r0.lastRuleRef,r0 (MakeGrammar.refRule));true;-1;true;true;240;false;true;26;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i4 = $r11.guessing,$r11 (ANTLRParser.alternative));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;244;false;true;7;false
BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $i0 = r0.numToConsume,r0 (InputBuffer.syncConsume));BackwardQuery: (<antlr.InputBuffer: void consume()> r0.numToConsume = $i1,r0 (InputBuffer.consume));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionHandler));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $r4 = r0.behavior,r0 (ANTLRParser.parserOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;429;false;true;222;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;830;false;true;156;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r24 = r0.inputState,r0 (ANTLRParser.terminal));true;500;false;true;212;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i2 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i0 = $r3.guessing,$r3 (ANTLRParser.throwsSpec));true;-1;true;true;247;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i2 = $r2.guessing,$r2 (ANTLRParser.id));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;316;false;true;892;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refStringLiteral));true;-1;true;true;250;false;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i19 = $r31.guessing,$r31 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;269;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r109 = $r108.exportVocab,$r108 (DefineGrammarSymbols.endOptions));true;-1;true;true;482;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r32 = r0.ruleName,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));false;0;false;true;-1;true;true;12;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i2 = $r2.guessing,$r2 (ANTLRParser.exceptionSpec));true;-1;true;true;250;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r42 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r72 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;230;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i2 = $r5.guessing,$r5 (ANTLRParser.grammar));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;228;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i30 = $r52.guessing,$r52 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;224;false;true;427;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r47 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;267;false;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.length = $i1,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: int height()> $i0 = r0.length,r0 (LList.height));true;-1;true;true;477;false;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r6 = r0.bits,r0 (BitSet.orInPlace));false;0;false;true;208;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i8,r0 (Tool.processArguments));true;26;false;true;222;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r19 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;250;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;314;false;true;955;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;732;false;true;791;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;340;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.language = varReplacer1588,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r75 = r0.language,r0 (DefineGrammarSymbols.setFileOption));true;-1;true;true;227;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.generateAmbigWarnings = $z3,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammars = $r4,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r5 = r0.grammars,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;227;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $i2 = r0.mismatchType,r0 (MismatchedTokenException.getMessage));BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.mismatchType = $b3,r0 (MismatchedTokenException.<init>));false;1;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r32 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;237;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r98 = $r97.importVocab,$r97 (DefineGrammarSymbols.endOptions));false;0;false;true;476;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i0 = $r3.guessing,$r3 (ANTLRParser.throwsSpec));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setInitAction(java.lang.String)> r0.initAction = r1,r0 (AlternativeBlock.setInitAction));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.initAction = varReplacer2239,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r25 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;242;false;true;25;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r63 = $r62.exportVocab,$r62 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;572;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i26 = $r36.guessing,$r36 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;229;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i11 = $r39.guessing,$r39 (ANTLRParser.rule));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $r3 = r0.behavior,r0 (ANTLRParser.alternative));true;675;false;true;391;false;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (TokenBuffer.syncConsume));true;-1;true;true;682;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i3 = $r7.guessing,$r7 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;317;false;true;115;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r38 = r0.grammar,r0 (MakeGrammar.defineRuleName));true;-1;true;true;244;false;true;31;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;748;false;true;307;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r32 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;240;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2559,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2589,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.filterRule = varReplacer2443,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.filterRule = r3,r0 (LexerGrammar.setOption));true;-1;true;true;470;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refElementOption(antlr.Token,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.refElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;315;false;true;727;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r29 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;264;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: int size()> $i0 = r0.lastElement,r0 (Vector.size));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionSpecNoLabel));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17.preambleAction = $r16,$r17 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.preambleAction = $r4,r0 (Grammar.<init>));true;-1;true;true;343;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ignoreRule = varReplacer2287,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.RuleBlock: java.lang.String getIgnoreRule()> $r1 = r0.ignoreRule,r0 (RuleBlock.getIgnoreRule));true;-1;true;true;395;false;true;14;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $r4 = r0.vocabulary,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.vocabulary = $r4,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i12 = $r30.guessing,$r30 (ANTLRParser.range));true;-1;true;true;286;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i2 = r0.lastElement,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.testLiterals = varReplacer2675,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.testLiterals = varReplacer2442,r0 (LexerGrammar.<init>));true;-1;true;true;503;false;true;19;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i1 = $r1.guessing,$r1 (ANTLRParser.id));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;261;false;true;522;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i2 = r0.nbrEntries,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (TokenQueue.removeFirst));true;-1;true;true;893;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;317;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i2 = $r2.guessing,$r2 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;326;false;true;81;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;282;false;true;661;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i10 = $r29.guessing,$r29 (ANTLRParser.lexerSpec));true;-1;true;true;320;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $r4 = r1.label,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.label = $r4,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;268;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.ASTNodeType = varReplacer2151,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.GrammarAtom: void setASTNodeType(java.lang.String)> r0.ASTNodeType = r1,r0 (GrammarAtom.setASTNodeType));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: antlr.collections.impl.Vector getAlternatives()> $r1 = r0.alternatives,r0 (AlternativeBlock.getAlternatives));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r37 = r0.inputState,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;481;false;true;213;false;true;114;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r6 = $r5.tokenManager,$r5 (DefineGrammarSymbols.defineToken));true;-1;true;true;470;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i9 = $r34.guessing,$r34 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;243;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.alreadyExpanded = varReplacer1708,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $z0 = r0.alreadyExpanded,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $r1 = r0.inputState,r0 (ANTLRParser.ast_type_spec));true;509;false;true;220;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i28 = $r44.guessing,$r44 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> $r6 = $r4.tokenManager,$r4 (TokenRefElement.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.collections.impl.LLCell: void <init>(java.lang.Object)> r0.data = r1,r0 (LLCell.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r1 = $r3.data,$r3 (LList.deleteHead));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r15 = r2.blockEnd,r2 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r7 = r0.behavior,r0 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;500;false;true;263;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;353;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mOR));true;-1;true;true;734;false;true;1;false
BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.args = varReplacer2172,r0 (RuleRefElement.<init>));BackwardQuery: (<antlr.RuleRefElement: void setArgs(java.lang.String)> r0.args = r1,r0 (RuleRefElement.setArgs));true;-1;true;true;642;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.terminal));true;-1;true;true;332;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r13 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;315;false;true;32;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;747;false;true;83;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r34 = r0.inputState,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;575;false;true;313;false;true;19;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r22 = r0.antlrTool,r0 (LexerGrammar.setOption));true;-1;true;true;584;false;true;3;false
BackwardQuery: (<antlr.ANTLRStringBuffer: char[] getBuffer()> $r1 = r0.buffer,r0 (ANTLRStringBuffer.getBuffer));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r60 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;739;false;true;278;false;true;60;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.buildAST = varReplacer2396,r0 (Grammar.<init>));BackwardQuery: (<antlr.TreeWalkerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.buildAST = varReplacer2627,r0 (TreeWalkerGrammar.setOption));true;-1;true;true;473;false;true;2;false
BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r1 = r0.block,r0 (BlockContext.currentAlt));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $r6 = r0.behavior,r0 (ANTLRParser.exceptionGroup));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;442;false;true;219;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r16 = $r15.block,$r15 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r45 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;251;false;true;1;false
BackwardQuery: (<antlr.Grammar: int getIntegerOption(java.lang.String)> $r3 = r0.options,r0 (Grammar.getIntegerOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.options = $r7,r0 (Grammar.<init>));true;-1;true;true;619;false;true;337;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r20 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;423;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.charVocabulary = $r4,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.CharRangeElement: void <init>(antlr.LexerGrammar,antlr.Token,antlr.Token,int)> $r8 = r1.charVocabulary,r1 (CharRangeElement.<init>));true;-1;true;true;408;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i1 = $r2.guessing,$r2 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;244;false;true;2;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $r1 = r0.queue,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.queue = $r2,r0 (TokenBuffer.<init>));true;-1;true;true;447;false;true;321;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r147 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;243;false;true;11;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r10 = r0.grammar,r0 (MakeGrammar.endExceptionSpec));true;-1;true;true;239;false;true;26;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i1 = $r1.guessing,$r1 (ANTLRParser.setBlockElement));true;-1;true;true;241;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.lastRuleRef = varReplacer2400,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r7 = r0.lastRuleRef,r0 (MakeGrammar.refRule));true;-1;true;true;278;false;true;26;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mDIGIT));true;-1;true;true;730;false;true;1;false
BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $r3 = r0.block,r0 (TreeBlockContext.addAlternativeElement));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;47;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i6 = $r3.guessing,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;329;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;316;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDocBook = varReplacer1885,r0 (Tool.processArguments));BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z2 = r0.genDocBook,r0 (Tool.getLanguage));true;-1;true;true;219;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: int size()> $i0 = r0.lastElement,r0 (Vector.size));BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> r0.lastElement = i0,r0 (Vector.setElementAt));true;-1;true;true;-1;true;true;95;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i3 = r0.offset,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.offset = varReplacer3588,r0 (TokenQueue.expand));true;-1;true;true;739;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;272;false;true;345;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;3;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i11 = $r28.guessing,$r28 (ANTLRParser.ebnf));true;-1;true;true;317;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10.comment = r4,$r10 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r6.comment = r4,r6 (DefineGrammarSymbols.startLexer));true;-1;true;true;348;false;false;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r124 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;227;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void consume()> $i1 = $r1.guessing,$r1 (CharScanner.consume));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.guessing = varReplacer1621,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.offset = $i3,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void expand()> r0.offset = varReplacer2943,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;224;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r68 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));true;514;false;true;304;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r7 = r1.bits,r1 (BitSet.orInPlace));true;-1;true;true;216;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r13 = r0.grammar,r0 (MakeGrammar.refReturnAction));false;0;false;true;240;false;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> $r4 = r0.text,r0 (ANTLRTokdefLexer.mSL_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;784;false;true;120;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i6 = $r10.guessing,$r10 (ANTLRParser.range));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i42 = $r68.guessing,$r68 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;245;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r8 = $r7.block,$r7 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;211;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r81 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r35 = r0.inputState,r0 (ANTLRParser.rule));true;704;false;true;278;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rootNode()> $i4 = $r6.guessing,$r6 (ANTLRParser.rootNode));true;-1;true;true;250;false;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;741;false;true;284;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i6 = $r10.guessing,$r10 (ANTLRParser.tokensSpec));true;-1;true;true;237;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setCharVocabulary(antlr.collections.impl.BitSet)> $r2 = r0.grammar,r0 (DefineGrammarSymbols.setCharVocabulary));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;938;false;true;256;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionSpecNoLabel));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r24 = $r23.tokenManager,$r23 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;479;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r4 = $r3.block,$r3 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setTokenSection(java.lang.String)> r0.tokenSection = r1,r0 (Grammar.setTokenSection));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r23 = r0.tokenSection,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r6 = $r5.block,$r5 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: void processArguments(java.lang.String[])> $r5 = r0.antlrTool,r0 (ParserGrammar.processArguments));true;-1;true;true;482;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> $r9 = r0.text,r0 (ANTLRLexer.mACTION));true;-1;true;true;747;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.Token: int getType()> $i0 = r0.type,r0 (Token.getType));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r15 = $r14.block,$r14 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2247,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $z0 = $r4.not,$r4 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;242;false;true;822;false
BackwardQuery: (<antlr.CharQueue: void append(char)> r0.nbrEntries = $i9,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r122 = $r121.exportVocab,$r121 (DefineGrammarSymbols.endOptions));true;-1;true;true;605;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;961;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));true;-1;true;true;348;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i1 = $r1.guessing,$r1 (ANTLRParser.ast_type_spec));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r16 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;238;false;true;8;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r3 = r0.alternatives,r0 (AlternativeBlock.prepareForAnalysis));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refElementOption(antlr.Token,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.refElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;242;false;true;276;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $r6 = r0.head,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;454;false;true;692;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i5 = $r9.guessing,$r9 (ANTLRParser.terminal));true;-1;true;true;236;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r24 = $r23.block,$r23 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r30 = r0.antlrTool,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));true;29;false;true;215;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r8.altNum = varReplacer2252,$r8 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i1 = $r3.altNum,$r3 (MakeGrammar.endAlt));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.GrammarElement: int getLine()> $i0 = r0.line,r0 (GrammarElement.getLine));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String,int,boolean)> r0.line = i0,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r6 = r0.grammar,r0 (MakeGrammar.synPred));true;-1;true;true;239;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i1 = $r4.guessing,$r4 (ANTLRParser.qualifiedID));true;-1;true;true;242;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.notTerminal));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r42 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;229;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.analyzerDebug = varReplacer2715,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.analyzerDebug = varReplacer2386,r0 (Grammar.<init>));true;-1;true;true;483;false;true;75;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $r3 = r1.initAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.initAction = varReplacer2181,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;244;false;true;3;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i1 = $r1.guessing,$r1 (ANTLRParser.optionValue));true;-1;true;true;252;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitiveLiterals = varReplacer2641,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitiveLiterals = varReplacer2441,r0 (LexerGrammar.<init>));true;-1;true;true;571;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r108 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;241;false;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;637;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharStreamIOException: void <init>(java.io.IOException)> r0.io = r1,r0 (CharStreamIOException.<init>));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r14 = $r13.io,$r13 (ANTLRLexer.nextToken));false;3;false;true;215;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> $r4 = r0.text,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;754;false;true;220;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (MakeGrammar.defineRuleName));false;0;false;true;244;false;true;5;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i0 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i8,r0 (Tool.processArguments));true;65;false;true;353;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r10 = $r9.importVocab,$r9 (DefineGrammarSymbols.endOptions));false;0;false;true;595;false;true;0;false
BackwardQuery: (<antlr.RecognitionException: int getColumn()> $i0 = r0.column,r0 (RecognitionException.getColumn));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String,java.lang.String,int,int)> r0.column = i1,r0 (RecognitionException.<init>));false;5;false;true;212;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;803;false;true;93;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>(int)> r0.elements = $r1,r0 (IndexedVector.<init>));BackwardQuery: (<antlr.collections.impl.IndexedVector: int size()> $r1 = r0.elements,r0 (IndexedVector.size));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> r0.nMarkers = $i1,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.nMarkers = $i2,r0 (TokenBuffer.rewind));true;-1;true;true;758;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r20 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;249;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i9 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;3;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r152 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;233;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void beginAlt(boolean)> $r4 = $r3.block,$r3 (MakeGrammar.beginAlt));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r83 = $r82.importVocab,$r82 (DefineGrammarSymbols.endOptions));true;-1;true;true;606;false;true;7;false
BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r21 = r0.ruleName,r0 (RuleBlock.addExceptionSpec));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));false;0;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i1 = $r2.guessing,$r2 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;240;false;true;91;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;230;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r5 = r2.block,r2 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void setFilename(java.lang.String)> r0.fileName = r1,r0 (Grammar.setFilename));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.fileName = varReplacer2399,r0 (Grammar.<init>));true;-1;true;true;355;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> $r11 = r0.atomText,r0 (TokenRefElement.<init>));false;73;false;true;218;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;247;false;true;7;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;748;false;true;125;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r68 = $r66.exportVocab,$r66 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;483;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r26 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;793;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i1 = $r2.guessing,$r2 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;247;false;true;1;false
BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $r4 = r0.inputState,r0 (CharScanner.makeToken));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;745;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r147 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i2 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i15 = $r50.guessing,$r50 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r5 = $r4.block,$r4 (MakeGrammar.endChildList));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.expecting = i0,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $i6 = r0.expecting,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refStringLiteral));false;0;false;true;238;false;true;5;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r13 = $r12.tokenManager,$r12 (DefineGrammarSymbols._refToken));true;-1;true;true;470;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r78 = $r77.exportVocab,$r77 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;485;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r79 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;224;false;true;25;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r34 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));false;764;false;true;230;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r10 = r0.grammar,r0 (AlternativeBlock.removeTrackingOfRuleRefs));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r2 = r1.block,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> $r6 = r0.text,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;727;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r2 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;239;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> $r7 = r0.text,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;766;false;true;928;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;247;false;true;525;false
BackwardQuery: (<antlr.MakeGrammar: void setSubruleOption(antlr.Token,antlr.Token)> $r4 = $r3.block,$r3 (MakeGrammar.setSubruleOption));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.subruleOptionsSpec));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $i2 = r0.nbrEntries,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (CharQueue.removeFirst));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r0.nested = $i1,r0 (MakeGrammar.endSubRule));true;-1;true;true;245;false;true;11;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z4 = r1.greedy,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2590,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharLiteral));false;0;false;true;268;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $r4 = r0.behavior,r0 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;448;false;true;222;false;true;15;false
BackwardQuery: (<antlr.preprocessor.Rule: void setEnclosingGrammar(antlr.preprocessor.Grammar)> r0.enclosingGrammar = r1,r0 (Rule.setEnclosingGrammar));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r41 = r3.enclosingGrammar,r3 (Grammar.toString));false;39;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;316;false;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r7 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;285;false;true;341;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;249;false;true;621;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $r3 = r0.behavior,r0 (ANTLRParser.elementOptionSpec));true;447;false;true;211;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r35 = r0.tool,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i10 = $r24.guessing,$r24 (ANTLRParser.terminal));true;-1;true;true;241;false;true;3;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $i3 = $r1.nbrEntries,$r1 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (TokenQueue.removeFirst));true;-1;true;true;732;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i4 = $r11.guessing,$r11 (ANTLRParser.alternative));true;-1;true;true;241;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $r3 = r0.behavior,r0 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;440;false;true;212;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammars = $r4,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r15 = r0.grammars,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $r13 = r0.inputState,r0 (ANTLRParser.notTerminal));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;487;false;true;212;false;true;129;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;243;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setCharVocabulary(antlr.collections.impl.BitSet)> $r2 = r0.grammar,r0 (DefineGrammarSymbols.setCharVocabulary));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;248;false;true;555;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.f = $r1,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: int doEverything(java.lang.String[])> r0.f = $r11,r0 (Tool.doEverything));true;-1;true;true;357;false;true;0;false
BackwardQuery: (<antlr.CharRangeElement: void setLabel(java.lang.String)> r0.label = r1,r0 (CharRangeElement.setLabel));BackwardQuery: (<antlr.CharRangeElement: java.lang.String getLabel()> $r1 = r0.label,r0 (CharRangeElement.getLabel));true;-1;true;true;-1;true;true;70;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i2 = $r2.guessing,$r2 (ANTLRParser.exceptionSpec));true;-1;true;true;276;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;998;false;true;180;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r63 = $r62.exportVocab,$r62 (DefineGrammarSymbols.endOptions));true;-1;true;true;563;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;311;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ParserGrammar: void processArguments(java.lang.String[])> $r7 = r0.antlrTool,r0 (ParserGrammar.processArguments));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;568;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i0 = $r1.guessing,$r1 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;308;false;true;35;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r4.column = $i4,$r4 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void newline()> $r2.column = varReplacer2937,$r2 (CharScanner.newline));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;756;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r4 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;245;false;true;14;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.hasError = varReplacer1909,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void error(java.lang.String,java.lang.String,int,int)> r0.hasError = varReplacer2129,r0 (Tool.error));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r2 = $r1.blockEnd,$r1 (MakeGrammar.endAlt));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numTreeParsers = varReplacer1591,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $i1 = r0.numTreeParsers,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;227;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13 = $r12.blockEnd,$r12 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i1 = $r1.guessing,$r1 (ANTLRParser.id));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;264;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13 = $r12.blockEnd,$r12 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i0 = $r1.guessing,$r1 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;249;false;true;86;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r4 = $r3.tokenManager,$r3 (DefineGrammarSymbols.defineToken));true;-1;true;true;478;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;248;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;246;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void <init>(antlr.LexerSharedInputState)> r0.caseSensitiveLiterals = varReplacer1625,r0 (ANTLRLexer.<init>));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitiveLiterals = varReplacer1668,r0 (CharScanner.<init>));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setMemberAction(java.lang.String)> r0.memberAction = r1,r0 (Grammar.setMemberAction));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r53 = r1.memberAction,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i0 = $r1.guessing,$r1 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;225;false;true;275;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;250;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r22 = $r21.block,$r21 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r16 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;243;false;true;721;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;243;false;true;770;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;246;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r4 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;248;false;true;7;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.symbols = $r6,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: antlr.GrammarSymbol getSymbol(java.lang.String)> $r2 = r0.symbols,r0 (Grammar.getSymbol));true;-1;true;true;363;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r6 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;242;false;true;734;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r5 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;430;false;true;15;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.line = $i0,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $i0 = r1.line,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRHashString: void setString(java.lang.String)> r0.buf = varReplacer1660,r0 (ANTLRHashString.setString));BackwardQuery: (<antlr.ANTLRHashString: char charAt(int)> $r2 = r0.buf,r0 (ANTLRHashString.charAt));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;245;false;true;4;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $i7 = r0.nargs,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;27;false;true;229;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;742;false;true;200;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i3 = $r2.guessing,$r2 (ANTLRParser.classDef));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r46 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;237;false;true;3;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: void processArguments(java.lang.String[])> $r5 = r0.antlrTool,r0 (LexerGrammar.processArguments));true;-1;true;true;469;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.LA));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;857;false;true;268;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r16 = $r15.importVocab,$r15 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));true;-1;true;true;459;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r17 = r0.behavior,r0 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;508;false;true;233;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z2 = r1.warnWhenFollowAmbig,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.warnWhenFollowAmbig = varReplacer2182,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r144 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r2 = $r1.blockEnd,$r1 (MakeGrammar.endAlt));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refElementOption(antlr.Token,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.refElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;284;false;true;275;false
BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z0 = r0.genDiagnostics,r0 (Tool.getLanguage));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDiagnostics = varReplacer1888,r0 (Tool.processArguments));false;0;false;true;215;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i6 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.mismatchType = $b3,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.superGrammar = r3,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: antlr.preprocessor.Grammar getSuperGrammar()> $r3 = r0.superGrammar,r0 (Grammar.getSuperGrammar));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r14,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));true;-1;true;true;248;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r33 = $r32.exportVocab,$r32 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));false;0;false;true;481;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;784;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i3 = $r7.guessing,$r7 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;271;false;true;21;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $i0 = r1.line,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;23;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setMemberAction(java.lang.String)> r0.memberAction = r1,r0 (Grammar.setMemberAction));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r49 = r0.memberAction,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r48 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r4 = r0.inputState,r0 (ANTLRParser.rule));true;501;false;true;213;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;744;false;true;1;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;664;false;true;296;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i1 = $r1.guessing,$r1 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = $r4,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r40 = r0.tokenText,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i1 = $r3.guessing,$r3 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;243;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r8 = $r7.block,$r7 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.testLiterals = varReplacer2288,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.testLiterals = varReplacer2574,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i5 = $r14.guessing,$r14 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;239;false;true;134;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $r3 = r0.inputState,r0 (ANTLRParser.treeParserSpec));true;471;false;true;220;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r3 = r0.blocks,r0 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));true;-1;true;true;298;false;true;15;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r6 = $r5.block,$r5 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r19 = r0.ruleBlock,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;251;false;true;54;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i1 = $r2.guessing,$r2 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;230;false;true;179;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r38 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;228;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rootNode()> $r6 = r0.inputState,r0 (ANTLRParser.rootNode));true;489;false;true;221;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.defaultErrorHandler = varReplacer2551,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.RuleBlock: void setDefaultErrorHandler(boolean)> r0.defaultErrorHandler = z0,r0 (RuleBlock.setDefaultErrorHandler));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r5 = r0.inputState,r0 (ANTLRParser.parserSpec));true;469;false;true;215;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r20 = r0.tool,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;227;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;274;false;true;2;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $r2 = r0.args,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.args = $r2,r0 (Tool.processArguments));true;25;false;true;212;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r98 = $r97.importVocab,$r97 (DefineGrammarSymbols.endOptions));true;-1;true;true;414;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;983;false;true;330;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i4 = r0.lastElement,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r30 = r0.behavior,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;443;false;true;212;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i11 = $r28.guessing,$r28 (ANTLRParser.ebnf));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r4 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i3 = $r7.guessing,$r7 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $r5 = r0.inputState,r0 (ANTLRParser.treeParserSpec));true;476;false;true;218;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;335;false;true;342;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2556,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: java.lang.String toString()> $i0 = r0.length,r0 (ANTLRStringBuffer.toString));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;736;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserGrammar: void processArguments(java.lang.String[])> r0.traceRules = varReplacer2412,r0 (ParserGrammar.processArguments));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.traceRules = varReplacer2398,r0 (Grammar.<init>));true;-1;true;true;479;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2242,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $z0 = $r2.not,$r2 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.CharScanner: void setTokenObjectClass(java.lang.String)> r0.tokenObjectClass = $r3,r0 (CharScanner.setTokenObjectClass));BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $r15 = r0.tokenObjectClass,r0 (CharScanner.makeToken));true;-1;true;true;767;false;true;1;false
BackwardQuery: (<antlr.LexerGrammar: void processArguments(java.lang.String[])> $r7 = r0.antlrTool,r0 (LexerGrammar.processArguments));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;494;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void consume()> $i0 = r0.numToConsume,r0 (InputBuffer.consume));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> r0.numToConsume = $i3,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2556,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2589,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = varReplacer1574,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r9 = r0.tokenText,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r6 = r0.antlrTool,r0 (Grammar.setOption));true;-1;true;true;541;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> r0.lastElement = $i5,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r116 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;246;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;316;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;246;false;true;260;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.antlrTool = r1,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: void readGrammarFile(java.lang.String)> $r11 = r0.antlrTool,r0 (Hierarchy.readGrammarFile));true;-1;true;true;208;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i28 = $r44.guessing,$r44 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.antlrTool = r1,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r42 = r0.antlrTool,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z0 = r1.hasASynPred,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.hasASynPred = varReplacer2245,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r12 = r0.atomText,r0 (StringLiteralElement.<init>));true;116;false;true;243;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i1 = $r1.guessing,$r1 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;276;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z5 = r1.greedySet,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedySet = varReplacer2243,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.offset = $i3,r0 (TokenQueue.removeFirst));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.offset = varReplacer3588,r0 (TokenQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;823;false;true;137;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r21 = r0.tool,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;305;false;true;39;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mBANG));true;-1;true;true;892;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i0 = $r3.guessing,$r3 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;276;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.labeledElements = $r3,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r11 = $r10.labeledElements,$r10 (MakeGrammar.labelElement));true;-1;true;true;415;false;true;31;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mNESTED_ACTION));true;-1;true;true;866;false;true;1;false
BackwardQuery: (<antlr.TokenRangeElement: java.lang.String getLabel()> $r1 = r0.label,r0 (TokenRangeElement.getLabel));BackwardQuery: (<antlr.TokenRangeElement: void setLabel(java.lang.String)> r0.label = r1,r0 (TokenRangeElement.setLabel));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i10 = $r35.guessing,$r35 (ANTLRParser.rule));true;-1;true;true;304;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.BlockEndElement: void <init>(antlr.Grammar)> $i0 = r1.maxk,r1 (BlockEndElement.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));true;-1;true;true;683;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i6 = $r10.guessing,$r10 (ANTLRParser.tokensSpec));true;-1;true;true;253;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>()> r0.elements = $r1,r0 (IndexedVector.<init>));BackwardQuery: (<antlr.collections.impl.IndexedVector: java.util.Enumeration elements()> $r1 = r0.elements,r0 (IndexedVector.elements));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r7 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;316;false;true;320;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r7 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;279;false;true;11;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;286;false;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;821;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> $r7 = r0.text,r0 (ANTLRLexer.mACTION));true;-1;true;true;814;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i6 = $r3.guessing,$r3 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;280;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r7 = $r6.block,$r6 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;317;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r5 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;288;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i10 = $r35.guessing,$r35 (ANTLRParser.rule));true;-1;true;true;295;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r17 = $r16.block,$r16 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;771;false;true;165;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r2 = r0.alternatives,r0 (AlternativeBlock.prepareForAnalysis));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.labeledElements = $r3,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r6 = $r5.labeledElements,$r5 (MakeGrammar.labelElement));true;-1;true;true;354;false;true;13;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r77 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;385;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setSubruleOption(antlr.Token,antlr.Token)> $r4 = $r3.block,$r3 (MakeGrammar.setSubruleOption));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r48 = r0.options,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.options = r3,r0 (Rule.<init>));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r12 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;258;false;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;746;false;true;123;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> $r2 = r0.options,r0 (Grammar.addOption));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r88 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: void removeFirst()> $i4 = r0.nbrEntries,r0 (CharQueue.removeFirst));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r11 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;331;false;true;830;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i0 = r0.nargs,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i6,r0 (Tool.processArguments));true;28;false;true;378;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r21 = r0.grammar,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;389;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r29 = r3.enclosingGrammar,r3 (Grammar.toString));BackwardQuery: (<antlr.preprocessor.Rule: void setEnclosingGrammar(antlr.preprocessor.Grammar)> r0.enclosingGrammar = r1,r0 (Rule.setEnclosingGrammar));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r8 = r1.bits,r1 (BitSet.orInPlace));true;-1;true;true;278;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;321;false;true;467;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r4 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;393;false;true;15;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: void setBuffer(char[],int)> r0.s = varReplacer3199,r0 (ANTLRHashString.setBuffer));BackwardQuery: (<antlr.ANTLRHashString: char charAt(int)> $r1 = r0.s,r0 (ANTLRHashString.charAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ExceptionSpec: void addHandler(antlr.ExceptionHandler)> $r2 = r0.handlers,r0 (ExceptionSpec.addHandler));BackwardQuery: (<antlr.ExceptionSpec: void <init>(antlr.Token)> r0.handlers = $r2,r0 (ExceptionSpec.<init>));true;-1;true;true;373;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r3 = r0.grammar,r0 (MakeGrammar.endChildList));true;-1;true;true;255;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitiveLiterals = varReplacer1668,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void <init>(antlr.LexerSharedInputState)> r0.caseSensitiveLiterals = varReplacer2358,r0 (ANTLRTokdefLexer.<init>));true;-1;true;true;232;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.LA));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (TokenBuffer.syncConsume));true;-1;true;true;998;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i2 = $r5.guessing,$r5 (ANTLRParser.grammar));true;-1;true;true;373;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r36 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;311;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r7 = r1.bits,r1 (BitSet.orInPlace));false;0;false;false;276;false;true;13;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r121 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;315;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> $r4 = r0.text,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;740;false;true;120;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r14,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;240;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleEnd = varReplacer2401,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r18 = r0.ruleEnd,r0 (MakeGrammar.defineRuleName));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: java.lang.String getFilename()> $r1 = r0.inputState,r0 (Parser.getFilename));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;-1;true;true;208;false;true;65;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r124 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));false;0;false;true;236;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;894;false;true;239;false;true;50;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i15 = $r9.guessing,$r9 (ANTLRParser.classDef));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammars = $r24,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r24 = r0.grammars,r0 (Tool.preprocess));true;24;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.initAction = $r3,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setInitAction(java.lang.String)> r0.initAction = r1,r0 (AlternativeBlock.setInitAction));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> $r10 = r0.antlrTool,r0 (ParserGrammar.setOption));true;-1;true;true;504;false;true;2;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = varReplacer1857,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;25;false;true;225;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(java.lang.String,antlr.preprocessor.Grammar)> r0.memberAction = r1,r0 (Grammar.inherit));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r24 = r0.memberAction,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r12.namespaceAntlr = $r13,$r12 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.Tool: void <init>()> r0.namespaceAntlr = varReplacer1904,r0 (Tool.<init>));true;-1;true;true;437;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;345;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r4 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;501;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r3.altNum = $i2,$r3 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r8.altNum = varReplacer2254,$r8 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.BlockEndElement: void <init>(antlr.Grammar)> $i0 = r1.maxk,r1 (BlockEndElement.<init>));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));true;-1;true;true;349;false;true;704;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r50 = $r48.antlrTool,$r48 (RuleBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;303;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;312;false;true;782;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;732;false;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i4 = r0.lastElement,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i42 = $r68.guessing,$r68 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;314;false;true;297;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;688;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i2 = $r3.guessing,$r3 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;318;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i3 = $r2.guessing,$r2 (ANTLRParser.lexerSpec));true;-1;true;true;281;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $r5 = r0.inputState,r0 (ANTLRParser.exceptionGroup));true;526;false;true;250;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> r0.lastElement = $i5,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2598,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedySet = varReplacer2243,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r8 = $r7.exportVocab,$r7 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));true;-1;true;true;464;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;277;false;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;273;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r3 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;274;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: boolean getCaseSensitiveLiterals()> $z0 = r0.caseSensitiveLiterals,r0 (CharScanner.getCaseSensitiveLiterals));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitiveLiterals = varReplacer1668,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;462;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i0 = $r3.guessing,$r3 (ANTLRParser.qualifiedID));true;-1;true;true;315;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.antlrTool = r3,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void reportError(antlr.RecognitionException,java.lang.String)> $r3 = r0.antlrTool,r0 (ANTLRParser.reportError));true;466;false;true;214;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;365;false;true;517;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r116 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.tail = varReplacer1585,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $r5 = r0.tail,r0 (LList.insertHead));true;-1;true;true;353;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r28 = r0.inputState,r0 (ANTLRParser.parserSpec));true;503;false;true;231;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i4 = $r6.guessing,$r6 (ANTLRParser.grammar));true;-1;true;true;292;false;true;0;false
BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r8 = r2.exceptionSpec,r2 (LLkAnalyzer.subruleCanBeInverted));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r8.exceptionSpec = $r9,$r8 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r46 = $r45.exportVocab,$r45 (DefineGrammarSymbols.endOptions));true;-1;true;true;519;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginAlt(boolean)> $r4 = $r3.block,$r3 (MakeGrammar.beginAlt));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;911;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r13 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;280;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;824;false;true;344;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r6 = $r5.block,$r5 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r9 = r0.blocks,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;302;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;324;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;267;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r3 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));true;-1;true;true;257;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i1 = r0.expecting,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.expecting = c1,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;762;false;true;177;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r2 = r0.data,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r4 = r0.options,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.options = $r7,r0 (Grammar.<init>));true;-1;true;true;519;false;true;81;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void setFilename(java.lang.String)> r0.fileName = r1,r0 (Grammar.setFilename));BackwardQuery: (<antlr.Grammar: java.lang.String getFilename()> $r1 = r0.fileName,r0 (Grammar.getFilename));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r20 = r0.tool,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;241;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r90 = $r87.importVocab,$r87 (DefineGrammarSymbols.endOptions));false;0;false;true;506;false;true;0;false
BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String)> r0.column = varReplacer2258,r0 (RecognitionException.<init>));BackwardQuery: (<antlr.RecognitionException: int getColumn()> $i0 = r0.column,r0 (RecognitionException.getColumn));false;3;false;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i10 = $r28.guessing,$r28 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;257;false;true;0;false
BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> $r14 = r0.grammar,r0 (TokenRefElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));false;0;false;true;224;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r11 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;257;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r46 = $r45.exportVocab,$r45 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;780;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r26 = $r24.tokenManager,$r24 (RuleBlock.setOption));BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.CharScanner: java.lang.String getFilename()> $r2 = $r1.filename,$r1 (CharScanner.getFilename));BackwardQuery: (<antlr.CharScanner: void setFilename(java.lang.String)> $r2.filename = r1,$r2 (CharScanner.setFilename));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;259;false;true;899;false
BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r53 = r0.tokenText,r0 (MismatchedTokenException.getMessage));BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = $r4,r0 (MismatchedTokenException.<init>));false;1;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;267;false;true;12;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r16 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;322;false;true;744;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r5 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;286;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r3 = r0.inputState,r0 (ANTLRParser.parserSpec));true;550;false;true;224;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r2 = r0.grammarFileName,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammarFileName = $r6,r0 (Tool.processArguments));true;25;false;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r2.column = varReplacer2937,$r2 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1.column = i0,$r1 (CharScanner.setColumn));true;-1;true;true;-1;true;true;258;false
BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r26 = r0.antlrTool,r0 (Tool.processArguments));true;28;false;true;280;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;252;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r25 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;257;false;true;3;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;256;false;true;26;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r0.nested = $i1,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;260;false;true;923;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));true;-1;true;true;236;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r3 = $r2.block,$r2 (MakeGrammar.setUserExceptions));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r14 = $r11.importVocab,$r11 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;501;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r53 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.tokenStartLine = varReplacer1620,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: void resetText()> $r5.tokenStartLine = $i1,$r5 (CharScanner.resetText));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refWildcard(antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (MakeGrammar.refWildcard));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;249;false;true;383;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i1 = $r1.guessing,$r1 (ANTLRParser.setBlockElement));true;-1;true;true;258;false;true;4;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> r0.maxToken = $i3,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> $i0 = r0.maxToken,r0 (SimpleTokenManager.nextTokenType));false;12;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.column = varReplacer2170,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.GrammarElement: int getColumn()> $i0 = r0.column,r0 (GrammarElement.getColumn));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i3 = $r2.guessing,$r2 (ANTLRParser.alternative));true;-1;true;true;265;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r157 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;285;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;264;false;true;286;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i5 = $r8.guessing,$r8 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;350;false;true;124;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r5 = $r4.block,$r4 (MakeGrammar.endChildList));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setMemberAction(java.lang.String)> r0.memberAction = r1,r0 (Grammar.setMemberAction));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r24 = r0.memberAction,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;780;false;true;-1;true
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r14 = r0.inputState,r0 (ANTLRParser.range));true;504;false;true;229;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;250;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r25 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;251;false;true;3;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.warnWhenFollowAmbig = varReplacer2236,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.warnWhenFollowAmbig = $z2,r0 (MakeGrammar.setBlock));true;-1;true;true;222;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i14 = $r37.guessing,$r37 (ANTLRParser.ebnf));true;-1;true;true;253;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(long[])> r0.bits = r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: int[] toArray()> $r2 = r0.bits,r0 (BitSet.toArray));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: antlr.BlockContext context()> $r2 = r0.blocks,r0 (MakeGrammar.context));true;-1;true;true;268;false;true;24;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r91 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;297;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.notTerminal));true;-1;true;true;253;false;true;3;false
BackwardQuery: (<antlr.CharQueue: void expand()> r0.buffer = r1,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r88 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;254;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void newline()> $r2 = r0.inputState,r0 (CharScanner.newline));true;-1;true;true;769;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2587,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.generateAmbigWarnings = varReplacer2178,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i3 = $r2.guessing,$r2 (ANTLRParser.lexerSpec));true;-1;true;true;254;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mRPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;917;false;true;277;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: boolean sameSignature(antlr.preprocessor.Rule)> $r4 = r0.args,r0 (Rule.sameSignature));BackwardQuery: (<antlr.preprocessor.Rule: void setArgs(java.lang.String)> r0.args = r1,r0 (Rule.setArgs));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r6 = $r5.tokenManager,$r5 (MakeGrammar.refTokensSpecElementOption));true;-1;true;true;502;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;258;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $i2 = r0.i,r0 (VectorEnumerator.nextElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.i = varReplacer2128,r0 (VectorEnumerator.<init>));true;23;false;true;229;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $r2 = r0.inputState,r0 (ANTLRParser.setBlockElement));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;493;false;true;232;false;true;14;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;256;false;true;11;false
BackwardQuery: (<antlr.Tool: void setNameSpace(java.lang.String)> $r2 = r0.nameSpace,r0 (Tool.setNameSpace));BackwardQuery: (<antlr.Tool: void <init>()> r0.nameSpace = varReplacer1907,r0 (Tool.<init>));true;-1;true;true;375;false;true;2;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r6 = r0.data,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refToken));true;-1;true;true;262;false;true;26;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));true;-1;true;true;263;false;true;26;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r7 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;259;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i19 = $r31.guessing,$r31 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;263;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarAtom: java.lang.String getLabel()> $r1 = r0.label,r0 (GrammarAtom.getLabel));BackwardQuery: (<antlr.GrammarAtom: void setLabel(java.lang.String)> r0.label = r1,r0 (GrammarAtom.setLabel));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r139 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;258;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;920;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i3 = $r3.guessing,$r3 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;263;false;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r24 = r0.antlrTool,r0 (Grammar.setOption));true;-1;true;true;494;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i0 = $r4.guessing,$r4 (ANTLRParser.lexerOptionsSpec));true;-1;true;true;257;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r29 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;247;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;244;false;true;743;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;727;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17.block = r1,$r17 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(int)> $r2 = r0.text,r0 (CharScanner.testLiteralsTable));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;849;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarAtom: int getType()> $i0 = r0.tokenType,r0 (GrammarAtom.getType));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.tokenType = varReplacer2150,r0 (GrammarAtom.<init>));true;233;false;true;393;false;true;0;false
BackwardQuery: (<antlr.NoViableAltForCharException: java.lang.String getMessage()> $c4 = r0.foundChar,r0 (NoViableAltForCharException.getMessage));BackwardQuery: (<antlr.NoViableAltForCharException: void <init>(char,java.lang.String,int,int)> r0.foundChar = c0,r0 (NoViableAltForCharException.<init>));false;1;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r6 = $r5.block,$r5 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17.block = r1,$r17 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r21 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;408;false;true;31;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r13 = $r12.exportVocab,$r12 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;498;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> $i0 = r1.maxk,r1 (RuleBlock.<init>));false;1;false;true;620;false;true;81;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r21 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;257;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i28 = $r44.guessing,$r44 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;250;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $r2 = r0.inputState,r0 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;501;false;true;226;false;true;31;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r7 = $r6.block,$r6 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $r4.next = r2,$r4 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r5 = $r4.next,$r4 (LList.deleteHead));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;176;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r1 = r0.block,r0 (BlockContext.currentAlt));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r11 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;246;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.exceptionSpec));true;-1;true;true;248;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = z0,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r17 = $r16.block,$r16 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;286;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i5 = $r14.guessing,$r14 (ANTLRParser.ebnf));true;-1;true;true;301;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r113 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));false;862;false;true;282;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r49 = $r48.exportVocab,$r48 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;752;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r47 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;532;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;389;false;true;486;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r18 = $r17.block,$r17 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.tokenStartColumn = varReplacer1619,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $i1 = $r3.tokenStartColumn,$r3 (CharScanner.makeToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r15 = r0.tool,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;247;false;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;825;false;true;520;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i1 = $r1.guessing,$r1 (ANTLRParser.alternative));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;334;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refHeaderAction(antlr.Token,antlr.Token)> $r7 = r0.tool,r0 (DefineGrammarSymbols.refHeaderAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;280;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2242,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $z0 = $r4.not,$r4 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;270;false;true;287;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> $r10 = $r9.tokenManager,$r9 (TokenRangeElement.<init>));BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.f = $r1,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: int doEverything(java.lang.String[])> $r13 = r0.f,r0 (Tool.doEverything));true;-1;true;true;261;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r31 = $r30.tokenManager,$r30 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));true;-1;true;true;497;false;true;28;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2602,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.warnWhenFollowAmbig = varReplacer2182,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $r3 = r0.args,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.args = $r2,r0 (Tool.processArguments));false;0;false;true;214;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r13 = r0.tool,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;247;false;true;587;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1.column = i0,$r1 (CharScanner.setColumn));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.column = varReplacer1623,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8 = r0.inputState,r0 (ANTLRParser.classDef));true;485;false;true;215;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i28 = $r40.guessing,$r40 (ANTLRParser.classDef));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r8 = $r7.block,$r7 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $r3 = r0.block,r0 (TreeBlockContext.addAlternativeElement));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i2 = $r2.guessing,$r2 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;261;false;true;64;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;246;false;true;53;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r6 = r0.bits,r0 (BitSet.orInPlace));true;-1;true;true;215;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r10 = r0.grammar,r0 (AlternativeBlock.removeTrackingOfRuleRefs));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r82 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;314;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i13 = $r8.guessing,$r8 (ANTLRParser.classDef));true;-1;true;true;271;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r55 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;290;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i1 = $r1.guessing,$r1 (ANTLRParser.setBlockElement));true;-1;true;true;229;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r148 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;247;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r6.preambleAction = $r13,r6 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17.preambleAction = $r16,$r17 (DefineGrammarSymbols.startParser));true;-1;true;true;355;false;false;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r3 = $r2.block,$r2 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r8 = $r7.exportVocab,$r7 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;473;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = varReplacer2176,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $r9 = r0.behavior,r0 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;449;false;true;238;false;true;87;false
BackwardQuery: (<antlr.CommonToken: int getLine()> $i0 = r0.line,r0 (CommonToken.getLine));BackwardQuery: (<antlr.CommonToken: void setLine(int)> r0.line = i0,r0 (CommonToken.setLine));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionSpecNoLabel));true;-1;true;true;370;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionGroup));true;-1;true;true;315;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;295;false;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r4.column = $i4,$r4 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1.column = i0,$r1 (CharScanner.setColumn));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i0 = $r2.guessing,$r2 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;243;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;260;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> $i2 = r0.markerOffset,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (TokenBuffer.syncConsume));true;-1;true;true;736;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r10 = r0.grammarFileName,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammarFileName = $r6,r0 (Tool.processArguments));true;25;false;true;211;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r11 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;267;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r91 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;267;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i1 = r2.type,r2 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r97 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r29 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refToken));true;-1;true;true;241;false;true;26;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r8 = r0.grammar,r0 (MakeGrammar.abortGrammar));true;-1;true;true;236;false;true;2;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r2 = r0.data,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.generateAmbigWarnings = varReplacer2237,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $i1 = r0.numParsers,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numParsers = varReplacer1589,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;227;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i1 = $r2.guessing,$r2 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;249;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r139 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;245;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r3 = r0.grammar,r0 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;245;false;true;576;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refTokenRange));true;-1;true;true;239;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;290;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r16 = r0.tool,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;223;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;729;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.warnWhenFollowAmbig = $z2,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2593,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.length = varReplacer1586,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.length = $i1,r0 (LList.deleteHead));true;-1;true;true;351;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mWS));true;-1;true;true;766;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.rules = r4,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void addRule(antlr.preprocessor.Rule)> $r2 = r0.rules,r0 (Grammar.addRule));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r32 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;243;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mRANGE));true;-1;true;true;744;false;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r60 = $r58.antlrTool,$r58 (RuleBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r11 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;243;false;true;3;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i37 = $r61.guessing,$r61 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;419;false;true;133;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i7 = r0.length,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r7 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;273;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i0 = r1.type,r1 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.exportVocab = $r39,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r13,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i36 = $r60.guessing,$r60 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;227;false;true;405;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;986;false;true;244;false;true;3;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r10 = $r9.importVocab,$r9 (DefineGrammarSymbols.endOptions));true;-1;true;true;349;false;true;0;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.input = r1,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: void consume()> $r3 = $r2.input,$r2 (CharScanner.consume));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r21 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;323;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r16 = r0.inputState,r0 (ANTLRParser.ebnf));true;580;false;true;225;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $r1 = r0.inputState,r0 (ANTLRParser.exceptionGroup));true;636;false;true;277;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: antlr.Token LT(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.LT));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (TokenBuffer.syncConsume));true;-1;true;true;701;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r112 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;292;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;909;false;true;434;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r2 = r0.blocks,r0 (MakeGrammar.endTree));true;-1;true;true;240;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> r0.lastElement = $i5,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $i0 = $r4.lastElement,$r4 (VectorEnumerator.hasMoreElements));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;238;false;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r47 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;238;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: java.lang.String toString()> $r2 = r0.buffer,r0 (ANTLRStringBuffer.toString));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.tool,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;229;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i7 = $r21.guessing,$r21 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;241;false;true;134;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammars = $r11,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r24 = r0.grammars,r0 (Tool.preprocess));true;24;false;true;211;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;245;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r62 = r0.grammar,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.offset = varReplacer1606,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $i1 = r0.offset,r0 (TokenQueue.elementAt));true;-1;true;true;471;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $r2 = r0.inputState,r0 (ANTLRParser.notTerminal));true;475;false;true;213;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void resetText()> $r4 = r0.inputState,r0 (CharScanner.resetText));true;-1;true;true;728;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rootNode()> $i4 = $r6.guessing,$r6 (ANTLRParser.rootNode));true;-1;true;true;237;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i7 = $r14.guessing,$r14 (ANTLRParser.range));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;224;false;true;534;false
BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r49 = r0.memberAction,r0 (Grammar.toString));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(java.lang.String,antlr.preprocessor.Grammar)> r0.memberAction = r1,r0 (Grammar.inherit));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8.hasASynPred = varReplacer2223,$r8 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.hasASynPred = varReplacer2175,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setPreambleAction(java.lang.String)> r0.preambleAction = r1,r0 (Grammar.setPreambleAction));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r70 = r0.preambleAction,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;740;false;true;164;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r40 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;251;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r24 = $r23.block,$r23 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> $r4 = r1.charVocabulary,r1 (CharLiteralElement.<init>));BackwardQuery: (<antlr.LexerGrammar: void setCharVocabulary(antlr.collections.impl.BitSet)> r0.charVocabulary = r1,r0 (LexerGrammar.setCharVocabulary));true;-1;true;true;481;false;true;122;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;233;false;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r29 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;248;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;345;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r84 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r25 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;243;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r18 = r0.ruleBlock,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;245;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r10 = r0.grammar,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;37;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r14,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.expecting = c1,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i7 = r0.expecting,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void setOption(antlr.Token,antlr.Token)> $r4 = r0.grammar,r0 (GrammarAtom.setOption));true;-1;true;true;-1;true;true;22;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;745;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r21 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;296;false;true;268;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;248;false;true;7;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i2 = $r2.guessing,$r2 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;244;false;true;3;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r48 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.ANTLRHashString: void <init>(antlr.CharScanner)> r0.lexer = r1,r0 (ANTLRHashString.<init>));BackwardQuery: (<antlr.ANTLRHashString: int hashCode()> $r1 = r0.lexer,r0 (ANTLRHashString.hashCode));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r21 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;241;false;true;26;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r19 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;251;false;true;556;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i7 = $r21.guessing,$r21 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;373;false;true;-1;true
BackwardQuery: (<antlr.preprocessor.Hierarchy: boolean verifyThatHierarchyIsComplete()> $r3 = r0.symbols,r0 (Hierarchy.verifyThatHierarchyIsComplete));BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.symbols = $r5,r0 (Hierarchy.<init>));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.NameSpace: void <init>(java.lang.String)> r0.names = $r2,r0 (NameSpace.<init>));BackwardQuery: (<antlr.NameSpace: void parse(java.lang.String)> $r4 = r0.names,r0 (NameSpace.parse));true;-1;true;true;227;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.AlternativeBlock: antlr.Alternative getAlternativeAt(int)> $r1 = r0.alternatives,r0 (AlternativeBlock.getAlternativeAt));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;328;false;true;822;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r52 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;20;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));false;0;false;true;323;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r21 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;321;false;true;32;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r2 = r1.bits,r1 (BitSet.orInPlace));false;0;false;false;253;false;true;13;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r15 = $r14.block,$r14 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.greedy = varReplacer2179,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2590,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: void expand()> $r2 = r0.buffer,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> $r2 = r0.bits,r0 (BitSet.growToInclude));BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.exportVocab = $r39,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> $r12 = r1.exportVocab,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i6 = $r16.guessing,$r16 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;254;false;true;145;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.BlockContext: antlr.AlternativeElement currentElement()> $r2 = $r1.tail,$r1 (BlockContext.currentElement));BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> r0.tail = r1,r0 (Alternative.addElement));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i4 = $r7.guessing,$r7 (ANTLRParser.range));true;-1;true;true;353;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i3 = $r2.guessing,$r2 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;405;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;334;false;true;495;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r148 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;316;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r2 = r0.head,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;365;false;true;367;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r20 = r0.antlrTool,r0 (LexerGrammar.setOption));true;-1;true;true;464;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i13 = $r47.guessing,$r47 (ANTLRParser.rule));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;417;false;true;16;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;412;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;833;false;true;920;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i2 = r0.blockNesting,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void rule()> r0.blockNesting = varReplacer1224,r0 (ANTLRParser.rule));true;755;false;true;258;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r6 = r0.buffer,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;330;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> $i1 = r0.maxToken,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> r0.maxToken = $i1,r0 (SimpleTokenManager.nextTokenType));false;12;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;255;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r56 = $r55.exportVocab,$r55 (DefineGrammarSymbols.endOptions));true;-1;true;true;615;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r55 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;308;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void addElementToCurrentAlt(antlr.AlternativeElement)> $r2 = r0.ruleBlock,r0 (MakeGrammar.addElementToCurrentAlt));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;262;false;true;242;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;252;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r84 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));false;0;false;true;260;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i8 = $r21.guessing,$r21 (ANTLRParser.terminal));true;-1;true;true;261;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i3 = r0.offset,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.offset = $i3,r0 (TokenQueue.removeFirst));true;-1;true;true;926;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void beginAlt(boolean)> $r4 = $r3.block,$r3 (MakeGrammar.beginAlt));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.TokenSymbol: void <init>(java.lang.String)> r0.paraphrase = varReplacer2146,r0 (TokenSymbol.<init>));BackwardQuery: (<antlr.TokenSymbol: void setParaphrase(java.lang.String)> r0.paraphrase = r1,r0 (TokenSymbol.setParaphrase));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharQueue: void append(char)> r0.nbrEntries = $i9,r0 (CharQueue.append));BackwardQuery: (<antlr.CharBuffer: void fill(int)> $i3 = $r2.nbrEntries,$r2 (CharBuffer.fill));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.antlrTool = r3,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r19 = r0.antlrTool,r0 (ANTLRParser.parserSpec));true;524;false;true;224;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r16 = r0.ruleBlock,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;256;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refTokenRange));true;-1;true;true;259;false;true;24;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.queue = $r2,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: antlr.Token LT(int)> $r1 = r0.queue,r0 (TokenBuffer.LT));true;-1;true;true;457;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r15 = r2.blockEnd,r2 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void addAlternative(antlr.Alternative)> $r2 = r0.alternatives,r0 (AlternativeBlock.addAlternative));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;751;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refArgAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;302;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $r7 = $r6.data,$r6 (VectorEnumerator.nextElement));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i13 = $r47.guessing,$r47 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;262;false;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r2 = r1.bits,r1 (BitSet.orInPlace));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;20;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.queue = $r1,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: char LA(int)> $r1 = r0.queue,r0 (InputBuffer.LA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;438;false;true;290;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r1 = r0.head,r0 (LList.top));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));true;-1;true;true;849;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r6 = r0.behavior,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;653;false;true;322;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $i4 = r0.offset,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.offset = $i3,r0 (CharQueue.removeFirst));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $r11 = r0.inputState,r0 (ANTLRParser.alternative));true;536;false;true;246;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i37 = $r61.guessing,$r61 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;282;false;true;59;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.length = $i5,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> $i2 = r0.length,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r87 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;271;false;true;11;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i3 = $r2.guessing,$r2 (ANTLRParser.lexerSpec));true;-1;true;true;253;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r9 = $r8.block,$r8 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r16 = r0.tool,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;298;false;true;-1;true
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.Parser: void setTokenBuffer(antlr.TokenBuffer)> $r2 = r0.inputState,r0 (Parser.setTokenBuffer));true;502;false;true;220;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> $r3 = r0.bits,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;23;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;362;false;true;388;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));BackwardQuery: (<antlr.CharBuffer: void fill(int)> $i3 = $r2.nbrEntries,$r2 (CharBuffer.fill));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;814;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;280;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $r4 = r0.behavior,r0 (ANTLRParser.ruleOptionsSpec));true;453;false;true;241;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r49 = $r48.exportVocab,$r48 (DefineGrammarSymbols.endOptions));true;-1;true;true;516;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;263;false;true;6;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r3 = r0.data,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r89 = $r88.exportVocab,$r88 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;646;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mWS));true;-1;true;true;823;false;true;1;false
BackwardQuery: (<antlr.ParserGrammar: void processArguments(java.lang.String[])> r0.debuggingOutput = varReplacer2409,r0 (ParserGrammar.processArguments));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.debuggingOutput = varReplacer2385,r0 (Grammar.<init>));true;-1;true;true;613;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r31 = $r29.exportVocab,$r29 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));false;0;false;true;356;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;258;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r13 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;253;false;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void <init>(antlr.LexerSharedInputState)> r0.literals = $r2,r0 (PreprocessorLexer.<init>));BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(int)> $r7 = r0.literals,r0 (CharScanner.testLiteralsTable));true;-1;true;true;755;false;true;0;false
BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> $r3.next = r1,$r3 (Alternative.addElement));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> r18 = r18.next,r18 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;178;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r9 = r0.blocks,r0 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;266;false;true;25;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;23;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i10 = $r28.guessing,$r28 (ANTLRParser.parserSpec));true;-1;true;true;255;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $r4 = r0.behavior,r0 (ANTLRParser.exceptionSpec));true;463;false;true;221;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refWildcard(antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (MakeGrammar.refWildcard));true;-1;true;true;253;false;true;25;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.blocks,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;240;false;true;11;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i28 = $r40.guessing,$r40 (ANTLRParser.classDef));true;-1;true;true;249;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i19 = $r31.guessing,$r31 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.SimpleTokenManager: void define(antlr.TokenSymbol)> $r3 = r0.vocabulary,r0 (SimpleTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.vocabulary = $r4,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;251;false;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r3 = $r2.block,$r2 (MakeGrammar.setUserExceptions));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r34 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;243;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i36 = $r60.guessing,$r60 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;249;false;true;53;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.expecting = i0,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $i8 = r0.expecting,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i5 = $r9.guessing,$r9 (ANTLRParser.terminal));true;-1;true;true;251;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r82 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;258;false;true;11;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r4 = $r3.exportVocab,$r3 (DefineGrammarSymbols.endOptions));true;-1;true;true;498;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $i0 = r0.numLexers,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numLexers = varReplacer1590,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;235;false;true;9;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.rules = r4,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(antlr.preprocessor.Rule,antlr.preprocessor.Grammar)> $r4 = r0.rules,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i0 = $r1.guessing,$r1 (ANTLRParser.tree));true;-1;true;true;249;false;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: char LA(int)> $r3 = r0.inputState,r0 (CharScanner.LA));true;-1;true;true;755;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String getReturnValue()> $r1 = r0.returnValue,r0 (Rule.getReturnValue));BackwardQuery: (<antlr.preprocessor.Rule: void setReturnValue(java.lang.String)> r0.returnValue = r1,r0 (Rule.setReturnValue));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void setSubruleOption(antlr.Token,antlr.Token)> $r4 = $r3.block,$r3 (MakeGrammar.setSubruleOption));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r6 = r0.behavior,r0 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;461;false;true;235;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i37 = $r61.guessing,$r61 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;257;false;true;683;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.sizeLessOne = $i1,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: void expand()> r0.sizeLessOne = $i4,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.antlrTool = r1,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r19 = r0.antlrTool,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $r12 = r0.inputState,r0 (ANTLRParser.grammar));true;387;false;true;230;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i13 = $r47.guessing,$r47 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;252;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;756;false;true;123;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r11 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;475;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: java.lang.String superClass()> $i0 = $r1.guessing,$r1 (ANTLRParser.superClass));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;315;false;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r145 = r0.tool,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;231;false;true;24;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.text = varReplacer1356,r0 (CommonToken.<init>));BackwardQuery: (<antlr.CommonToken: java.lang.String getText()> $r1 = r0.text,r0 (CommonToken.getText));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $r3 = r0.inputState,r0 (ANTLRParser.treeParserOptionsSpec));true;632;false;true;269;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r4.column = $i4,$r4 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void resetText()> $i0 = $r2.column,$r2 (CharScanner.resetText));true;-1;true;true;-1;true;true;145;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;257;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r4.argAction = $r5,$r4 (MakeGrammar.refArgAction));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.argAction = varReplacer2285,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;781;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;259;false;true;26;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: java.lang.String superClass()> $i0 = $r1.guessing,$r1 (ANTLRParser.superClass));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;360;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $i0 = r0.nested,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;260;false;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void removeFirst()> $i1 = r0.sizeLessOne,r0 (TokenQueue.removeFirst));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.sizeLessOne = $i1,r0 (TokenQueue.init));true;-1;true;true;486;false;true;330;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r1 = r0.data,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r33 = $r32.exportVocab,$r32 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;519;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mID));true;-1;true;true;784;false;true;1;false
BackwardQuery: (<antlr.TokenQueue: void removeFirst()> $i0 = r0.offset,r0 (TokenQueue.removeFirst));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.offset = varReplacer3588,r0 (TokenQueue.expand));true;-1;true;true;768;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r19 = r0.tool,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;297;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitive = varReplacer2444,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $z2 = $r7.caseSensitive,$r7 (MakeGrammar.refStringLiteral));true;-1;true;true;367;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r40 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;256;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $r1 = r0.inputState,r0 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;477;false;true;223;false;true;7;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r10 = $r8.antlrTool,$r8 (RuleBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;280;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $r8 = r0.data,r0 (Vector.setElementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> r0.currentExceptionSpec = varReplacer2268,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r3 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));true;-1;true;true;258;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.blocks,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));true;-1;true;true;258;false;true;11;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $r11 = r0.behavior,r0 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;458;false;true;223;false;true;90;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r20 = r0.tool,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;290;false;true;15;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.lastRuleRef = varReplacer2400,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> r0.lastRuleRef = $r26,r0 (MakeGrammar.refRule));true;-1;true;true;266;false;true;25;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r6 = $r5.block,$r5 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> r0.currentExceptionSpec = varReplacer2268,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r5 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));true;-1;true;true;265;false;true;1;false
BackwardQuery: (<antlr.Parser: int mark()> $r2 = $r1.input,$r1 (Parser.mark));BackwardQuery: (<antlr.Parser: void setTokenBuffer(antlr.TokenBuffer)> $r2.input = r1,$r2 (Parser.setTokenBuffer));true;-1;true;true;254;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r139 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;251;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.antlrTool = r1,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r34 = r0.antlrTool,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r40 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r2 = r1.block,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $z2 = $r10.caseSensitive,$r10 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2664,r0 (LexerGrammar.setOption));true;-1;true;true;673;false;true;225;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionGroup));true;-1;true;true;247;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r4 = $r3.block,$r3 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> $r4 = r1.charVocabulary,r1 (CharLiteralElement.<init>));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.charVocabulary = $r4,r0 (LexerGrammar.<init>));true;-1;true;true;363;false;true;129;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i6 = $r16.guessing,$r16 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;296;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void block()> $i0 = $r1.guessing,$r1 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;249;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object elementAt(int)> $r2 = r0.data,r0 (Vector.elementAt));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));true;-1;true;true;487;false;true;77;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object elementAt(int)> $r13 = r0.data,r0 (Vector.elementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;755;false;true;1;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $r1 = r0.queue,r0 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.queue = $r2,r0 (TokenBuffer.<init>));true;-1;true;true;559;false;true;319;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r16 = r0.behavior,r0 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;427;false;true;212;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2583,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedy = varReplacer2246,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mSTAR));true;-1;true;true;755;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r27 = r0.ruleBlock,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;405;false;true;37;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void block()> r0.blockNesting = $i5,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void rule()> r0.blockNesting = varReplacer1224,r0 (ANTLRParser.rule));true;564;false;true;223;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i17 = $r39.guessing,$r39 (ANTLRParser.ebnf));true;-1;true;true;272;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r112 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;252;false;true;10;false
BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $i2 = $r4.tokenStartLine,$r4 (CharScanner.makeToken));BackwardQuery: (<antlr.CharScanner: void resetText()> $r5.tokenStartLine = $i1,$r5 (CharScanner.resetText));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object elementAt(int)> $r1 = r0.data,r0 (Vector.elementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;257;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r25 = r0.ruleName,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefParser: void <init>(antlr.TokenStream,int)> r0.tokenNames = $r2,r0 (ANTLRTokdefParser.<init>));BackwardQuery: (<antlr.Parser: void match(int)> $r2 = r0.tokenNames,r0 (Parser.match));true;-1;true;true;289;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r11 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;275;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void block()> r0.blockNesting = $i3,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void rule()> r0.blockNesting = varReplacer1224,r0 (ANTLRParser.rule));true;555;false;true;227;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i3 = $r2.guessing,$r2 (ANTLRParser.setBlockElement));true;-1;true;true;245;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r12 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;256;false;true;6;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;990;false;true;1;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;30;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;767;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> r0.maxToken = $i3,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> r0.maxToken = $i1,r0 (SimpleTokenManager.nextTokenType));false;11;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;253;false;true;25;false
BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(int)> $r3 = r0.hashString,r0 (CharScanner.testLiteralsTable));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.hashString = $r2,r0 (CharScanner.<init>));true;-1;true;true;754;false;true;570;false
BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $i0 = r0.altNum,r0 (BlockContext.currentAlt));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r3.altNum = $i2,$r3 (MakeGrammar.endAlt));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r8 = r0.exportVocab,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r11,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;233;false;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r1 = r0.block,r0 (BlockContext.currentAlt));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: antlr.collections.impl.IndexedVector getOptions()> $r1 = r0.options,r0 (Grammar.getOptions));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r11 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;247;false;true;10;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> $r6 = r0.text,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;751;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r4 = r1.block,r1 (MakeGrammar.endTree));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r13 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;255;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;321;false;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i2 = $r2.guessing,$r2 (ANTLRParser.ast_type_spec));true;-1;true;true;267;false;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> $r4 = r0.text,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;749;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i3 = $r3.guessing,$r3 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;331;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;317;false;true;10;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i0 = $r2.guessing,$r2 (ANTLRParser.ebnf));true;-1;true;true;303;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r25 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;250;false;true;23;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r10 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;252;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i12,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;26;false;true;220;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r13 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;259;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void consume()> r0.numToConsume = $i1,r0 (TokenBuffer.consume));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i2 = r0.numToConsume,r0 (TokenBuffer.syncConsume));true;-1;true;true;714;false;true;154;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r7 = $r6.block,$r6 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r13,r1 (Preprocessor.optionSpec));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r15 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r1 = r0.grammar,r0 (MakeGrammar.abortGrammar));false;0;false;true;280;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r10 = $r9.importVocab,$r9 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;556;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RecognitionException: java.lang.String getFilename()> $r1 = r0.fileName,r0 (RecognitionException.getFilename));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String)> r0.fileName = varReplacer2260,r0 (RecognitionException.<init>));false;5;false;true;220;false;true;125;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r6 = $r5.block,$r5 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> $i1 = r0.maxToken,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.maxToken = varReplacer2362,r0 (SimpleTokenManager.<init>));false;11;false;true;216;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r6 = $r5.exportVocab,$r5 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;494;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r29 = r0.inputState,r0 (ANTLRParser.lexerSpec));true;479;false;true;217;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r137 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;253;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void block()> $r1 = r0.inputState,r0 (ANTLRParser.block));true;486;false;true;328;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));false;0;false;true;-1;true;true;37;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;90;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refInitAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refInitAction));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;17;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r88 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;254;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.greedySet = varReplacer2180,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z5 = r1.greedySet,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r14 = $r13.block,$r13 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i0 = $r3.guessing,$r3 (ANTLRParser.qualifiedID));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r126 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;262;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r2 = $r1.block,$r1 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $i5 = r0.nargs,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));true;29;false;true;253;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $r7 = $r6.data,$r6 (VectorEnumerator.nextElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r7 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i0 = $r4.guessing,$r4 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;231;false;true;11;false
BackwardQuery: (<antlr.ANTLRStringBuffer: char[] getBuffer()> $r1 = r0.buffer,r0 (ANTLRStringBuffer.getBuffer));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));false;0;false;true;361;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i20 = $r23.guessing,$r23 (ANTLRParser.classDef));true;-1;true;true;284;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;755;false;true;95;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;318;false;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r9 = r0.blocks,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;296;false;true;-1;true
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r90 = $r87.importVocab,$r87 (DefineGrammarSymbols.endOptions));true;-1;true;true;355;false;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.length = varReplacer1586,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $i0 = r0.length,r0 (LList.deleteHead));true;-1;true;true;347;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> $r6 = r0.grammar,r0 (MakeGrammar.refSemPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;278;false;true;554;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mWS));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));BackwardQuery: (<antlr.Token: java.lang.String toString()> $i0 = r0.type,r0 (Token.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r5 = r1.blockEnd,r1 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r6 = $r5.exportVocab,$r5 (DefineGrammarSymbols.endOptions));true;-1;true;true;474;false;true;2;false
BackwardQuery: (<antlr.CharQueue: void expand()> $r3 = r0.buffer,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: antlr.BlockContext context()> $r1 = r0.blocks,r0 (MakeGrammar.context));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;426;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: java.lang.String superClass()> $i0 = $r1.guessing,$r1 (ANTLRParser.superClass));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;313;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;267;false;true;341;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet charSet()> $i0 = $r1.guessing,$r1 (ANTLRParser.charSet));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;251;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r3 = r0.grammar,r0 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;246;false;true;956;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r17 = r0.grammar,r0 (MakeGrammar.defineRuleName));true;-1;true;true;257;false;true;26;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r118 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r13 = $r12.exportVocab,$r12 (DefineGrammarSymbols.endOptions));true;-1;true;true;354;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i1 = $r4.guessing,$r4 (ANTLRParser.qualifiedID));true;-1;true;true;248;false;true;4;false
BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r21 = r0.tmp_file,r0 (PreservingFileWriter.close));BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));false;7;false;true;218;false;true;4;false
BackwardQuery: (<antlr.GrammarElement: int getLine()> $i0 = r0.line,r0 (GrammarElement.getLine));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.line = varReplacer2169,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i10 = $r24.guessing,$r24 (ANTLRParser.terminal));true;-1;true;true;247;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r138 = $r137.importVocab,$r137 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;526;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r25 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;251;false;true;575;false
BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r4 = r1.block,r1 (MakeGrammar.endTree));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r74 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;232;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $r4 = r1.label,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setLabel(java.lang.String)> r0.label = r1,r0 (AlternativeBlock.setLabel));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r137 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r19 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i4 = $r11.guessing,$r11 (ANTLRParser.alternative));true;-1;true;true;256;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.parserSpec));true;-1;true;true;296;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r22 = $r21.block,$r21 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r6 = r0.grammar,r0 (MakeGrammar.synPred));true;-1;true;true;266;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r70 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;263;false;true;0;false
BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $i2 = r0.sizeLessOne,r0 (CharQueue.elementAt));BackwardQuery: (<antlr.CharQueue: void expand()> r0.sizeLessOne = $i4,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r8 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;277;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i13 = $r18.guessing,$r18 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;295;false;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r17 = r0.tool,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;237;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r19 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;254;false;true;7;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i7 = $r20.guessing,$r20 (ANTLRParser.lexerSpec));true;-1;true;true;253;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;319;false;true;454;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r9 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));true;-1;true;true;255;false;true;126;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r60 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;253;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $r7 = r0.behavior,r0 (ANTLRParser.exceptionGroup));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;444;false;true;222;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r26 = r0.behavior,r0 (ANTLRParser.rule));true;449;false;true;222;false;true;0;false
BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.grammarFile = $r7,r0 (Tool.processArguments));BackwardQuery: (<antlr.Tool: java.io.Reader getGrammarReader()> $r5 = r0.grammarFile,r0 (Tool.getGrammarReader));true;-1;true;true;227;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;767;false;true;289;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r12 = r0.blocks,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));true;-1;true;true;257;false;true;914;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r22 = $r21.block,$r21 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r131 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;398;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $r6 = r0.inputState,r0 (ANTLRParser.grammar));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;397;false;true;234;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void setSubruleOption(antlr.Token,antlr.Token)> $r4 = $r3.block,$r3 (MakeGrammar.setSubruleOption));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.hasAnAction = $z1,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.hasAnAction = varReplacer2244,r0 (AlternativeBlock.<init>));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> r0.tokenType = $i1,r0 (TokenRefElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.tokenType = varReplacer2150,r0 (GrammarAtom.<init>));true;103;false;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;381;false;true;909;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;316;false;true;32;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.treeParserSpec));true;-1;true;true;253;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $r3 = r1.initAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setInitAction(java.lang.String)> r0.initAction = r1,r0 (AlternativeBlock.setInitAction));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i24 = $r39.guessing,$r39 (ANTLRParser.classDef));true;-1;true;true;253;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;254;false;true;792;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r3 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;249;false;true;2;false
BackwardQuery: (<antlr.BlockWithImpliedExitPath: void <init>(antlr.Grammar)> $r2 = r0.grammar,r0 (BlockWithImpliedExitPath.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;229;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;247;false;true;288;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r27 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;254;false;true;25;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r22 = $r21.block,$r21 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.GrammarAtom: void setOption(antlr.Token,antlr.Token)> $r11 = r0.grammar,r0 (GrammarAtom.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r12 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;232;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r16 = $r15.block,$r15 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i1 = $r1.guessing,$r1 (ANTLRParser.ast_type_spec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;248;false;true;488;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r11 = r0.lastRuleRef,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.lastRuleRef = varReplacer2400,r0 (MakeGrammar.reset));true;-1;true;true;250;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r1 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;250;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: boolean member(int)> $r1 = r0.bits,r0 (BitSet.member));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i3 = $r2.guessing,$r2 (ANTLRParser.classDef));true;-1;true;true;376;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r92 = $r91.importVocab,$r91 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;491;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;257;false;true;460;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar,antlr.Token)> r0.autoGenType = varReplacer2185,r0 (AlternativeElement.<init>));BackwardQuery: (<antlr.AlternativeElement: int getAutoGenType()> $i0 = r0.autoGenType,r0 (AlternativeElement.getAutoGenType));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r122 = $r121.exportVocab,$r121 (DefineGrammarSymbols.endOptions));true;-1;true;true;384;false;true;1;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>(int)> r0.elements = $r1,r0 (IndexedVector.<init>));BackwardQuery: (<antlr.collections.impl.IndexedVector: java.util.Enumeration elements()> $r1 = r0.elements,r0 (IndexedVector.elements));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r1 = r0.head,r0 (LList.top));true;-1;true;true;488;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i0 = $r1.guessing,$r1 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;253;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r22 = r0.options,r0 (Grammar.toString));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r11 = r0.tool,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;233;false;true;821;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.className = varReplacer2395,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: java.lang.String getClassName()> $r1 = r0.className,r0 (Grammar.getClassName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;308;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;245;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r19 = r0.tool,r0 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;254;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r25 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;305;false;true;788;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.tool,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;230;false;true;-1;true
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r36 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r70 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;247;false;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> $i1 = r0.nMarkers,r0 (TokenBuffer.rewind));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.nMarkers = varReplacer1603,r0 (TokenBuffer.<init>));true;-1;true;true;457;false;true;7;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i4 = r0.length,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginChildList()> $r3 = $r1.block,$r1 (MakeGrammar.beginChildList));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r9 = r0.behavior,r0 (ANTLRParser.range));true;458;false;true;351;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i24 = $r39.guessing,$r39 (ANTLRParser.classDef));true;-1;true;true;253;false;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.offset = varReplacer1606,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i3 = r0.offset,r0 (TokenQueue.append));true;-1;true;true;480;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3.hasAnAction = varReplacer2265,$r3 (MakeGrammar.refAction));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.hasAnAction = varReplacer2174,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r3 = r0.grammar,r0 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;262;false;true;563;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;821;false;true;679;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refInitAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refInitAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r2 = r0.inputState,r0 (ANTLRParser.lexerSpec));true;471;false;true;225;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r5 = r0.antlrTool,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;569;false;true;25;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginChildList()> $r3 = $r1.block,$r1 (MakeGrammar.beginChildList));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i9 = $r34.guessing,$r34 (ANTLRParser.rule));true;-1;true;true;295;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.headerActions = $r6,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void refHeaderAction(antlr.Token,antlr.Token)> $r4 = r0.headerActions,r0 (DefineGrammarSymbols.refHeaderAction));true;-1;true;true;358;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;916;false;true;469;false
BackwardQuery: (<antlr.MakeGrammar: void setSubruleOption(antlr.Token,antlr.Token)> $r4 = $r3.block,$r3 (MakeGrammar.setSubruleOption));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i0 = $r2.guessing,$r2 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;256;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;793;false;true;-1;true
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.exportVocab = $r39,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;323;false;true;10;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i6 = $r10.guessing,$r10 (ANTLRParser.tokensSpec));true;-1;true;true;267;false;true;2;false
BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object clone()> $r3 = r0.data,r0 (Vector.clone));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.nMarkers = $i2,r0 (TokenBuffer.rewind));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.nMarkers = varReplacer1603,r0 (TokenBuffer.<init>));true;-1;true;true;610;false;true;20;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> r0.currentExceptionSpec = varReplacer2268,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));true;-1;true;true;255;false;true;123;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r131 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;376;false;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String tokenName(int)> $r8 = r0.tokenNames,r0 (MismatchedTokenException.tokenName));BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenNames = r1,r0 (MismatchedTokenException.<init>));false;2;false;true;-1;true;true;11;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.exceptionSpec));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r96 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r89 = $r88.exportVocab,$r88 (DefineGrammarSymbols.endOptions));true;-1;true;true;361;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r109 = $r108.exportVocab,$r108 (DefineGrammarSymbols.endOptions));true;-1;true;true;496;false;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i0 = r1.type,r1 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;834;false;true;659;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $r4 = r0.inputState,r0 (ANTLRParser.notTerminal));true;547;false;true;375;false;true;0;false
BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r1 = r0.block,r0 (BlockContext.currentAlt));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;23;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i3 = $r2.guessing,$r2 (ANTLRParser.setBlockElement));true;-1;true;true;371;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.buffer = r1,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r2 = r0.inputState,r0 (ANTLRParser.terminal));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;511;false;true;216;false;true;169;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.tokenType = varReplacer2150,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> $i2 = r0.tokenType,r0 (CharLiteralElement.<init>));true;98;false;true;222;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r36 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;247;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refInitAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refInitAction));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.tokenStartColumn = varReplacer1619,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: void resetText()> $r3.tokenStartColumn = $i0,$r3 (CharScanner.resetText));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z5 = r1.greedySet,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2595,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> r0.line = $i2,r0 (TokenRefElement.<init>));true;-1;true;true;278;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;266;false;true;26;false
BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String,java.lang.String,int,int)> r0.line = i0,r0 (RecognitionException.<init>));BackwardQuery: (<antlr.RecognitionException: java.lang.String toString()> $i1 = r0.line,r0 (RecognitionException.toString));false;32;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>()> r0.elements = $r1,r0 (IndexedVector.<init>));BackwardQuery: (<antlr.collections.impl.IndexedVector: void appendElement(java.lang.Object,java.lang.Object)> $r3 = r0.elements,r0 (IndexedVector.appendElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r8 = r0.antlrTool,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;530;false;true;85;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;253;false;true;969;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i12,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i2 = r0.nargs,r0 (Tool.preprocess));true;27;false;true;223;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i3 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.mismatchType = $b5,r0 (MismatchedCharException.<init>));false;1;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3 = r0.inputState,r0 (ANTLRParser.classDef));true;471;false;true;222;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r39 = r0.inputState,r0 (ANTLRParser.ebnf));true;517;false;true;225;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r87 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;252;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;311;false;true;985;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void setSubruleOption(antlr.Token,antlr.Token)> $r4 = $r3.block,$r3 (MakeGrammar.setSubruleOption));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i17 = $r39.guessing,$r39 (ANTLRParser.ebnf));true;-1;true;true;303;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;758;false;true;218;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i5 = $r9.guessing,$r9 (ANTLRParser.terminal));true;-1;true;true;299;false;true;0;false
BackwardQuery: (<antlr.InputBuffer: char LA(int)> $i1 = r0.markerOffset,r0 (InputBuffer.LA));BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.markerOffset = varReplacer1613,r0 (InputBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.interactive = varReplacer2392,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.interactive = varReplacer2606,r0 (ParserGrammar.setOption));true;-1;true;true;488;false;true;2;false
BackwardQuery: (<antlr.ANTLRHashString: void setBuffer(char[],int)> r0.buf = r1,r0 (ANTLRHashString.setBuffer));BackwardQuery: (<antlr.ANTLRHashString: char charAt(int)> $r2 = r0.buf,r0 (ANTLRHashString.charAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void append(char)> r0.nbrEntries = $i9,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void removeFirst()> $i4 = r0.nbrEntries,r0 (CharQueue.removeFirst));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r89 = $r88.exportVocab,$r88 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;494;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(int)> $r5 = r0.text,r0 (CharScanner.testLiteralsTable));true;-1;true;true;756;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i9 = $r25.guessing,$r25 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;248;false;true;62;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r36 = r0.antlrTool,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));true;22;false;true;223;false;true;0;false
BackwardQuery: (<antlr.ExceptionSpec: void <init>(antlr.Token)> r0.label = r1,r0 (ExceptionSpec.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r24 = r1.label,r1 (RuleBlock.addExceptionSpec));true;-1;true;true;350;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r129 = r0.tool,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;297;false;true;32;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i0 = r0.nargs,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = varReplacer1857,r0 (Tool.processArguments));true;25;false;true;223;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;327;false;true;795;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;319;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r62 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;263;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r63 = $r62.antlrTool,$r62 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));false;907;false;true;567;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setPredefined(boolean)> r0.predefined = z0,r0 (Grammar.setPredefined));BackwardQuery: (<antlr.preprocessor.Grammar: boolean isPredefined()> $z0 = r0.predefined,r0 (Grammar.isPredefined));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> r0.args = r1,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.args = $r2,r0 (Tool.processArguments));false;0;false;true;272;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));true;-1;true;true;759;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i0 = r1.type,r1 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r10 = r0.behavior,r0 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;484;false;true;232;false;true;122;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r21 = r0.grammar,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;257;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r49 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;261;false;true;2;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void append(char)> $i3 = r0.nbrEntries,r0 (CharQueue.append));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ActionElement: void <init>(antlr.Grammar,antlr.Token)> r0.isSemPred = varReplacer2264,r0 (ActionElement.<init>));BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> r2.isSemPred = varReplacer2263,r2 (MakeGrammar.refSemPred));true;55;false;true;285;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i1 = $r6.guessing,$r6 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;266;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i2 = $r2.guessing,$r2 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;267;false;true;4;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r71 = $r70.exportVocab,$r70 (DefineGrammarSymbols.endOptions));true;-1;true;true;374;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r12 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;263;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r5 = r0.alternatives,r0 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;248;false;true;651;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r18 = $r17.block,$r17 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r17 = r0.headerAction,r0 (GrammarFile.toString));BackwardQuery: (<antlr.preprocessor.GrammarFile: void addHeaderAction(java.lang.String)> r0.headerAction = $r8,r0 (GrammarFile.addHeaderAction));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;251;false;true;650;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;314;false;true;14;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r46 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;281;false;true;2;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r2 = r0.buffer,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.tokenNames = $r4,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.Parser: void match(int)> $r2 = r0.tokenNames,r0 (Parser.match));true;-1;true;true;221;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> $i0 = r0.maxToken,r0 (SimpleTokenManager.nextTokenType));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.maxToken = varReplacer2362,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;726;false;true;-1;true
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.numToConsume = varReplacer1600,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void consume()> $i0 = r0.numToConsume,r0 (TokenBuffer.consume));true;-1;true;true;533;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;266;false;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: void <init>(java.lang.String,antlr.CharScanner)> r0.lexer = r2,r0 (ANTLRHashString.<init>));BackwardQuery: (<antlr.ANTLRHashString: int hashCode()> $r1 = r0.lexer,r0 (ANTLRHashString.hashCode));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r144 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;245;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> $i0 = r1.maxk,r1 (RuleBlock.<init>));true;-1;true;true;625;false;true;80;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i0 = $r1.guessing,$r1 (ANTLRParser.tree));true;-1;true;true;244;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;759;false;true;830;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i5 = $r8.guessing,$r8 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;253;false;true;67;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i0 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.mismatchType = $b5,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r12 = $r10.antlrTool,$r10 (AlternativeBlock.removeTrackingOfRuleRefs));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.antlrTool = r1,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: void readGrammarFile(java.lang.String)> $r20 = r0.antlrTool,r0 (Hierarchy.readGrammarFile));true;-1;true;true;228;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r44 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;548;false;true;238;false;true;51;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $r4 = r0.inputState,r0 (ANTLRParser.throwsSpec));true;490;false;true;436;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r71 = $r70.exportVocab,$r70 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;684;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r12 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;274;false;true;11;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i1 = r0.nMarkers,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.nMarkers = varReplacer1603,r0 (TokenBuffer.<init>));true;-1;true;true;645;false;true;472;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r5 = r1.alternatives,r1 (LLkAnalyzer.subruleCanBeInverted));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r50 = r0.inputState,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;503;false;true;233;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $r1 = r0.buffer,r0 (TokenQueue.elementAt));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.buffer = r1,r0 (TokenQueue.expand));true;-1;true;true;742;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r92 = $r91.importVocab,$r91 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));true;-1;true;true;357;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r16 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;259;false;true;-1;true
BackwardQuery: (<antlr.Parser: java.lang.String getFilename()> $r2 = $r1.filename,$r1 (Parser.getFilename));BackwardQuery: (<antlr.Parser: void setFilename(java.lang.String)> $r2.filename = r1,$r2 (Parser.setFilename));true;-1;true;true;260;false;true;89;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.i = varReplacer2128,r0 (VectorEnumerator.<init>));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $i1 = r0.i,r0 (VectorEnumerator.hasMoreElements));true;23;false;true;234;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refElementOption(antlr.Token,antlr.Token)> $r6 = r0.tool,r0 (MakeGrammar.refElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;254;false;true;526;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $i0 = r0.nested,r0 (MakeGrammar.endSubRule));true;-1;true;true;435;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r4 = $r3.block,$r3 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r53 = r0.tool,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;250;false;true;26;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedy = varReplacer2246,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2590,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r12 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;262;false;true;26;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r38 = r0.grammar,r0 (MakeGrammar.defineRuleName));true;-1;true;true;256;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r3 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;256;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;261;false;true;565;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i4 = r0.markerOffset,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));true;-1;true;true;483;false;true;323;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $r2 = r0.inputState,r0 (ANTLRParser.id));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;571;false;true;227;false;true;47;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i6 = $r14.guessing,$r14 (ANTLRParser.terminal));true;-1;true;true;267;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> $i0 = r1.maxk,r1 (RuleBlock.<init>));true;-1;true;true;556;false;true;5;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i1 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i12,r0 (Tool.processArguments));true;29;false;true;234;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;257;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.upper = c2,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i8 = r0.upper,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;257;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleSymbol: void <init>(java.lang.String)> r0.references = $r2,r0 (RuleSymbol.<init>));BackwardQuery: (<antlr.RuleSymbol: void addReference(antlr.RuleRefElement)> $r2 = r0.references,r0 (RuleSymbol.addReference));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;306;false;true;266;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r14 = $r13.block,$r13 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r11 = r0.args,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> r0.args = r1,r0 (Tool.preprocessedArgList));false;15;false;true;230;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r4 = r0.inputState,r0 (ANTLRParser.terminal));true;536;false;true;228;false;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> $i3 = r0.maxToken,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> r0.maxToken = $i1,r0 (SimpleTokenManager.nextTokenType));false;11;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mSL_COMMENT));true;-1;true;true;763;false;true;1;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.queue = $r2,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $r1 = r0.queue,r0 (TokenBuffer.LA));true;-1;true;true;456;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> $r4 = r0.bits,r0 (BitSet.growToInclude));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;257;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.tool,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;277;false;true;12;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $r3 = r0.inputState,r0 (ANTLRParser.throwsSpec));true;501;false;true;229;false;true;0;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.vector = r1,r0 (VectorEnumerator.<init>));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $r4 = r0.vector,r0 (VectorEnumerator.hasMoreElements));true;21;false;true;222;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i3 = $r2.guessing,$r2 (ANTLRParser.alternative));true;-1;true;true;252;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i2 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i4 = $r6.guessing,$r6 (ANTLRParser.grammar));true;-1;true;true;269;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r15 = r1.exportVocab,r1 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r11,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setTokenSection(java.lang.String)> r0.tokenSection = r1,r0 (Grammar.setTokenSection));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r56 = r0.tokenSection,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;261;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i13 = $r47.guessing,$r47 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;260;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i3 = $r2.guessing,$r2 (ANTLRParser.alternative));true;-1;true;true;260;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i1 = $r4.guessing,$r4 (ANTLRParser.throwsSpec));true;-1;true;true;314;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: java.lang.String superClass()> $i0 = $r1.guessing,$r1 (ANTLRParser.superClass));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;374;false;true;2;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i1 = $r4.guessing,$r4 (ANTLRParser.qualifiedID));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r8 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;257;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r13 = r0.grammar,r0 (MakeGrammar.refReturnAction));true;-1;true;true;250;false;true;25;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;756;false;true;408;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $r6 = r0.head,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));true;-1;true;true;485;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;747;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;752;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r0.nested = $i1,r0 (MakeGrammar.endSubRule));true;-1;true;true;260;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.parserOptionsSpec));true;-1;true;true;250;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r149 = $r148.exportVocab,$r148 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;490;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;249;false;true;559;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r29 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refArgAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r63 = $r62.exportVocab,$r62 (DefineGrammarSymbols.endOptions));true;-1;true;true;354;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;752;false;true;826;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i1 = $r1.guessing,$r1 (ANTLRParser.setBlockElement));true;-1;true;true;249;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $i4 = $r2.type,$r2 (TokenBuffer.LA));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;-1;true;true;156;false
BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> $r3 = r0.bits,r0 (BitSet.growToInclude));BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));false;0;false;true;248;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i3 = $r2.guessing,$r2 (ANTLRParser.alternative));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r60 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;250;false;true;11;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r3 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;250;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r21 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;252;false;true;263;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;266;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r7 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;266;false;true;284;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.tabsize = varReplacer1667,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void tab()> $i2 = r0.tabsize,r0 (CharScanner.tab));true;-1;true;true;789;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.notTerminal));true;-1;true;true;251;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r2 = $r1.exportVocab,$r1 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;493;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> r0.lastElement = $i5,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $i0 = $r4.lastElement,$r4 (VectorEnumerator.nextElement));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r8 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;366;false;true;793;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i0 = $r3.guessing,$r3 (ANTLRParser.throwsSpec));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;491;false;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RecognitionException: java.lang.String toString()> $i1 = r0.line,r0 (RecognitionException.toString));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String)> r0.line = varReplacer2259,r0 (RecognitionException.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r4 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;249;false;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r144 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;252;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.exceptionSpec));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;253;false;true;269;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.defaultErrorHandler = varReplacer2686,r0 (Grammar.setOption));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2439,r0 (LexerGrammar.<init>));true;-1;true;true;509;false;true;83;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r78 = $r77.exportVocab,$r77 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));true;-1;true;true;496;false;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));BackwardQuery: (<antlr.RuleBlock: void prepareForAnalysis()> $i0 = $r1.maxk,$r1 (RuleBlock.prepareForAnalysis));false;1;false;true;-1;true;true;77;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i19 = $r31.guessing,$r31 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;248;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r6 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;333;false;true;741;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setCharVocabulary(antlr.collections.impl.BitSet)> $r2 = r0.grammar,r0 (DefineGrammarSymbols.setCharVocabulary));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;252;false;true;6;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object elementAt(int)> $r1 = r0.data,r0 (Vector.elementAt));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r36 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;253;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r12 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;264;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> r0.maxToken = $i3,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $i0 = r0.maxToken,r0 (SimpleTokenManager.clone));false;12;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> r0.maxToken = $i3,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.maxToken = varReplacer2362,r0 (SimpleTokenManager.<init>));false;12;false;true;231;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;257;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;797;false;true;168;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i24 = $r39.guessing,$r39 (ANTLRParser.classDef));true;-1;true;true;259;false;true;0;false
BackwardQuery: (<antlr.BlockWithImpliedExitPath: void <init>(antlr.Grammar)> $i0 = $r2.maxk,$r2 (BlockWithImpliedExitPath.<init>));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.antlrTool = r1,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: antlr.Tool getTool()> $r1 = r0.antlrTool,r0 (Hierarchy.getTool));true;-1;true;true;281;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;260;false;true;4;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r20 = $r19.tokenManager,$r19 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;493;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r3 = $r2.block,$r2 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;545;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r27.access = r2,r27 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r15 = r3.access,r3 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.symbols = $r6,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: void define(antlr.RuleSymbol)> $r3 = r0.symbols,r0 (Grammar.define));true;-1;true;true;363;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i14 = $r37.guessing,$r37 (ANTLRParser.ebnf));true;-1;true;true;266;false;true;4;false
BackwardQuery: (<antlr.ANTLRStringBuffer: java.lang.String toString()> $r2 = r0.buffer,r0 (ANTLRStringBuffer.toString));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.buffer = r1,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.args = $r2,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r20 = r0.args,r0 (Tool.preprocess));true;24;false;true;225;false;true;0;false
BackwardQuery: (<antlr.CharScanner: int getLine()> $r1 = r0.inputState,r0 (CharScanner.getLine));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;756;false;true;-1;true
BackwardQuery: (<antlr.Tool: void <init>()> r0.genHashLines = varReplacer1905,r0 (Tool.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r78.genHashLines = $z22,$r78 (DefineGrammarSymbols.setFileOption));true;-1;true;true;352;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;249;false;true;321;false
BackwardQuery: (<antlr.ActionElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (ActionElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.line = varReplacer2169,r0 (GrammarElement.<init>));true;-1;true;true;222;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setMemberAction(java.lang.String)> r0.memberAction = r1,r0 (Grammar.setMemberAction));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(java.lang.String,antlr.preprocessor.Grammar)> r0.memberAction = r1,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r56 = $r55.exportVocab,$r55 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));false;0;false;true;495;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r11 = r0.inputState,r0 (ANTLRParser.rule));true;503;false;true;222;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleEnd = varReplacer2401,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r4 = r0.ruleEnd,r0 (MakeGrammar.endAlt));true;-1;true;true;256;false;true;26;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r48 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;254;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;376;false;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void setExpanded(boolean)> r0.expanded = z0,r0 (GrammarFile.setExpanded));BackwardQuery: (<antlr.preprocessor.GrammarFile: void generateExpandedFile()> $z0 = r0.expanded,r0 (GrammarFile.generateExpandedFile));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r63 = $r62.exportVocab,$r62 (DefineGrammarSymbols.endOptions));true;-1;true;true;680;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;317;false;true;652;false
BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> $r8.semPred = $r9,$r8 (MakeGrammar.refSemPred));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r7 = r2.semPred,r2 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.mismatchType = $b3,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i3 = r0.mismatchType,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: java.lang.Object getElement(java.lang.Object)> $r3 = r0.index,r0 (IndexedVector.getElement));BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>(int)> r0.index = $r2,r0 (IndexedVector.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r3 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;249;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i3 = $r2.guessing,$r2 (ANTLRParser.setBlockElement));true;-1;true;true;251;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13.block = $r15,$r13 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mASSIGN));true;-1;true;true;760;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammars = $r4,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r15 = r0.grammars,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r31 = $r29.antlrTool,$r29 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i1 = $r2.guessing,$r2 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;238;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;242;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i1 = $r1.guessing,$r1 (ANTLRParser.id));true;-1;true;true;239;false;true;1;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.analyzerDebug = varReplacer2729,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.analyzerDebug = varReplacer2386,r0 (Grammar.<init>));true;-1;true;true;648;false;true;154;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r33 = $r32.tokenManager,$r32 (DefineGrammarSymbols.defineToken));true;-1;true;true;529;false;true;0;false
BackwardQuery: (<antlr.WildcardElement: java.lang.String getLabel()> $r1 = r0.label,r0 (WildcardElement.getLabel));BackwardQuery: (<antlr.WildcardElement: void setLabel(java.lang.String)> r0.label = r1,r0 (WildcardElement.setLabel));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r21 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;759;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));false;0;false;true;255;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.length = $i5,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r3 = r0.blocks,r0 (MakeGrammar.endSubRule));true;-1;true;true;249;false;true;24;false
BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r14 = r3.targetRule,r3 (AlternativeBlock.removeTrackingOfRuleRefs));BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.targetRule = $r3,r0 (RuleRefElement.<init>));false;0;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r6 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;245;false;true;733;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> r0.currentExceptionSpec = varReplacer2268,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));true;-1;true;true;240;false;true;95;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mELEMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;760;false;true;338;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13 = $r12.blockEnd,$r12 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r49 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;252;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r7 = $r6.block,$r6 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numLexers = varReplacer1590,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $i1 = r0.numLexers,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r41 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));true;-1;true;true;455;false;true;302;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.expecting = i0,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $i4 = r0.expecting,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;758;false;true;52;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r12 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;231;false;true;0;false
BackwardQuery: (<antlr.RuleEndElement: void <init>(antlr.Grammar)> $i0 = r1.maxk,r1 (RuleEndElement.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));true;-1;true;true;621;false;true;12;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;759;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r12 = r0.tool,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;235;false;true;544;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.analyzerDebug = varReplacer2687,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.analyzerDebug = varReplacer2386,r0 (Grammar.<init>));true;-1;true;true;565;false;true;90;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r13 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;249;false;true;519;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.testLiterals = varReplacer2442,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.testLiterals = varReplacer2654,r0 (LexerGrammar.setOption));true;-1;true;true;490;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammars,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammars = $r4,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;246;false;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r16 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;212;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r0.nested = $i1,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $i0 = r0.nested,r0 (MakeGrammar.beginSubRule));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r62 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;449;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;872;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void resetText()> $r5 = r0.inputState,r0 (CharScanner.resetText));true;-1;true;true;750;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));false;0;false;true;246;false;true;6;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r49 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.terminal));true;-1;true;true;268;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;325;false;true;575;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r48 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;332;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i10 = $r28.guessing,$r28 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;282;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> $r2 = r0.data,r0 (Vector.appendElement));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r4 = $r3.exportVocab,$r3 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;811;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i2 = r0.nargs,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i6,r0 (Tool.processArguments));true;66;false;true;301;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));BackwardQuery: (<antlr.preprocessor.Grammar: antlr.collections.impl.IndexedVector getOptions()> $r1 = r0.options,r0 (Grammar.getOptions));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;334;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i2 = $r3.guessing,$r3 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;376;false;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i1 = $r3.altNum,$r3 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r8.altNum = varReplacer2254,$r8 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CommonToken: void setColumn(int)> r0.col = i0,r0 (CommonToken.setColumn));BackwardQuery: (<antlr.CommonToken: int getColumn()> $i0 = r0.col,r0 (CommonToken.getColumn));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.numToConsume = varReplacer1611,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: void consume()> r0.numToConsume = $i1,r0 (InputBuffer.consume));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r76 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;251;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;987;false;true;215;false
BackwardQuery: (<antlr.Grammar: boolean getDefaultErrorHandler()> $z0 = r0.defaultErrorHandler,r0 (Grammar.getDefaultErrorHandler));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.defaultErrorHandler = varReplacer2699,r0 (Grammar.setOption));true;-1;true;true;729;false;true;14;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r39 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: java.lang.String toString()> $r2 = r0.buffer,r0 (ANTLRStringBuffer.toString));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.CharScanner: void consume()> $r4.column = $i4,$r4 (CharScanner.consume));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.column = varReplacer1623,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refToken));true;-1;true;true;235;false;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i11 = $r39.guessing,$r39 (ANTLRParser.rule));true;-1;true;true;244;false;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));true;-1;true;true;410;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CommonToken: java.lang.String toString()> $i0 = r0.type,r0 (CommonToken.toString));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i13 = $r8.guessing,$r8 (ANTLRParser.classDef));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> r0.begin = $i1,r0 (TokenRangeElement.<init>));BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $i1 = r4.begin,r4 (MakeGrammar.refTokenRange));true;108;false;true;213;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;254;false;true;554;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setCharVocabulary(antlr.collections.impl.BitSet)> $r2 = r0.grammar,r0 (DefineGrammarSymbols.setCharVocabulary));true;-1;true;true;263;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r17 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;233;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void block()> r0.blockNesting = $i3,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: boolean lastInRule()> $i0 = r0.blockNesting,r0 (ANTLRParser.lastInRule));true;610;false;true;222;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i1 = $r6.guessing,$r6 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;255;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.antlrTool = r3,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void checkForMissingEndRule(antlr.Token)> $r2 = r0.antlrTool,r0 (ANTLRParser.checkForMissingEndRule));true;486;false;true;211;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r19 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.maxToken = varReplacer2362,r0 (SimpleTokenManager.<init>));BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> r0.maxToken = $i1,r0 (SimpleTokenManager.nextTokenType));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;893;false;true;272;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserOptionsSpec));true;-1;true;true;289;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i9 = $r25.guessing,$r25 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;245;false;true;60;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i6 = $r10.guessing,$r10 (ANTLRParser.range));true;-1;true;true;231;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: java.lang.String superClass()> $r1 = r0.inputState,r0 (ANTLRParser.superClass));true;493;false;true;215;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2587,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.generateAmbigWarnings = varReplacer2237,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.line = varReplacer2169,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.CharRangeElement: void <init>(antlr.LexerGrammar,antlr.Token,antlr.Token,int)> r0.line = $i5,r0 (CharRangeElement.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.length = $i1,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $i0 = r0.length,r0 (LList.insertHead));true;-1;true;true;576;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;240;false;true;-1;true
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r28 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;727;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r33 = $r32.exportVocab,$r32 (DefineGrammarSymbols.endOptions));true;-1;true;true;341;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r25 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;240;false;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i5 = $r12.guessing,$r12 (ANTLRParser.grammar));true;-1;true;true;261;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;326;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> $r10 = r0.antlrTool,r0 (ImportVocabTokenManager.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r62 = r0.grammar,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;319;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $i0 = r0.numParsers,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numParsers = varReplacer1589,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;229;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionGroup));true;-1;true;true;246;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> $r6 = r0.text,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;725;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r2.column = varReplacer2937,$r2 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: int getColumn()> $i0 = $r1.column,$r1 (CharScanner.getColumn));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(long[])> r0.bits = r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: boolean member(int)> $r1 = r0.bits,r0 (BitSet.member));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r2 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;242;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> $r6 = r0.text,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;765;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.exportVocab = $r39,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r22 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r14 = r0.ruleBlock,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;240;false;true;61;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i0 = r0.nested,r0 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));true;-1;true;true;308;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i1 = $r6.guessing,$r6 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;238;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;235;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r17 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;293;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r21 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;240;false;true;528;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r4 = r0.buffer,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = z0,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $z0 = $r4.not,$r4 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;236;false;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.debuggingOutput = varReplacer2385,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: void processArguments(java.lang.String[])> r0.debuggingOutput = varReplacer2434,r0 (LexerGrammar.processArguments));true;-1;true;true;665;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i0 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i6,r0 (Tool.processArguments));true;35;false;true;277;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r20 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;280;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r24 = $r23.block,$r23 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;807;false;true;-1;true
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.tokenType = $i1,r0 (CharLiteralElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.tokenType = varReplacer2150,r0 (GrammarAtom.<init>));true;100;false;true;212;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;244;false;true;452;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r3 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));true;490;false;true;218;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r22 = r0.behavior,r0 (ANTLRParser.rule));true;457;false;true;214;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i1 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));true;27;false;true;208;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i12,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i0 = r0.nargs,r0 (Tool.preprocess));true;25;false;true;311;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;301;false;true;297;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.parserSpec));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;244;false;true;396;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r12 = r0.blocks,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;231;false;true;886;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i3 = $r7.guessing,$r7 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;277;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r10 = $r9.block,$r9 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> r0.tmp_file = varReplacer3678,r0 (PreservingFileWriter.close));false;0;false;true;220;false;true;0;false
BackwardQuery: (<antlr.TokenSymbol: void <init>(java.lang.String)> r0.ttype = varReplacer2147,r0 (TokenSymbol.<init>));BackwardQuery: (<antlr.TokenSymbol: void setTokenType(int)> r0.ttype = i0,r0 (TokenSymbol.setTokenType));true;-1;true;true;218;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r105 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.subruleOptionsSpec));true;-1;true;true;235;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r4 = r0.behavior,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;461;false;true;212;false;true;36;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $z0 = $r2.not,$r2 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = z0,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;731;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;736;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> $r3 = r0.options,r0 (Grammar.addOption));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r5 = r2.block,r2 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;244;false;true;543;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i1 = r2.type,r2 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i5 = $r13.guessing,$r13 (ANTLRParser.notTerminal));true;-1;true;true;228;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r11 = r0.args,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.args = $r2,r0 (Tool.processArguments));true;24;false;true;210;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r96 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r3 = r0.grammar,r0 (MakeGrammar.endChildList));false;0;false;true;246;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i3 = $r7.guessing,$r7 (ANTLRParser.qualifiedID));true;-1;true;true;248;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r45 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.generateAmbigWarnings = varReplacer2178,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.NoViableAltForCharException: java.lang.String getMessage()> $c0 = r0.foundChar,r0 (NoViableAltForCharException.getMessage));BackwardQuery: (<antlr.NoViableAltForCharException: void <init>(char,java.lang.String,int,int)> r0.foundChar = c0,r0 (NoViableAltForCharException.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r22 = $r21.importVocab,$r21 (DefineGrammarSymbols.endOptions));false;0;false;true;474;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;373;false;true;69;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r23 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));false;0;false;true;340;false;true;12;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.length = $i1,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.length = $i1,r0 (LList.deleteHead));true;-1;true;true;616;false;true;0;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $r10 = r0.antlrTool,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;759;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r13 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;237;false;true;800;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.numToConsume = varReplacer1600,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i0 = r0.numToConsume,r0 (TokenBuffer.syncConsume));true;-1;true;true;440;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i9 = $r25.guessing,$r25 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;237;false;true;62;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i1 = $r2.guessing,$r2 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;240;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.ruleOptionsSpec));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $r3 = r0.inputState,r0 (ANTLRParser.ruleOptionsSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;487;false;true;209;false;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i4 = $r7.guessing,$r7 (ANTLRParser.range));true;-1;true;true;232;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r4 = r1.block,r1 (MakeGrammar.endTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;432;false;true;-1;true
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $r3 = r0.inputState,r0 (ANTLRParser.subruleOptionsSpec));true;708;false;true;229;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $r8 = r0.data,r0 (Vector.setElementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r7 = r0.grammar,r0 (MakeGrammar.beginTree));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2587,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2556,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;314;false;true;838;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r27 = r0.behavior,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;515;false;true;218;false;true;92;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void refInitAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refInitAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r7 = r0.grammarFileName,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammarFileName = $r6,r0 (Tool.processArguments));true;25;false;true;206;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $r3 = r0.data,r0 (Vector.setElementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.parserOptionsSpec));true;-1;true;true;248;false;true;2;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void define(java.lang.String,int)> $i3 = r0.maxToken,r0 (ImportVocabTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.maxToken = varReplacer2362,r0 (SimpleTokenManager.<init>));false;11;false;true;209;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r9 = r0.tool,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i7 = r0.expecting,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.expecting = c1,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r5 = r1.blockEnd,r1 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;736;false;true;93;false
BackwardQuery: (<antlr.CharScanner: int getColumn()> $i0 = $r1.column,$r1 (CharScanner.getColumn));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.column = varReplacer1623,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;742;false;true;173;false
BackwardQuery: (<antlr.Tool: boolean hasError()> $z0 = r0.hasError,r0 (Tool.hasError));BackwardQuery: (<antlr.Tool: void error(java.lang.String)> r0.hasError = varReplacer1900,r0 (Tool.error));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mSEMI));true;-1;true;true;994;false;true;1;false
BackwardQuery: (<antlr.RuleBlock: antlr.ExceptionSpec findExceptionSpec(antlr.Token)> $r2 = r0.exceptionSpecs,r0 (RuleBlock.findExceptionSpec));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.exceptionSpecs = $r5,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.Parser: int mark()> $r1 = r0.inputState,r0 (Parser.mark));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;467;false;true;219;false;true;6;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;964;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;270;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $r5 = r0.behavior,r0 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;612;false;true;277;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r12 = r0.args,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> r0.args = r1,r0 (Tool.preprocessedArgList));false;13;false;true;221;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.column = varReplacer2170,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.ActionElement: void <init>(antlr.Grammar,antlr.Token)> r0.column = $i1,r0 (ActionElement.<init>));true;-1;true;true;213;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r14,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;241;false;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;267;false;true;743;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r137 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;261;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void add(int)> $r1 = r0.bits,r0 (BitSet.add));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void expand()> r0.buffer = r1,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: void append(char)> $r1 = r0.buffer,r0 (CharQueue.append));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r105 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;240;false;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (TokenQueue.removeFirst));true;-1;true;true;480;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r19 = $r17.antlrTool,$r17 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r11 = r0.args,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.args = r2,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;231;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;14;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.language = varReplacer1588,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r43 = r0.language,r0 (DefineGrammarSymbols.setFileOption));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.terminal));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.i = varReplacer2128,r0 (VectorEnumerator.<init>));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> r0.i = $i3,r0 (VectorEnumerator.nextElement));true;21;false;true;208;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;236;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.TokenBuffer: antlr.Token LT(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.LT));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;741;false;true;141;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refArgAction));true;-1;true;true;-1;true;true;21;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;547;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r10 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;261;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = z0,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $z0 = r2.not,r2 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharScanner: boolean getCaseSensitiveLiterals()> $z0 = r0.caseSensitiveLiterals,r0 (CharScanner.getCaseSensitiveLiterals));BackwardQuery: (<antlr.ANTLRTokdefLexer: void <init>(antlr.LexerSharedInputState)> r0.caseSensitiveLiterals = varReplacer2358,r0 (ANTLRTokdefLexer.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;733;false;true;209;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $r4 = r0.head,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));true;-1;true;true;478;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r122 = $r121.exportVocab,$r121 (DefineGrammarSymbols.endOptions));true;-1;true;true;478;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r4 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;245;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r25 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;238;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r7.returnAction = $r8,$r7 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.returnAction = varReplacer2286,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.Rule: void setVisibility(java.lang.String)> r0.visibility = r1,r0 (Rule.setVisibility));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r15 = r0.visibility,r0 (Rule.toString));false;42;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.notTerminal));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r16 = r0.tool,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;329;false;true;76;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;890;false;true;392;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i8 = $r21.guessing,$r21 (ANTLRParser.terminal));true;-1;true;true;244;false;true;4;false
BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> $r4 = r0.grammar,r0 (TokenRefElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.set = r1,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $r12 = r0.set,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r62 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;732;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r3 = $r2.block,$r2 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;244;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mNESTED_ACTION));true;-1;true;true;730;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r8 = r0.grammar,r0 (MakeGrammar.abortGrammar));false;0;false;true;250;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i1 = $r1.guessing,$r1 (ANTLRParser.ast_type_spec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;237;false;true;499;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;247;false;true;718;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;742;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r16 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;552;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i13 = $r18.guessing,$r18 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;231;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $i2 = r4.end,r4 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> r0.end = varReplacer2199,r0 (TokenRangeElement.<init>));true;103;false;true;211;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.interactive = varReplacer2392,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.interactive = varReplacer2635,r0 (LexerGrammar.setOption));true;-1;true;true;466;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;778;false;true;337;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.LexerGrammar: void setCharVocabulary(antlr.collections.impl.BitSet)> r0.charVocabulary = r1,r0 (LexerGrammar.setCharVocabulary));BackwardQuery: (<antlr.CharRangeElement: void <init>(antlr.LexerGrammar,antlr.Token,antlr.Token,int)> $r8 = r1.charVocabulary,r1 (CharRangeElement.<init>));true;-1;true;true;516;false;true;17;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r75 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: antlr.Alternative getAlternativeAt(int)> $r1 = r0.alternatives,r0 (AlternativeBlock.getAlternativeAt));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;882;false;true;291;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.rules = r4,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: antlr.collections.impl.IndexedVector getRules()> $r1 = r0.rules,r0 (Grammar.getRules));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r35 = r0.options,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.treeParserSpec));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: int length()> $i0 = r0.length,r0 (ANTLRStringBuffer.length));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;390;false;true;905;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> $r2 = r0.data,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i1 = $r2.guessing,$r2 (ANTLRParser.rule));true;-1;true;true;295;false;true;2;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.grammars = $r3,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: void addGrammar(antlr.preprocessor.Grammar)> $r2 = r0.grammars,r0 (GrammarFile.addGrammar));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r18 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;552;false;true;242;false;true;50;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i4 = r0.blockNesting,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void rule()> r0.blockNesting = varReplacer1224,r0 (ANTLRParser.rule));true;611;false;true;243;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r96 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;275;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.antlrTool = r1,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(antlr.preprocessor.Rule,antlr.preprocessor.Grammar)> $r8 = r0.antlrTool,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;464;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r32 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;312;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $r3 = r0.inputState,r0 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;526;false;true;210;false;true;13;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i5 = $r9.guessing,$r9 (ANTLRParser.terminal));true;-1;true;true;247;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;880;false;true;394;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r25 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;406;false;true;734;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i0 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = varReplacer1857,r0 (Tool.processArguments));true;32;false;true;274;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r69 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: void append(char)> $r1 = r0.buffer,r0 (CharQueue.append));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r16 = $r15.importVocab,$r15 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));true;-1;true;true;477;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r13 = r0.behavior,r0 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;441;false;true;241;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r37 = r0.behavior,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;458;false;true;208;false;true;36;false
BackwardQuery: (<antlr.preprocessor.Rule: void setThrowsSpec(java.lang.String)> r0.throwsSpec = r1,r0 (Rule.setThrowsSpec));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r27 = r0.throwsSpec,r0 (Rule.toString));false;38;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i12,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i0 = r0.nargs,r0 (Tool.preprocessedArgList));true;27;false;true;210;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.interactive = varReplacer2392,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.interactive = varReplacer2639,r0 (LexerGrammar.setOption));true;-1;true;true;475;false;true;2;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> r0.args = r1,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r20 = r0.args,r0 (Tool.preprocess));false;0;false;true;208;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleEnd = $r16,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r4 = r0.ruleEnd,r0 (MakeGrammar.endAlt));true;-1;true;true;270;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefParser: antlr.Tool getTool()> $r1 = r0.antlrTool,r0 (ANTLRTokdefParser.getTool));BackwardQuery: (<antlr.ANTLRTokdefParser: void setTool(antlr.Tool)> r0.antlrTool = r1,r0 (ANTLRTokdefParser.setTool));true;43;false;true;210;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r19 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;305;false;true;545;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r21 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mOR));true;-1;true;true;905;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i0 = $r1.guessing,$r1 (ANTLRParser.block));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;292;false;true;86;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r11 = r0.tool,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;311;false;true;62;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r8 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;291;false;true;-1;true
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.not = z0,r0 (CharLiteralElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.not = varReplacer2152,r0 (GrammarAtom.<init>));true;97;false;true;223;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> $r4 = r0.text,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;120;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i1 = $r1.guessing,$r1 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;277;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r89 = $r88.exportVocab,$r88 (DefineGrammarSymbols.endOptions));true;-1;true;true;489;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> $r8 = r0.text,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;728;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i7 = $r20.guessing,$r20 (ANTLRParser.lexerSpec));true;-1;true;true;380;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i11 = $r28.guessing,$r28 (ANTLRParser.ebnf));true;-1;true;true;248;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r12 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;240;false;true;575;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;248;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r41 = $r40.importVocab,$r40 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));true;-1;true;true;347;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;723;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> $r6 = r0.grammar,r0 (MakeGrammar.refSemPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;225;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r157 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));false;0;false;true;236;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r125 = $r124.exportVocab,$r124 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;730;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $r10 = r0.behavior,r0 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;458;false;true;213;false;true;90;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r22 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r11 = r0.options,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r6.preambleAction = $r13,r6 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.preambleAction = $r4,r0 (Grammar.<init>));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginChildList()> $r3 = $r1.block,$r1 (MakeGrammar.beginChildList));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genDocBook = varReplacer1902,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z2 = r0.genDocBook,r0 (Tool.getLanguage));true;-1;true;true;215;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r38 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;242;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r20 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;314;false;true;19;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r2 = r0.head,r0 (LList.deleteHead));true;-1;true;true;502;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refHeaderAction(antlr.Token,antlr.Token)> $r14 = r0.tool,r0 (DefineGrammarSymbols.refHeaderAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;227;false;true;1;false
BackwardQuery: (<antlr.ImportVocabTokenManager: java.lang.Object clone()> $r3 = r0.filename,r0 (ImportVocabTokenManager.clone));BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> r0.filename = r2,r0 (ImportVocabTokenManager.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> $r2 = r0.text,r0 (ANTLRLexer.mACTION));true;-1;true;true;966;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r5 = r1.alternatives,r1 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.warnWhenFollowAmbig = varReplacer2236,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2602,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r12 = r0.lastRuleRef,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.lastRuleRef = varReplacer2400,r0 (MakeGrammar.reset));true;-1;true;true;263;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void setCaseSensitive(boolean)> r0.caseSensitive = z0,r0 (CharScanner.setCaseSensitive));BackwardQuery: (<antlr.CharScanner: void consume()> $z0 = r0.caseSensitive,r0 (CharScanner.consume));true;-1;true;true;768;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i2 = $r2.guessing,$r2 (ANTLRParser.ast_type_spec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;261;false;true;471;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;370;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void prepareForAnalysis()> $r1 = r0.grammar,r0 (RuleBlock.prepareForAnalysis));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.treeParserSpec));true;-1;true;true;248;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $r1 = r0.inputState,r0 (ANTLRParser.setBlockElement));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;495;false;true;212;false;true;13;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i1 = r0.nMarkers,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.nMarkers = $i2,r0 (TokenBuffer.rewind));true;-1;true;true;661;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i2 = r0.nargs,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = varReplacer1857,r0 (Tool.processArguments));true;23;false;true;218;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z0 = r1.hasASynPred,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.hasASynPred = $z0,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(antlr.preprocessor.Option,antlr.preprocessor.Grammar)> $r5 = r0.options,r0 (Grammar.inherit));BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;309;false;true;862;false
BackwardQuery: (<antlr.CharScanner: void setTokenObjectClass(java.lang.String)> r0.tokenObjectClass = $r3,r0 (CharScanner.setTokenObjectClass));BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $r1 = r0.tokenObjectClass,r0 (CharScanner.makeToken));true;-1;true;true;769;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $i0 = r0.nested,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> r0.nested = $i1,r0 (MakeGrammar.beginSubRule));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;247;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $r4 = r0.inputState,r0 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;696;false;true;280;false;true;17;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r45 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;310;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r10 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;357;false;true;13;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z4 = r1.greedy,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedy = $z4,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r9 = r0.inputState,r0 (ANTLRParser.terminal));true;698;false;true;397;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;733;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;260;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r13 = r0.grammar,r0 (MakeGrammar.refReturnAction));true;-1;true;true;244;false;true;9;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mASSIGN));true;-1;true;true;729;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r29 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.grammarError = varReplacer2405,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endGrammar()> $z0 = r0.grammarError,r0 (MakeGrammar.endGrammar));true;-1;true;true;257;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mSL_COMMENT));true;-1;true;true;727;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r14,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;231;false;true;9;false
BackwardQuery: (<antlr.TreeWalkerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r4 = r0.antlrTool,r0 (TreeWalkerGrammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;472;false;true;19;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;240;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r14,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i6 = $r10.guessing,$r10 (ANTLRParser.tokensSpec));true;-1;true;true;240;false;true;2;false
BackwardQuery: (<antlr.CharQueue: void expand()> r0.buffer = r1,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $r1 = r0.buffer,r0 (CharQueue.elementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r6.comment = r4,r6 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.comment = varReplacer2391,r0 (Grammar.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r15 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r109 = $r108.exportVocab,$r108 (DefineGrammarSymbols.endOptions));true;-1;true;true;492;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $r6 = $r5.filename,$r5 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.Parser: void setFilename(java.lang.String)> $r2.filename = r1,$r2 (Parser.setFilename));true;-1;true;true;249;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r19 = r0.tool,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;224;false;true;990;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionGroup));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.parserOptionsSpec));true;-1;true;true;239;false;true;2;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r6 = r0.buffer,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r4 = r0.blocks,r0 (MakeGrammar.beginTree));true;-1;true;true;242;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;244;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r8 = $r7.exportVocab,$r7 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));true;-1;true;true;496;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r49 = $r48.exportVocab,$r48 (DefineGrammarSymbols.endOptions));true;-1;true;true;347;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void rewind(int)> $r1 = r0.inputState,r0 (Parser.rewind));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;519;false;true;234;false;true;8;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));BackwardQuery: (<antlr.ANTLRStringBuffer: int length()> $i0 = r0.length,r0 (ANTLRStringBuffer.length));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> $i1 = r0.sizeLessOne,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void expand()> r0.sizeLessOne = $i4,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i10 = $r24.guessing,$r24 (ANTLRParser.terminal));true;-1;true;true;351;false;true;5;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2589,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.importVocab = varReplacer1707,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.importVocab = $r15,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $r1 = r0.buffer,r0 (TokenQueue.elementAt));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));true;-1;true;true;474;false;true;335;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;741;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i1 = $r1.guessing,$r1 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;235;false;true;4;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genDocBook = varReplacer1902,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDocBook = varReplacer1885,r0 (Tool.processArguments));true;-1;true;true;215;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.sizeLessOne = $i1,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $i2 = r0.sizeLessOne,r0 (CharQueue.elementAt));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.Option: void <init>(java.lang.String,java.lang.String,antlr.preprocessor.Grammar)> r0.rhs = r2,r0 (Option.<init>));BackwardQuery: (<antlr.preprocessor.Option: java.lang.String toString()> $r6 = r0.rhs,r0 (Option.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r121 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r27 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;243;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;881;false;true;307;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.nameSpace = varReplacer1907,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void setNameSpace(java.lang.String)> r0.nameSpace = $r3,r0 (Tool.setNameSpace));true;-1;true;true;343;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.warnWhenFollowAmbig = varReplacer2236,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z2 = r1.warnWhenFollowAmbig,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r2 = r1.block,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r12 = r0.blocks,r0 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;236;false;true;24;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;52;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;731;false;true;162;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object clone()> $r3 = r0.data,r0 (Vector.clone));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r30 = r0.tool,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;238;false;true;11;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i7 = r0.length,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> $r12 = r0.antlrTool,r0 (ParserGrammar.setOption));true;-1;true;true;466;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r116 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r20 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;215;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r66 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;253;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.notTerminal));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r68 = $r66.exportVocab,$r66 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;485;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void add(int)> $r2 = r0.bits,r0 (BitSet.add));BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r22 = r0.behavior,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;450;false;true;209;false;true;91;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r24 = $r23.block,$r23 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r5 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;244;false;true;483;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.label = $r4,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setLabel(java.lang.String)> r0.label = r1,r0 (AlternativeBlock.setLabel));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i4 = $r4.guessing,$r4 (ANTLRParser.rule));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.TokenQueue: void expand()> r0.sizeLessOne = $i4,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.sizeLessOne = $i1,r0 (TokenQueue.init));true;-1;true;true;483;false;true;302;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> r0.nMarkers = $i1,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.nMarkers = varReplacer1603,r0 (TokenBuffer.<init>));true;-1;true;true;437;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r2 = r0.head,r0 (LList.top));true;-1;true;true;344;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i2 = $r2.guessing,$r2 (ANTLRParser.ast_type_spec));true;-1;true;true;246;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r16 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;237;false;true;24;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r69 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;282;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r6 = r0.tool,r0 (MakeGrammar.refExceptionHandler));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;230;false;true;104;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;352;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r2 = r0.blocks,r0 (MakeGrammar.endTree));true;-1;true;true;257;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i6 = $r3.guessing,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;343;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r6.block = $r5,$r6 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r8 = $r7.block,$r7 (MakeGrammar.endRule));true;-1;true;true;850;false;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> r0.line = $i3,r0 (TokenRangeElement.<init>));true;-1;true;true;318;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;262;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mARG_ACTION));true;-1;true;true;799;false;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r3 = r0.bits,r0 (BitSet.orInPlace));false;0;false;true;234;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;264;false;true;12;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $r1 = r0.buffer,r0 (CharQueue.elementAt));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r27 = r0.antlrTool,r0 (Tool.preprocess));true;22;false;true;209;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r81 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;385;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r19 = r0.ruleBlock,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;303;false;true;-1;true
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.LLkParser: int LA(int)> $r1 = r0.inputState,r0 (LLkParser.LA));true;-1;true;true;254;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i15 = $r9.guessing,$r9 (ANTLRParser.classDef));true;-1;true;true;332;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r15 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;320;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r27 = r0.tool,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;225;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.parserOptionsSpec));true;-1;true;true;243;false;true;2;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $r7 = r0.inputState,r0 (ANTLRParser.qualifiedID));true;525;false;true;213;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r147 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> r0.nested = $i1,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;240;false;true;890;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r16 = $r15.block,$r15 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i2 = $r2.guessing,$r2 (ANTLRParser.id));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r97 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;238;false;true;11;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;241;false;true;26;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;743;false;true;163;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;267;false;true;26;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1 = r0.inputState,r0 (CharScanner.setColumn));true;-1;true;true;748;false;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r117 = $r116.importVocab,$r116 (DefineGrammarSymbols.endOptions));true;-1;true;true;342;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i6,r0 (Tool.processArguments));true;25;false;true;209;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r12 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.notTerminal));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.length = $i5,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: int length()> $i0 = r0.length,r0 (ANTLRStringBuffer.length));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i5 = $r12.guessing,$r12 (ANTLRParser.grammar));true;-1;true;true;337;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r1 = r0.grammar,r0 (MakeGrammar.abortGrammar));true;-1;true;true;312;false;true;4;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r3 = r0.inputState,r0 (ANTLRParser.rule));true;513;false;true;209;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r108 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;261;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;245;false;true;528;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r15 = r0.atomText,r0 (StringLiteralElement.<init>));true;109;false;true;212;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refMemberAction(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.refMemberAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;739;false;true;407;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r54 = $r52.antlrTool,$r52 (RuleBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refInitAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refInitAction));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object elementAt(int)> $r2 = r0.data,r0 (Vector.elementAt));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;244;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i1 = $r2.guessing,$r2 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;249;false;true;106;false
BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(int)> $r7 = r0.literals,r0 (CharScanner.testLiteralsTable));BackwardQuery: (<antlr.ANTLRLexer: void <init>(antlr.LexerSharedInputState)> r0.literals = $r2,r0 (ANTLRLexer.<init>));true;-1;true;true;742;false;true;584;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r114 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));false;0;false;true;232;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $z2 = $r10.caseSensitive,$r10 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2657,r0 (LexerGrammar.setOption));true;-1;true;true;611;false;true;149;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r18 = r0.grammar,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;582;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.tokenType = varReplacer2150,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.tokenType = $i4,r0 (StringLiteralElement.<init>));true;106;false;true;213;false;true;0;false
BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $i0 = r0.altNum,r0 (BlockContext.currentAlt));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r8.altNum = varReplacer2254,$r8 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;18;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.symbols = $r5,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: boolean verifyThatHierarchyIsComplete()> $r17 = r0.symbols,r0 (Hierarchy.verifyThatHierarchyIsComplete));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r17 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;240;false;true;838;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;294;false;true;5;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.generateAmbigWarnings = varReplacer2237,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2589,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i1 = r2.type,r2 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r30 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;283;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r7 = $r6.block,$r6 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.length = varReplacer1586,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $i0 = r0.length,r0 (LList.insertHead));true;-1;true;true;344;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;26;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2247,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.headerAction = varReplacer1854,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: void addHeaderAction(java.lang.String)> r0.headerAction = $r8,r0 (GrammarFile.addHeaderAction));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i8 = $r11.guessing,$r11 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;281;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r15 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;360;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setMemberAction(java.lang.String)> r0.memberAction = r1,r0 (Grammar.setMemberAction));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(java.lang.String,antlr.preprocessor.Grammar)> $r3 = r0.memberAction,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r13 = $r12.exportVocab,$r12 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));true;-1;true;true;653;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i0 = $r3.guessing,$r3 (ANTLRParser.throwsSpec));true;-1;true;true;331;false;true;5;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r6 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.TokenQueue: void expand()> r0.sizeLessOne = $i4,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $i2 = r0.sizeLessOne,r0 (TokenQueue.elementAt));true;-1;true;true;807;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i11 = $r39.guessing,$r39 (ANTLRParser.rule));true;-1;true;true;280;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r32 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;278;false;true;29;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r39 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;423;false;true;4;false
BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z0 = r0.genDiagnostics,r0 (Tool.getLanguage));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDiagnostics = varReplacer1881,r0 (Tool.processArguments));false;0;false;true;280;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: void <init>(antlr.TokenStream,int)> r0.tokenNames = $r2,r0 (Preprocessor.<init>));BackwardQuery: (<antlr.Parser: void match(int)> $r2 = r0.tokenNames,r0 (Parser.match));true;-1;true;true;255;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r30 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;265;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r146 = $r144.exportVocab,$r144 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;529;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r20 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;277;false;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String getArgs()> $r1 = r0.args,r0 (Rule.getArgs));BackwardQuery: (<antlr.preprocessor.Rule: void setArgs(java.lang.String)> r0.args = r1,r0 (Rule.setArgs));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r30 = r0.tool,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));false;0;false;true;234;false;true;26;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.testLiterals = varReplacer2288,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.testLiterals = varReplacer2572,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = varReplacer2176,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i2 = $r2.guessing,$r2 (ANTLRParser.id));true;-1;true;true;315;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $r6 = r0.inputState,r0 (ANTLRParser.lexerOptionsSpec));true;520;false;true;232;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r9 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;258;false;true;11;false
BackwardQuery: (<antlr.ANTLRStringBuffer: char[] getBuffer()> $r1 = r0.buffer,r0 (ANTLRStringBuffer.getBuffer));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.buffer = r1,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: int length()> $r2 = r0.s,r0 (ANTLRHashString.length));BackwardQuery: (<antlr.ANTLRHashString: void setBuffer(char[],int)> r0.s = varReplacer3199,r0 (ANTLRHashString.setBuffer));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;356;false;true;13;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: antlr.Token LT(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.LT));true;-1;true;true;518;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i2 = $r6.guessing,$r6 (ANTLRParser.throwsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;265;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refMemberAction(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.refMemberAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;261;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.line = $i0,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.GrammarElement: int getLine()> $i0 = r0.line,r0 (GrammarElement.getLine));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i1 = $r2.guessing,$r2 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;421;false;true;92;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r9 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;236;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $i1 = $r5.maxk,$r5 (AlternativeBlock.prepareForAnalysis));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genHTML = varReplacer1901,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z1 = r0.genHTML,r0 (Tool.getLanguage));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.filterMode = varReplacer2440,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.filterMode = varReplacer2671,r0 (LexerGrammar.setOption));true;-1;true;true;521;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r27 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;426;false;true;-1;true
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.numToConsume = varReplacer1611,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $i0 = r0.numToConsume,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void <init>(antlr.LexerSharedInputState)> r0.caseSensitiveLiterals = varReplacer1842,r0 (PreprocessorLexer.<init>));BackwardQuery: (<antlr.CharScanner: boolean getCaseSensitiveLiterals()> $z0 = r0.caseSensitiveLiterals,r0 (CharScanner.getCaseSensitiveLiterals));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i1 = $r2.guessing,$r2 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;238;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;725;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;734;false;true;53;false
BackwardQuery: (<antlr.CharScanner: void resetText()> $i0 = $r2.column,$r2 (CharScanner.resetText));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.column = varReplacer1623,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionSpecNoLabel));true;-1;true;true;242;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.length = varReplacer1586,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: int height()> $i0 = r0.length,r0 (LList.height));true;-1;true;true;463;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2587,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i1 = $r1.guessing,$r1 (ANTLRParser.setBlockElement));true;-1;true;true;320;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i12 = $r30.guessing,$r30 (ANTLRParser.range));true;-1;true;true;298;false;true;5;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r13,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r1 = r0.grammar,r0 (MakeGrammar.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;741;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r46 = $r45.exportVocab,$r45 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;476;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r9 = $r8.block,$r8 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r147 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.RecognitionException: java.lang.String toString()> $r3 = r0.fileName,r0 (RecognitionException.toString));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String)> r0.fileName = varReplacer2260,r0 (RecognitionException.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i2 = r0.nbrEntries,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));true;-1;true;true;475;false;true;305;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r3 = $r2.block,$r2 (MakeGrammar.setUserExceptions));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r32 = r0.tool,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;246;false;true;11;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r91 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;88;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;739;false;true;229;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;776;false;true;825;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r9 = r0.blocks,r0 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;242;false;true;26;false
BackwardQuery: (<antlr.CharRangeElement: void <init>(antlr.LexerGrammar,antlr.Token,antlr.Token,int)> r0.autoGenType = i0,r0 (CharRangeElement.<init>));BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar)> r0.autoGenType = varReplacer2168,r0 (AlternativeElement.<init>));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r2 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;263;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mBANG));true;-1;true;true;942;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;746;false;true;115;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r38 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));false;0;false;true;224;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r15 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;397;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r97 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;409;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r38 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;394;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r123 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;311;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: java.lang.String getText()> $r1 = r0.text,r0 (CharScanner.getText));true;-1;true;true;790;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r117 = $r116.importVocab,$r116 (DefineGrammarSymbols.endOptions));false;0;false;true;479;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));true;-1;true;true;232;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;791;false
BackwardQuery: (<antlr.MakeGrammar: void refMemberAction(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.refMemberAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;344;false;true;18;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $r1 = r0.inputState,r0 (ANTLRParser.elementOptionSpec));true;539;false;true;210;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r4 = r0.blocks,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;224;false;true;461;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r13 = r0.tool,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;226;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;274;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $i0 = r0.maxToken,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.maxToken = varReplacer2362,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r30 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;237;false;true;11;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r148 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;333;false;true;649;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;318;false;true;988;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i1 = $r1.guessing,$r1 (ANTLRParser.ast_type_spec));true;-1;true;true;312;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;273;false;true;8;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.expecting = i0,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $i1 = r0.expecting,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $i11 = r0.nargs,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));true;29;false;true;242;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r21 = $r19.antlrTool,$r19 (RuleBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r23 = r0.inputState,r0 (ANTLRParser.classDef));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;483;false;true;209;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i1 = $r1.guessing,$r1 (ANTLRParser.ast_type_spec));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r14 = r0.antlrTool,r0 (LexerGrammar.setOption));true;-1;true;true;593;false;true;3;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.defaultErrorHandler = varReplacer2686,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2390,r0 (Grammar.<init>));true;-1;true;true;480;false;true;76;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammarError = varReplacer1583,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void endGrammar()> $z0 = r0.grammarError,r0 (MakeGrammar.endGrammar));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r13 = r0.atomText,r0 (StringLiteralElement.<init>));true;107;false;true;227;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i1 = $r1.guessing,$r1 (ANTLRParser.optionValue));true;-1;true;true;251;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;436;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.offset = varReplacer1606,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.offset = $i3,r0 (TokenQueue.removeFirst));true;-1;true;true;643;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r71 = $r70.exportVocab,$r70 (DefineGrammarSymbols.endOptions));true;-1;true;true;740;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refCharRange));true;-1;true;true;300;false;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r17 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;240;false;true;432;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refTokenRange));true;-1;true;true;236;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r19 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;318;false;true;-1;true
BackwardQuery: (<antlr.CharScanner: void newline()> $r1 = r0.inputState,r0 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;732;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r15 = $r14.block,$r14 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void addElementToCurrentAlt(antlr.AlternativeElement)> $r3 = $r2.ruleName,$r2 (MakeGrammar.addElementToCurrentAlt));true;-1;true;true;340;false;true;13;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i2 = $r2.guessing,$r2 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;237;false;true;61;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;62;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;264;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> $i2 = r0.lastElement,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i3 = $r7.guessing,$r7 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;242;false;true;90;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r4 = r0.tool,r0 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;221;false;true;883;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r16 = $r15.importVocab,$r15 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;470;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2583,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z4 = r1.greedy,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r4 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;437;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r81 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i6 = $r3.guessing,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r112 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> $i0 = r0.offset,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.offset = varReplacer1618,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.TokenQueue: void expand()> $r3 = r0.buffer,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));true;-1;true;true;657;false;true;343;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r17 = r0.tool,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;297;false;true;-1;true
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.TreeWalkerGrammar: void processArguments(java.lang.String[])> $r5 = r0.antlrTool,r0 (TreeWalkerGrammar.processArguments));true;-1;true;true;559;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r32 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;245;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i1 = $r2.guessing,$r2 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;240;false;true;3;false
BackwardQuery: (<antlr.CharQueue: void expand()> $r4 = r0.buffer,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> r0.tmp_file = varReplacer3669,r0 (PreservingFileWriter.close));false;0;false;true;237;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r27 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;807;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;236;false;true;6;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r5 = r0.grammar,r0 (AlternativeBlock.prepareForAnalysis));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> $i1 = r2.type,r2 (RuleRefElement.<init>));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i2 = $r1.guessing,$r1 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;249;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r22 = r0.tool,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;223;false;true;477;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $r1 = r0.inputState,r0 (ANTLRParser.alternative));true;491;false;true;236;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedySet = varReplacer2243,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2595,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r58 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.expanded = varReplacer1853,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: void generateExpandedFile()> $z0 = r0.expanded,r0 (GrammarFile.generateExpandedFile));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (InputBuffer.syncConsume));BackwardQuery: (<antlr.CharBuffer: void fill(int)> $i1 = r0.markerOffset,r0 (CharBuffer.fill));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;267;false;true;437;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> $r4 = r0.text,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;776;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r15 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.language = varReplacer1588,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $r2 = r1.language,r1 (Tool.getLanguage));false;759;false;true;212;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.AlternativeBlock: void addAlternative(antlr.Alternative)> $r2 = r0.alternatives,r0 (AlternativeBlock.addAlternative));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i2 = $r6.guessing,$r6 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;246;false;true;89;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r32 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;237;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));false;0;false;true;238;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;729;false;true;168;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r148 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;806;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i2 = $r1.guessing,$r1 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i4 = $r2.guessing,$r2 (ANTLRParser.tokensSpec));true;-1;true;true;233;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setHierarchy(antlr.preprocessor.Hierarchy)> r0.hier = r1,r0 (Grammar.setHierarchy));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r9 = r0.hier,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mTOKEN_REF));true;-1;true;true;726;false;true;1;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> $i4 = r0.nbrEntries,r0 (TokenQueue.removeFirst));true;-1;true;true;475;false;true;0;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> r0.nbrEntries = $i8,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> $i4 = r0.nbrEntries,r0 (TokenQueue.removeFirst));true;-1;true;true;736;false;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r3 = r0.head,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;342;false;true;374;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mNEWLINE));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.line = $i3,r0 (CharLiteralElement.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void block()> $r2 = r0.inputState,r0 (ANTLRParser.block));true;485;false;true;213;false;true;0;false
BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> $r9 = r0.grammar,r0 (TokenRangeElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.subruleOptionsSpec));true;-1;true;true;231;false;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> $r40 = r0.antlrTool,r0 (ImportVocabTokenManager.<init>));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));false;0;false;true;216;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r9 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));true;-1;true;true;234;false;true;99;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginChildList()> $r3 = $r1.block,$r1 (MakeGrammar.beginChildList));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.length = varReplacer1586,r0 (LList.<init>));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.length = $i1,r0 (LList.insertHead));true;-1;true;true;346;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.ignoreRule = $r40,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.RuleBlock: java.lang.String getIgnoreRule()> $r1 = r0.ignoreRule,r0 (RuleBlock.getIgnoreRule));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;234;false;true;3;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.parserOptionsSpec));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;825;false;true;215;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r18 = $r17.block,$r17 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r146 = $r144.exportVocab,$r144 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));true;-1;true;true;477;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;737;false;true;753;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r10 = r0.grammar,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;246;false;true;40;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.greedySet = varReplacer2180,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2598,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $r13 = r0.behavior,r0 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;436;false;true;213;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r1 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));true;-1;true;true;225;false;true;93;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mTOKEN_REF));true;-1;true;true;753;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i1 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i8,r0 (Tool.processArguments));true;29;false;true;220;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r77 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i28 = $r40.guessing,$r40 (ANTLRParser.classDef));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refElementOption(antlr.Token,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.refElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;239;false;true;274;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r46 = $r45.exportVocab,$r45 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;478;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> $r3.next = r1,$r3 (Alternative.addElement));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r9 = r3.next,r3 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;176;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i6 = $r14.guessing,$r14 (ANTLRParser.terminal));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setFileName(java.lang.String)> r0.fileName = r1,r0 (Grammar.setFileName));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String getFileName()> $r1 = r0.fileName,r0 (Grammar.getFileName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $i2 = r0.nargs,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i8,r0 (Tool.processArguments));true;25;false;true;229;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r14 = r0.inputState,r0 (ANTLRParser.terminal));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;689;false;true;275;false;true;229;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i1 = $r4.guessing,$r4 (ANTLRParser.throwsSpec));true;-1;true;true;286;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $r1 = r0.inputState,r0 (ANTLRParser.id));true;627;false;true;258;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r2 = $r1.exportVocab,$r1 (DefineGrammarSymbols.endOptions));true;-1;true;true;547;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r122 = $r121.exportVocab,$r121 (DefineGrammarSymbols.endOptions));true;-1;true;true;548;false;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r38 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;287;false;true;7;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i16 = $r38.guessing,$r38 (ANTLRParser.ebnf));true;-1;true;true;286;false;true;0;false
BackwardQuery: (<antlr.RecognitionException: java.lang.String toString()> $i0 = r0.column,r0 (RecognitionException.toString));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String,java.lang.String,int,int)> r0.column = i1,r0 (RecognitionException.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r27 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;737;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;735;false;true;205;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10.comment = r4,$r10 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10.comment = r4,$r10 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;476;false;false;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i0 = $r1.guessing,$r1 (ANTLRParser.tree));true;-1;true;true;243;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;313;false;true;909;false
BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.fileOptionsSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;225;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i15 = $r50.guessing,$r50 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;235;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i16 = $r38.guessing,$r38 (ANTLRParser.ebnf));true;-1;true;true;235;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r5 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2439,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2390,r0 (Grammar.<init>));true;-1;true;true;375;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r28 = r0.inputState,r0 (ANTLRParser.ebnf));true;519;false;true;216;false;true;0;false
BackwardQuery: (<antlr.BlockContext: antlr.AlternativeElement currentElement()> $r2 = $r1.tail,$r1 (BlockContext.currentElement));BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> r0.tail = r1,r0 (Alternative.addElement));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r50 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;230;false;true;0;false
BackwardQuery: (<antlr.Token: int getType()> $i0 = r0.type,r0 (Token.getType));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r11 = $r10.tokenManager,$r10 (DefineGrammarSymbols._refStringLiteral));true;-1;true;true;496;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;241;false;true;24;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i3 = $r3.guessing,$r3 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;397;false;true;22;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i12,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));true;25;false;true;215;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r11 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z1 = r1.hasAnAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.hasAnAction = varReplacer2244,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r78 = $r77.exportVocab,$r77 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;489;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r9 = r0.tool,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;223;false;true;473;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i14 = $r37.guessing,$r37 (ANTLRParser.ebnf));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $r4 = r0.inputState,r0 (ANTLRParser.parserSpec));true;467;false;true;209;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i8 = $r11.guessing,$r11 (ANTLRParser.rule));true;-1;true;true;234;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r105 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;243;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r47 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r47 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r36 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;214;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.files = $r6,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: void addGrammarFile(antlr.preprocessor.GrammarFile)> $r2 = r0.files,r0 (Hierarchy.addGrammarFile));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z0 = r1.hasASynPred,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8.hasASynPred = varReplacer2223,$r8 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tree()> $r6 = r0.inputState,r0 (ANTLRParser.tree));true;482;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r3 = r0.behavior,r0 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;450;false;true;211;false;true;116;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = $r4,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r23 = r0.tokenText,r0 (MismatchedTokenException.getMessage));false;3;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i4 = r0.sizeLessOne,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.sizeLessOne = $i1,r0 (TokenQueue.init));true;-1;true;true;480;false;true;328;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.hasSyntacticPredicate = varReplacer2384,r0 (Grammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r11.hasSyntacticPredicate = varReplacer2229,$r11 (MakeGrammar.endSubRule));true;-1;true;true;551;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;312;false;true;11;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r5 = r1.bits,r1 (BitSet.orInPlace));false;0;false;false;242;false;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r31 = $r29.exportVocab,$r29 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));false;0;false;true;480;false;true;0;false
BackwardQuery: (<antlr.Parser: antlr.ParserSharedInputState getInputState()> $r1 = r0.inputState,r0 (Parser.getInputState));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;384;false;true;215;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;738;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;739;false;true;181;false
BackwardQuery: (<antlr.preprocessor.Rule: void setReturnValue(java.lang.String)> r0.returnValue = r1,r0 (Rule.setReturnValue));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r8 = r0.returnValue,r0 (Rule.toString));false;40;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r18 = r0.grammar,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;891;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.AlternativeBlock: antlr.collections.impl.Vector getAlternatives()> $r1 = r0.alternatives,r0 (AlternativeBlock.getAlternatives));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> $i0 = r0.offset,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void expand()> r0.offset = varReplacer2943,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r17 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;244;false;true;453;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i3 = $r10.guessing,$r10 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;237;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i2 = r2.type,r2 (MakeGrammar.refRule));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r3 = r0.alternatives,r0 (AlternativeBlock.prepareForAnalysis));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: antlr.BlockContext context()> $r2 = r0.blocks,r0 (MakeGrammar.context));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;228;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $r2 = r1.language,r1 (Tool.getLanguage));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> r0.language = $r74,r0 (DefineGrammarSymbols.setFileOption));false;0;false;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r110 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));false;975;false;true;285;false;true;0;false
BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $i4 = r0.markerOffset,r0 (InputBuffer.syncConsume));BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.markerOffset = varReplacer1613,r0 (InputBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i2 = $r2.guessing,$r2 (ANTLRParser.id));true;-1;true;true;239;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> $r12 = r1.exportVocab,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;550;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;244;false;true;9;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharBuffer: void fill(int)> $i3 = $r2.nbrEntries,$r2 (CharBuffer.fill));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i11 = $r28.guessing,$r28 (ANTLRParser.ebnf));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r56 = $r55.exportVocab,$r55 (DefineGrammarSymbols.endOptions));true;-1;true;true;496;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i3 = $r3.guessing,$r3 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;424;false;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rootNode()> $i4 = $r6.guessing,$r6 (ANTLRParser.rootNode));true;-1;true;true;381;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r3 = r0.grammar,r0 (MakeGrammar.endChildList));true;-1;true;true;313;false;true;32;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));false;1;false;true;617;false;true;182;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r8 = r0.behavior,r0 (ANTLRParser.ebnf));true;456;false;true;220;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r5 = r0.alternatives,r0 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.numLexers = $i2,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numLexers = varReplacer1590,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;228;false;true;9;false
BackwardQuery: (<antlr.CharScanner: void newline()> $i0 = $r1.line,$r1 (CharScanner.newline));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.line = varReplacer1622,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i16 = $r38.guessing,$r38 (ANTLRParser.ebnf));true;-1;true;true;252;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r10 = $r9.block,$r9 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r18 = $r17.block,$r17 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));true;-1;true;true;966;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r4 = $r3.block,$r3 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.autoGenType = i0,r0 (CharLiteralElement.<init>));BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.autoGenType = i0,r0 (AlternativeElement.<init>));true;-1;true;true;334;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.antlrTool = r1,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r28 = r0.antlrTool,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i3 = $r2.guessing,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;278;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r49 = $r48.exportVocab,$r48 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;537;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z1 = r1.hasAnAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3.hasAnAction = varReplacer2265,$r3 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;786;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r125 = $r124.exportVocab,$r124 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;530;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;266;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r25 = r0.tmp_file,r0 (PreservingFileWriter.close));BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));false;6;false;true;255;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i41 = $r67.guessing,$r67 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;224;false;true;403;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r13 = $r12.exportVocab,$r12 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;486;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $r2 = r0.behavior,r0 (ANTLRParser.exceptionHandler));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;456;false;true;213;false;true;23;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r77 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;291;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r4 = r0.data,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $z0 = r2.not,r2 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2247,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void block()> r0.blockNesting = $i3,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.blockNesting = varReplacer1576,r0 (ANTLRParser.<init>));true;507;false;true;377;false;true;20;false
BackwardQuery: (<antlr.preprocessor.Rule: void setReturnValue(java.lang.String)> r0.returnValue = r1,r0 (Rule.setReturnValue));BackwardQuery: (<antlr.preprocessor.Rule: boolean sameSignature(antlr.preprocessor.Rule)> $r5 = r0.returnValue,r0 (Rule.sameSignature));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));false;0;false;true;213;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.CharScanner: java.lang.String getFilename()> $r1 = r0.inputState,r0 (CharScanner.getFilename));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;737;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r15 = r0.behavior,r0 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;497;false;true;340;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;779;false;true;-1;true
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r10 = $r9.tokenManager,$r9 (DefineGrammarSymbols._refToken));true;-1;true;true;480;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $i0 = r1.line,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.line = varReplacer2169,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r20 = r0.atomText,r0 (StringLiteralElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));false;0;false;true;233;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r39 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;233;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;248;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void consume()> $r5 = r0.inputState,r0 (CharScanner.consume));true;-1;true;true;743;false;true;1;false
BackwardQuery: (<antlr.ExceptionSpec: void <init>(antlr.Token)> r0.label = r1,r0 (ExceptionSpec.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r4 = r1.label,r1 (RuleBlock.addExceptionSpec));true;-1;true;true;340;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r21 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;263;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r8 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;769;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedy = $z4,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2590,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r6 = $r5.block,$r5 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13.block = $r15,$r13 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void define(antlr.RuleSymbol)> $r2 = r0.rules,r0 (Grammar.define));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.rules = $r8,r0 (Grammar.<init>));true;-1;true;true;342;false;true;674;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r62 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;722;false;true;198;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.line = varReplacer2169,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String,int,boolean)> r0.line = i0,r0 (RuleBlock.<init>));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.classMemberAction = $r5,r0 (Grammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refMemberAction(antlr.Token)> $r2.classMemberAction = r1,$r2 (MakeGrammar.refMemberAction));true;-1;true;true;341;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2 = r0.inputState,r0 (ANTLRParser.classDef));true;694;false;true;236;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: int getColumn()> $i0 = r0.column,r0 (GrammarElement.getColumn));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.column = $i1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.defaultErrorHandler = varReplacer2283,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.defaultErrorHandler = varReplacer2565,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;17;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.line = $i7,r0 (StringLiteralElement.<init>));true;-1;true;true;272;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $r3 = r0.queue,r0 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.queue = $r2,r0 (TokenBuffer.<init>));true;-1;true;true;434;false;true;301;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i6 = $r16.guessing,$r16 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;285;false;true;134;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i0 = $r2.guessing,$r2 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;224;false;true;57;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r4 = r1.block,r1 (MakeGrammar.endTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> $r5 = r0.data,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r5 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: int hashCode()> $r2 = r0.lexer,r0 (ANTLRHashString.hashCode));BackwardQuery: (<antlr.ANTLRHashString: void <init>(java.lang.String,antlr.CharScanner)> r0.lexer = r2,r0 (ANTLRHashString.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $r5 = r0.behavior,r0 (ANTLRParser.throwsSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;447;false;true;209;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i7 = $r14.guessing,$r14 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;239;false;true;61;false
BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $r3 = r0.behavior,r0 (ANTLRParser.notTerminal));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;470;false;true;209;false;true;92;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;747;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r149 = $r148.exportVocab,$r148 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;473;false;true;0;false
BackwardQuery: (<antlr.LLkParser: antlr.Token LT(int)> $r1 = r0.inputState,r0 (LLkParser.LT));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;-1;true;true;212;false;true;95;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;241;false;true;5;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> $r6 = r0.text,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;755;false;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r43 = $r41.antlrTool,$r41 (RuleBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.Option: java.lang.String getName()> $r1 = r0.name,r0 (Option.getName));BackwardQuery: (<antlr.preprocessor.Option: void <init>(java.lang.String,java.lang.String,antlr.preprocessor.Grammar)> r0.name = r1,r0 (Option.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2583,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedy = $z4,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;247;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;228;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r3 = r0.behavior,r0 (ANTLRParser.range));true;457;false;true;214;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r34 = r0.tool,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;229;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r5 = r0.ruleBlock,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;315;false;true;506;false
BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $i2 = r0.numToConsume,r0 (InputBuffer.syncConsume));BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.numToConsume = varReplacer1611,r0 (InputBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = varReplacer1669,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r4 = r0.buffer,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i4 = r0.blockNesting,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.blockNesting = varReplacer1576,r0 (ANTLRParser.<init>));true;448;false;true;210;false;true;18;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r18 = r0.grammar,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;520;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i1 = $r1.guessing,$r1 (ANTLRParser.alternative));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;239;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;236;false;true;6;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r19 = $r17.antlrTool,$r17 (RuleBlock.addExceptionSpec));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i1 = r2.type,r2 (MakeGrammar.refRule));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> $r6 = r0.text,r0 (PreprocessorLexer.mALT));true;-1;true;true;722;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;242;false;true;634;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.buildAST = varReplacer2396,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.buildAST = varReplacer2617,r0 (ParserGrammar.setOption));true;-1;true;true;474;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r8 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;244;false;true;731;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ExceptionSpec: void <init>(antlr.Token)> r0.label = r1,r0 (ExceptionSpec.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r5 = r1.label,r1 (RuleBlock.addExceptionSpec));true;-1;true;true;341;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;949;false;true;313;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r10 = r0.grammar,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;285;false;true;43;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i5 = $r8.guessing,$r8 (ANTLRParser.range));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;268;false;true;604;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;731;false;true;748;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i15 = $r9.guessing,$r9 (ANTLRParser.classDef));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;341;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;744;false;true;-1;true
BackwardQuery: (<antlr.collections.impl.IndexedVector: void appendElement(java.lang.Object,java.lang.Object)> $r4 = r0.index,r0 (IndexedVector.appendElement));BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>()> r0.index = $r2,r0 (IndexedVector.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.nMarkers = varReplacer1612,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> $i1 = r0.nMarkers,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $i7 = r0.maxk,r0 (Grammar.setOption));true;-1;true;true;635;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i2 = r0.blockNesting,r0 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.blockNesting = varReplacer1576,r0 (ANTLRParser.<init>));true;507;false;true;254;false;true;21;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i2 = $r3.guessing,$r3 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;754;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r15 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;310;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i11 = $r39.guessing,$r39 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;310;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i42 = $r68.guessing,$r68 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;242;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.ruleOptionsSpec));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> r0.nbrEntries = $i8,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $i3 = $r1.nbrEntries,$r1 (TokenBuffer.fill));true;-1;true;true;736;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r10 = r0.antlrTool,r0 (Grammar.setOption));true;-1;true;true;464;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r4 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;236;false;true;506;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r146 = $r144.exportVocab,$r144 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;490;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;236;false;true;258;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i2 = $r2.guessing,$r2 (ANTLRParser.ast_type_spec));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r92 = $r91.importVocab,$r91 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));true;-1;true;true;474;false;true;0;false
BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $r3 = r0.block,r0 (TreeBlockContext.addAlternativeElement));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;35;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;257;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;895;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r32 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void setRuleOption(antlr.Token,antlr.Token)> $r3 = r0.ruleBlock,r0 (MakeGrammar.setRuleOption));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;239;false;true;14;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i2 = r2.type,r2 (MakeGrammar.refRule));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.hasAnAction = $z1,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z1 = r1.hasAnAction,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.RecognitionException: int getLine()> $i0 = r0.line,r0 (RecognitionException.getLine));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String)> r0.line = varReplacer2259,r0 (RecognitionException.<init>));false;5;false;true;213;false;true;125;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r97 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;240;false;true;2;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i4 = $r6.guessing,$r6 (ANTLRParser.grammar));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r50 = $r49.tokenManager,$r49 (DefineGrammarSymbols.defineToken));true;-1;true;true;483;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i1 = $r3.guessing,$r3 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $i1 = $r5.maxk,$r5 (AlternativeBlock.prepareForAnalysis));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;976;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r16 = r0.tool,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;225;false;true;483;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i1 = r2.type,r2 (MakeGrammar.refRule));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $i1 = r0.offset,r0 (CharQueue.elementAt));BackwardQuery: (<antlr.CharQueue: void expand()> r0.offset = varReplacer2943,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;243;false;true;529;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;807;false;true;313;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $r14 = r0.behavior,r0 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;495;false;true;342;false;true;11;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r15 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;414;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $i0 = r0.nested,r0 (MakeGrammar.beginSubRule));true;-1;true;true;331;false;true;16;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r14 = r0.tool,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;285;false;true;919;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r8 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;294;false;true;5;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.sizeLessOne = $i1,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $i2 = r0.sizeLessOne,r0 (TokenQueue.elementAt));true;-1;true;true;549;false;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r46 = $r45.exportVocab,$r45 (DefineGrammarSymbols.endOptions));true;-1;true;true;406;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i38 = $r64.guessing,$r64 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;419;false;true;102;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r9 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;311;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i0 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;27;false;true;209;false;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i1 = r0.nbrEntries,r0 (TokenQueue.append));true;-1;true;true;471;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.ruleOptionsSpec));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r19 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;23;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));false;0;false;true;235;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.subruleOptionsSpec));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r2 = $r1.block,$r1 (MakeGrammar.beginExceptionGroup));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;238;false;true;780;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i26 = $r36.guessing,$r36 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;238;false;true;52;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i1 = $r2.guessing,$r2 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;237;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.notTerminal));true;-1;true;true;233;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;226;false;true;26;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = varReplacer2176,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $z0 = $r4.not,$r4 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mALT));true;-1;true;true;829;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r12 = r0.grammar,r0 (MakeGrammar.endSubRule));false;0;false;true;293;false;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $r3 = r0.data,r0 (Vector.setElementAt));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r16 = $r15.block,$r15 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $r1 = r0.inputState,r0 (ANTLRParser.exceptionHandler));true;501;false;true;218;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r6 = r0.bits,r0 (BitSet.orInPlace));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;22;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r20 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;226;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i0 = $r1.guessing,$r1 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;246;false;true;30;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionHandler));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2242,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i4 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r21 = r0.antlrTool,r0 (Grammar.setOption));true;-1;true;true;469;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void beginChildList()> $r3 = $r1.block,$r1 (MakeGrammar.beginChildList));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;733;false;true;165;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i1 = $r1.guessing,$r1 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;384;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.TreeWalkerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r11 = r0.antlrTool,r0 (TreeWalkerGrammar.setOption));true;-1;true;true;634;false;true;2;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $i1 = r0.i,r0 (VectorEnumerator.nextElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.i = varReplacer2128,r0 (VectorEnumerator.<init>));true;24;false;true;255;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.LLkParser: void consume()> $r1 = r0.inputState,r0 (LLkParser.consume));true;-1;true;true;255;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r21 = r0.grammar,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;290;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i4 = $r6.guessing,$r6 (ANTLRParser.grammar));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;414;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r55 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;315;false;true;16;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r64 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;585;false;true;224;false;true;45;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i2 = $r6.guessing,$r6 (ANTLRParser.tree));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i3 = r0.length,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.name = r1,r0 (Rule.<init>));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r21 = r0.name,r0 (Rule.toString));false;51;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));true;-1;true;true;621;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;726;false;true;166;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r45 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i20 = $r23.guessing,$r23 (ANTLRParser.classDef));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r9 = r0.grammar,r0 (RuleBlock.addExceptionSpec));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;315;false;true;35;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r46 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;255;false;true;4;false
BackwardQuery: (<antlr.TreeWalkerGrammar: void processArguments(java.lang.String[])> r0.traceRules = varReplacer2424,r0 (TreeWalkerGrammar.processArguments));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.traceRules = varReplacer2398,r0 (Grammar.<init>));true;-1;true;true;547;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r2 = r0.inputState,r0 (ANTLRParser.ebnf));true;563;false;true;260;false;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> $r22 = r0.antlrTool,r0 (ImportVocabTokenManager.<init>));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));false;0;false;true;257;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.namespaceStd = varReplacer1906,r0 (Tool.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r14.namespaceStd = $r15,$r14 (DefineGrammarSymbols.setFileOption));true;-1;true;true;347;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i1 = $r1.guessing,$r1 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;283;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.rules = r4,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r26 = r0.rules,r0 (Grammar.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;720;false;true;-1;true
BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i6 = r1.type,r1 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r14 = r0.args,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> r0.args = r1,r0 (Tool.preprocessedArgList));false;13;false;true;211;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r16 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;267;false;true;10;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i3 = $r7.guessing,$r7 (ANTLRParser.qualifiedID));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r6 = r0.grammar,r0 (MakeGrammar.synPred));true;-1;true;true;246;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r8 = $r7.exportVocab,$r7 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;471;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r21 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;274;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r116 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;250;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;826;false;true;893;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r62 = r0.grammar,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;315;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i2 = $r2.guessing,$r2 (ANTLRParser.id));true;-1;true;true;246;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r9 = r0.behavior,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;586;false;true;278;false;true;123;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.length = $i1,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $i0 = r0.length,r0 (LList.deleteHead));true;-1;true;true;516;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.symbols = $r5,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: boolean verifyThatHierarchyIsComplete()> $r2 = r0.symbols,r0 (Hierarchy.verifyThatHierarchyIsComplete));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i14 = $r37.guessing,$r37 (ANTLRParser.ebnf));true;-1;true;true;228;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refToken));true;-1;true;true;279;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r10 = r0.antlrTool,r0 (LexerGrammar.setOption));true;-1;true;true;479;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r48 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r21 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r3 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ExceptionSpec: void <init>(antlr.Token)> r0.label = r1,r0 (ExceptionSpec.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r2 = r1.label,r1 (RuleBlock.addExceptionSpec));true;-1;true;true;337;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r2 = $r1.block,$r1 (MakeGrammar.beginExceptionGroup));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r62 = r0.grammar,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;239;false;true;546;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r19 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;240;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i3 = r0.lastElement,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;586;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r16 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;290;false;true;642;false
BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> $r2 = r0.bits,r0 (BitSet.setSize));false;0;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;823;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;228;false;true;7;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void append(char)> $r1 = r0.text,r0 (CharScanner.append));true;-1;true;true;744;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;735;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r21 = r0.tool,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;227;false;true;95;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2593,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.warnWhenFollowAmbig = varReplacer2182,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i28 = $r40.guessing,$r40 (ANTLRParser.classDef));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.buildAST = varReplacer2396,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.buildAST = varReplacer2618,r0 (ParserGrammar.setOption));true;-1;true;true;485;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r14 = r0.inputState,r0 (ANTLRParser.ebnf));true;534;false;true;217;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.line = $i0,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.line = varReplacer2169,r0 (GrammarElement.<init>));true;-1;true;true;210;false;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i13 = $r8.guessing,$r8 (ANTLRParser.classDef));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> $r14 = r0.antlrTool,r0 (ImportVocabTokenManager.<init>));true;-1;true;true;209;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;729;false;true;250;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r24 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;223;false;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;744;false;true;313;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i5 = $r14.guessing,$r14 (ANTLRParser.ebnf));true;-1;true;true;230;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r4 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;238;false;true;-1;true
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2595,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedySet = $z5,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (TokenQueue.removeFirst));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i7 = r0.nbrEntries,r0 (TokenQueue.append));true;-1;true;true;734;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r19 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;314;false;true;779;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mSTRING));true;-1;true;true;740;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: void setReturnValue(java.lang.String)> r0.returnValue = r1,r0 (Rule.setReturnValue));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r5 = r0.returnValue,r0 (Rule.toString));false;40;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;279;false;true;265;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r63 = $r62.exportVocab,$r62 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;483;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i12 = $r30.guessing,$r30 (ANTLRParser.range));true;-1;true;true;230;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;752;false;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> r0.lastElement = $i5,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> $i0 = r0.lastElement,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i10 = $r29.guessing,$r29 (ANTLRParser.lexerSpec));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i9 = $r34.guessing,$r34 (ANTLRParser.rule));true;-1;true;true;245;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r21 = r0.grammar,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;243;false;true;-1;true
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i12 = $r30.guessing,$r30 (ANTLRParser.range));true;-1;true;true;242;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.ANTLRHashString: boolean equals(java.lang.Object)> $r2 = r0.lexer,r0 (ANTLRHashString.equals));BackwardQuery: (<antlr.ANTLRHashString: void <init>(java.lang.String,antlr.CharScanner)> r0.lexer = r2,r0 (ANTLRHashString.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> r0.lastElement = i0,r0 (Vector.setElementAt));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r18 = r1.antlrTool,r1 (StringLiteralElement.<init>));true;-1;true;true;354;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r13 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;236;false;true;456;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r121 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> $i1 = r2.type,r2 (RuleRefElement.<init>));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $i0 = r0.mismatchType,r0 (MismatchedTokenException.getMessage));BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.mismatchType = $b3,r0 (MismatchedTokenException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.BlockWithImpliedExitPath: void <init>(antlr.Grammar)> $i0 = $r2.maxk,$r2 (BlockWithImpliedExitPath.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r2 = r1.block,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.length = $i1,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: int height()> $i0 = r0.length,r0 (LList.height));true;-1;true;true;509;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i13 = $r18.guessing,$r18 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r41 = $r40.importVocab,$r40 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;497;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r29 = r0.behavior,r0 (ANTLRParser.classDef));true;425;false;true;214;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i6 = $r3.guessing,$r3 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r10 = r0.ruleBlock,r0 (MakeGrammar.labelElement));true;-1;true;true;240;false;true;26;false
BackwardQuery: (<antlr.CommonToken: java.lang.String toString()> $i1 = r0.line,r0 (CommonToken.toString));BackwardQuery: (<antlr.CommonToken: void setLine(int)> r0.line = i0,r0 (CommonToken.setLine));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r70 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;252;false;true;11;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;894;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;234;false;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;234;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r11 = r0.behavior,r0 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;441;false;true;214;false;true;3;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i1 = $r4.guessing,$r4 (ANTLRParser.qualifiedID));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i5 = $r9.guessing,$r9 (ANTLRParser.terminal));true;-1;true;true;263;false;true;4;false
BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> r0.not = z0,r0 (TokenRefElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.not = varReplacer2152,r0 (GrammarAtom.<init>));true;98;false;true;213;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r5 = r0.tool,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;226;false;true;28;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> $r11 = r0.text,r0 (ANTLRLexer.mACTION));true;-1;true;true;733;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.warnWhenFollowAmbig = $z2,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z2 = r1.warnWhenFollowAmbig,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r19 = r0.antlrTool,r0 (Tool.processArguments));true;22;false;true;206;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.generateAmbigWarnings = $z3,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2589,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i1 = $r6.guessing,$r6 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r8 = r0.exportVocab,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i1 = $r3.guessing,$r3 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;237;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r69 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> $r5 = r0.antlrTool,r0 (ParserGrammar.setOption));true;-1;true;true;467;false;true;2;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;725;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r9 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;739;false;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> $i2 = r0.length,r0 (ANTLRStringBuffer.setLength));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i0 = $r1.guessing,$r1 (ANTLRParser.tree));true;-1;true;true;265;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mXDIGIT));true;-1;true;true;747;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;241;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r3 = r0.bits,r0 (BitSet.orInPlace));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13.block = $r15,$r13 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.text = varReplacer1356,r0 (CommonToken.<init>));BackwardQuery: (<antlr.CommonToken: void setText(java.lang.String)> r0.text = r1,r0 (CommonToken.setText));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> $r47 = r0.inputState,r0 (ANTLRParser.rule));true;484;false;true;210;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2242,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $z0 = r2.not,r2 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i2 = $r2.guessing,$r2 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;227;false;true;15;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r61 = $r60.importVocab,$r60 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));true;-1;true;true;480;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i7 = $r21.guessing,$r21 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;255;false;true;134;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r67 = r0.tool,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;255;false;true;25;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r109 = $r108.exportVocab,$r108 (DefineGrammarSymbols.endOptions));true;-1;true;true;338;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i1 = $r3.guessing,$r3 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;291;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> $i0 = r0.nMarkers,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.nMarkers = $i2,r0 (TokenBuffer.rewind));true;-1;true;true;700;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i1 = $r6.guessing,$r6 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;234;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r5 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r8 = r0.ruleBlock,r0 (MakeGrammar.labelElement));true;-1;true;true;246;false;true;24;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i0 = $r2.guessing,$r2 (ANTLRParser.ebnf));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r4 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;285;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;261;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r2 = r0.buffer,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r46 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;251;false;true;24;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r27 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;236;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String,java.lang.String,int,int)> r0.fileName = r2,r0 (RecognitionException.<init>));BackwardQuery: (<antlr.RecognitionException: java.lang.String getFilename()> $r1 = r0.fileName,r0 (RecognitionException.getFilename));false;31;false;true;214;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r25 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;236;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = $r4,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r9 = r0.tokenText,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> $r6 = r0.text,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r17 = $r16.block,$r16 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;239;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2559,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z3 = r1.generateAmbigWarnings,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;241;false;true;261;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r30 = r0.initAction,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void setInitAction(java.lang.String)> r0.initAction = r1,r0 (Rule.setInitAction));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $r4 = r0.behavior,r0 (ANTLRParser.treeParserOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;438;false;true;213;false;true;3;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refTokenRange));true;-1;true;true;330;false;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i9 = $r25.guessing,$r25 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;314;false;true;117;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i6 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.mismatchType = $b5,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r2 = $r1.block,$r1 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r12 = r0.behavior,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;462;false;true;213;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r13 = $r12.exportVocab,$r12 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;487;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $r17 = r0.behavior,r0 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;439;false;true;216;false;true;2;false
BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r11 = $r9.antlrTool,$r9 (RuleBlock.addExceptionSpec));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r2 = $r1.block,$r1 (MakeGrammar.beginExceptionGroup));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i1 = $r1.guessing,$r1 (ANTLRParser.alternative));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;292;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r20 = r0.tool,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;280;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r21 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;295;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r9 = $r8.tokenManager,$r8 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));true;-1;true;true;566;false;true;36;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r2 = $r1.alternatives,$r1 (BlockContext.currentAlt));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;240;false;true;264;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i0 = r1.type,r1 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r2 = r0.alternatives,r0 (AlternativeBlock.prepareForAnalysis));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r8 = r0.inputState,r0 (ANTLRParser.range));true;586;false;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> $r4 = r0.head,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;346;false;true;364;false
BackwardQuery: (<antlr.TokenQueue: void expand()> r0.buffer = r1,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $r2 = r0.buffer,r0 (TokenQueue.append));true;-1;true;true;750;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.exportVocab = varReplacer1704,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r11,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;180;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r62 = r0.grammar,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;248;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;236;false;true;49;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i8 = $r21.guessing,$r21 (ANTLRParser.terminal));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.greedySet = varReplacer2180,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2595,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $r3 = r0.behavior,r0 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;454;false;true;216;false;true;42;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.length = $i5,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: java.lang.String toString()> $i0 = r0.length,r0 (ANTLRStringBuffer.toString));true;-1;true;true;-1;true;true;570;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;312;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r10 = r0.args,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void setArgs(java.lang.String)> r0.args = r1,r0 (Rule.setArgs));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;746;false;true;744;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.language = varReplacer1588,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> r0.language = $r70,r0 (DefineGrammarSymbols.setFileOption));true;-1;true;true;223;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $i0 = r0.nested,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));true;-1;true;true;246;false;true;76;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r131 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;252;false;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;888;false;true;-1;true
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> $r13 = r0.text,r0 (ANTLRLexer.mACTION));true;-1;true;true;725;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r138 = $r137.importVocab,$r137 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));true;-1;true;true;343;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r3 = r0.blocks,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;453;false;true;894;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r4 = r1.alternatives,r1 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.label = $r4,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: java.lang.String getLabel()> $r1 = r0.label,r0 (AlternativeBlock.getLabel));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> $r8 = r0.text,r0 (ANTLRLexer.mSL_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;748;false;true;164;false
BackwardQuery: (<antlr.preprocessor.Rule: void setVisibility(java.lang.String)> r0.visibility = r1,r0 (Rule.setVisibility));BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r13 = r0.visibility,r0 (Rule.toString));false;39;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;770;false;true;293;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;760;false;true;1;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.numToConsume = varReplacer1611,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> r0.numToConsume = $i3,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refInitAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refInitAction));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $z0 = r0.nextElementIsRoot,r0 (TreeBlockContext.addAlternativeElement));BackwardQuery: (<antlr.TreeBlockContext: void <init>()> r0.nextElementIsRoot = varReplacer2257,r0 (TreeBlockContext.<init>));true;-1;true;true;-1;true;true;36;false
BackwardQuery: (<antlr.MakeGrammar: void refWildcard(antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (MakeGrammar.refWildcard));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;366;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;326;false;true;841;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.subruleOptionsSpec));true;-1;true;true;298;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;323;false;true;36;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i4 = $r4.guessing,$r4 (ANTLRParser.rule));true;-1;true;true;319;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;474;false;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleEnd = varReplacer2401,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleEnd = $r16,r0 (MakeGrammar.defineRuleName));true;-1;true;true;316;false;true;32;false
BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(antlr.preprocessor.Option,antlr.preprocessor.Grammar)> $r6 = r0.options,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r10 = r0.antlrTool,r0 (Tool.processArguments));true;30;false;true;246;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.SimpleTokenManager: void define(antlr.TokenSymbol)> $r2 = r0.vocabulary,r0 (SimpleTokenManager.define));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.vocabulary = $r4,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r10 = $r9.charVocabulary,$r9 (StringLiteralElement.<init>));BackwardQuery: (<antlr.LexerGrammar: void setCharVocabulary(antlr.collections.impl.BitSet)> r0.charVocabulary = r1,r0 (LexerGrammar.setCharVocabulary));true;-1;true;true;475;false;true;226;false
BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.name = r1,r0 (Rule.<init>));BackwardQuery: (<antlr.preprocessor.Rule: boolean sameSignature(antlr.preprocessor.Rule)> $r2 = r0.name,r0 (Rule.sameSignature));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i9 = $r25.guessing,$r25 (ANTLRParser.range));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;226;false;true;574;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.notTerminal));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String,java.lang.String,int,int)> r0.line = i0,r0 (RecognitionException.<init>));BackwardQuery: (<antlr.RecognitionException: int getLine()> $i0 = r0.line,r0 (RecognitionException.getLine));false;29;false;true;210;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r31 = $r29.exportVocab,$r29 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;468;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r9 = r0.blocks,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;230;false;true;892;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> $i1 = r0.sizeLessOne,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.sizeLessOne = $i1,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i0 = $r2.guessing,$r2 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;312;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;763;false;true;162;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mCARET));true;-1;true;true;901;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r15 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r146 = $r144.exportVocab,$r144 (DefineGrammarSymbols.endOptions));true;-1;true;true;342;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $r5 = r0.behavior,r0 (ANTLRParser.notTerminal));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;460;false;true;215;false;true;93;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r22 = $r21.importVocab,$r21 (DefineGrammarSymbols.endOptions));true;-1;true;true;352;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r7 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;264;false;true;315;false
BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.grammarFile = $r7,r0 (Tool.processArguments));BackwardQuery: (<antlr.Tool: java.io.Reader getGrammarReader()> $r2 = r0.grammarFile,r0 (Tool.getGrammarReader));true;-1;true;true;349;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;313;false;true;70;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.preambleAction = $r4,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17.preambleAction = $r16,$r17 (DefineGrammarSymbols.startParser));true;-1;true;true;528;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.RuleBlock: void prepareForAnalysis()> $i0 = $r1.maxk,$r1 (RuleBlock.prepareForAnalysis));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r61 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));true;502;false;true;219;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i3 = $r10.guessing,$r10 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;239;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;726;false;true;168;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r82 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i1 = $r4.guessing,$r4 (ANTLRParser.throwsSpec));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r18 = $r17.block,$r17 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharScanner: void consume()> $z0 = r0.caseSensitive,r0 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitive = varReplacer1666,r0 (CharScanner.<init>));true;-1;true;true;730;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;242;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;241;false;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i1 = $r1.guessing,$r1 (ANTLRParser.id));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r13 = r0.ruleName,r0 (RuleBlock.addExceptionSpec));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));false;0;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRHashString: void setString(java.lang.String)> r0.s = r1,r0 (ANTLRHashString.setString));BackwardQuery: (<antlr.ANTLRHashString: char charAt(int)> $r1 = r0.s,r0 (ANTLRHashString.charAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r6 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CommonToken: java.lang.String getText()> $r1 = r0.text,r0 (CommonToken.getText));BackwardQuery: (<antlr.CommonToken: void setText(java.lang.String)> r0.text = r1,r0 (CommonToken.setText));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void prepareForAnalysis()> $i0 = $r1.maxk,$r1 (RuleBlock.prepareForAnalysis));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.NoViableAltForCharException: java.lang.String getMessage()> $c1 = r0.foundChar,r0 (NoViableAltForCharException.getMessage));BackwardQuery: (<antlr.NoViableAltForCharException: void <init>(char,java.lang.String,int,int)> r0.foundChar = c0,r0 (NoViableAltForCharException.<init>));false;1;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;241;false;true;93;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i0 = $r4.guessing,$r4 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;418;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;312;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r40 = r0.inputState,r0 (ANTLRParser.classDef));true;520;false;true;340;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r107 = $r105.exportVocab,$r105 (DefineGrammarSymbols.endOptions));true;-1;true;true;637;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;244;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.terminal));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;228;false;true;829;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r20 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;238;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r3 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;240;false;true;52;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;237;false;true;726;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;245;false;true;905;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r2 = $r1.block,$r1 (MakeGrammar.beginExceptionGroup));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Rule: java.lang.String toString()> $r63 = r0.args,r0 (Rule.toString));BackwardQuery: (<antlr.preprocessor.Rule: void setArgs(java.lang.String)> r0.args = r1,r0 (Rule.setArgs));false;2;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.LLkParser: void consume()> $r2 = $r1.input,$r1 (LLkParser.consume));BackwardQuery: (<antlr.Parser: void setTokenBuffer(antlr.TokenBuffer)> $r2.input = r1,$r2 (Parser.setTokenBuffer));true;-1;true;true;294;false;true;163;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void readGrammarFile(java.lang.String)> $r14 = r0.antlrTool,r0 (Hierarchy.readGrammarFile));BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.antlrTool = r1,r0 (Hierarchy.<init>));true;-1;true;true;260;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;287;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r88 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;292;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i6 = r0.length,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r11 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;316;false;true;755;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.generateAmbigWarnings = varReplacer2178,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2589,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i9 = $r26.guessing,$r26 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;317;false;true;180;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i1 = $r2.guessing,$r2 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;283;false;true;40;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r6.comment = r4,r6 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10.comment = r4,$r10 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;360;false;false;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.offset = $i3,r0 (TokenQueue.removeFirst));BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $i1 = r0.offset,r0 (TokenQueue.elementAt));true;-1;true;true;758;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r1 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;253;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r55 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;239;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $i11 = r0.nargs,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;25;false;true;214;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setHierarchy(antlr.preprocessor.Hierarchy)> r0.hier = r1,r0 (Grammar.setHierarchy));BackwardQuery: (<antlr.preprocessor.Grammar: antlr.preprocessor.Grammar getSuperGrammar()> $r4 = r0.hier,r0 (Grammar.getSuperGrammar));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i2 = $r2.guessing,$r2 (ANTLRParser.exceptionSpec));true;-1;true;true;234;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r7 = r0.inputState,r0 (ANTLRParser.range));true;500;false;true;209;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refElementOption(antlr.Token,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.refElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;240;false;true;279;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r17 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i3 = $r10.guessing,$r10 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;316;false;true;23;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r22 = $r21.importVocab,$r21 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;552;false;true;1;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.filterMode = varReplacer2665,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.filterMode = varReplacer2440,r0 (LexerGrammar.<init>));true;-1;true;true;548;false;true;21;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refToken));true;-1;true;true;289;false;true;27;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;281;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r3 = r0.grammar,r0 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;325;false;true;735;false
BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i6 = r1.type,r1 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r3 = $r2.block,$r2 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r19 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;346;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r14 = $r13.block,$r13 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r15 = r2.blockEnd,r2 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r19 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;304;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r17 = $r16.tokenManager,$r16 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;514;false;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.buffer = r1,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i10 = $r35.guessing,$r35 (ANTLRParser.rule));true;-1;true;true;409;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genHTML = varReplacer1901,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genHTML = varReplacer1886,r0 (Tool.processArguments));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String tokenName(int)> $r7 = r0.tokenNames,r0 (MismatchedTokenException.tokenName));BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenNames = r1,r0 (MismatchedTokenException.<init>));false;2;false;true;-1;true;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r23 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;270;false;true;27;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i0 = $r2.guessing,$r2 (ANTLRParser.ebnf));true;-1;true;true;254;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i6 = r0.length,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r2 = r0.behavior,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;454;false;true;210;false;true;36;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;314;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r16 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;580;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;314;false;true;551;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i2 = $r2.guessing,$r2 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;235;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i37 = $r61.guessing,$r61 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r48 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;228;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: char elementAt(int)> $i1 = r0.offset,r0 (CharQueue.elementAt));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.offset = varReplacer1618,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;569;false
BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $i4 = $r2.type,$r2 (TokenBuffer.LA));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;153;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.TreeWalkerGrammar: void processArguments(java.lang.String[])> $r4 = r0.antlrTool,r0 (TreeWalkerGrammar.processArguments));true;-1;true;true;466;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void <init>(antlr.LexerSharedInputState)> r0.caseSensitiveLiterals = varReplacer1842,r0 (PreprocessorLexer.<init>));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitiveLiterals = varReplacer1668,r0 (CharScanner.<init>));true;-1;true;true;208;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;245;false;true;526;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.predefined = varReplacer1706,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: boolean isPredefined()> $z0 = r0.predefined,r0 (Grammar.isPredefined));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.name = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String getName()> $r1 = r0.name,r0 (Grammar.getName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.StringLiteralSymbol: java.lang.String getLabel()> $r1 = r0.label,r0 (StringLiteralSymbol.getLabel));BackwardQuery: (<antlr.StringLiteralSymbol: void setLabel(java.lang.String)> r0.label = r1,r0 (StringLiteralSymbol.setLabel));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;315;false;true;775;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r16 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));false;0;false;true;264;false;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i0 = r0.nested,r0 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> r0.nested = $i1,r0 (MakeGrammar.beginSubRule));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.filterMode = varReplacer2649,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.filterMode = varReplacer2440,r0 (LexerGrammar.<init>));true;-1;true;true;470;false;true;19;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refReturnAction));true;-1;true;true;248;false;true;26;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.nested = varReplacer2282,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> r0.nested = $i1,r0 (MakeGrammar.beginSubRule));true;-1;true;true;250;false;true;11;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mACTION));true;-1;true;true;741;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i6 = $r16.guessing,$r16 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;242;false;true;133;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r19 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;313;false;true;855;false
BackwardQuery: (<antlr.SimpleTokenManager: antlr.TokenSymbol getTokenSymbol(java.lang.String)> $r2 = r0.table,r0 (SimpleTokenManager.getTokenSymbol));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.table = $r5,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;147;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $r2 = r0.buffer,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.buffer = $r1,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i10 = $r29.guessing,$r29 (ANTLRParser.lexerSpec));true;-1;true;true;235;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r17 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;332;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i7 = $r14.guessing,$r14 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;313;false;true;120;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;289;false;true;4;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r59 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r14 = $r11.importVocab,$r11 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));true;-1;true;true;496;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i5 = $r14.guessing,$r14 (ANTLRParser.ebnf));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void setFilename(java.lang.String)> $r2 = r0.inputState,r0 (CharScanner.setFilename));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;730;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;744;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r2 = r0.inputState,r0 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;723;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mPLUS));true;-1;true;true;774;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9 = r0.inputState,r0 (ANTLRParser.classDef));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;467;false;true;211;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i5 = $r13.guessing,$r13 (ANTLRParser.notTerminal));true;-1;true;true;340;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r125 = $r124.exportVocab,$r124 (DefineGrammarSymbols.endOptions));true;-1;true;true;578;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refStringLiteral));true;-1;true;true;260;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r17 = r0.behavior,r0 (ANTLRParser.ebnf));true;484;false;true;209;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r20 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;722;false;true;1;false
BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $r8 = r0.tokenObjectClass,r0 (CharScanner.makeToken));BackwardQuery: (<antlr.CharScanner: void setTokenObjectClass(java.lang.String)> r0.tokenObjectClass = $r3,r0 (CharScanner.setTokenObjectClass));false;0;false;true;729;false;true;-1;true
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.className = r1,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: java.lang.String getClassName()> $r1 = r0.className,r0 (Grammar.getClassName));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.NoViableAltForCharException: java.lang.String getMessage()> $c11 = r0.foundChar,r0 (NoViableAltForCharException.getMessage));BackwardQuery: (<antlr.NoViableAltForCharException: void <init>(char,java.lang.String,int,int)> r0.foundChar = c0,r0 (NoViableAltForCharException.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;45;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z5 = r1.greedySet,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedySet = $z5,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;17;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r1 = r0.inputState,r0 (ANTLRParser.classDef));true;592;false;true;214;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void append(char)> $i8 = r0.nbrEntries,r0 (CharQueue.append));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarAtom: int getType()> $i0 = r0.tokenType,r0 (GrammarAtom.getType));BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.tokenType = $i1,r0 (CharLiteralElement.<init>));true;61;false;true;214;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i2 = $r3.guessing,$r3 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> $r7 = r0.text,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;732;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Rule: boolean sameSignature(antlr.preprocessor.Rule)> $r6 = r0.returnValue,r0 (Rule.sameSignature));BackwardQuery: (<antlr.preprocessor.Rule: void setReturnValue(java.lang.String)> r0.returnValue = r1,r0 (Rule.setReturnValue));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> r0.tmp_file = varReplacer3677,r0 (PreservingFileWriter.close));false;0;false;true;207;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> $i0 = r0.lastElement,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r16 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;238;false;true;7;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;734;false;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: boolean member(int)> $r2 = r0.bits,r0 (BitSet.member));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i3 = $r3.guessing,$r3 (ANTLRParser.optionValue));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;897;false;true;370;false
BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r3 = r0.data,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r33 = r0.behavior,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;484;false;true;208;false;true;92;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mESC));true;-1;true;true;728;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i10 = $r28.guessing,$r28 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i2 = $r6.guessing,$r6 (ANTLRParser.throwsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;243;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3.hasAnAction = varReplacer2265,$r3 (MakeGrammar.refAction));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.hasAnAction = varReplacer2244,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.CharScanner: int testLiteralsTable(int)> $r6 = r0.hashString,r0 (CharScanner.testLiteralsTable));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.hashString = $r2,r0 (CharScanner.<init>));true;-1;true;true;766;false;true;812;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r22 = $r21.tokenManager,$r21 (DefineGrammarSymbols.defineToken));true;-1;true;true;477;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r55 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;245;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2664,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $z3 = $r10.caseSensitive,$r10 (MakeGrammar.refCharLiteral));true;-1;true;true;761;false;true;25;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i28 = $r44.guessing,$r44 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;244;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleRefElement: void setLabel(java.lang.String)> r0.label = r1,r0 (RuleRefElement.setLabel));BackwardQuery: (<antlr.RuleRefElement: java.lang.String getLabel()> $r1 = r0.label,r0 (RuleRefElement.getLabel));true;-1;true;true;-1;true;true;50;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;768;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r20 = r0.inputState,r0 (ANTLRParser.lexerSpec));true;471;false;true;214;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r8 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;245;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;389;false;true;262;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r21 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;469;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> $r6 = r0.text,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r12 = r0.grammars,r0 (GrammarFile.toString));BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.grammars = $r3,r0 (GrammarFile.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r16 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;323;false;true;724;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r11 = r0.args,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.args = r2,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;270;false;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r6 = $r5.exportVocab,$r5 (DefineGrammarSymbols.endOptions));true;-1;true;true;751;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r4 = $r3.block,$r3 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;733;false;true;119;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> $r9 = r0.text,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;949;false;true;3;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i4 = r0.markerOffset,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;735;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1.column = i0,$r1 (CharScanner.setColumn));BackwardQuery: (<antlr.CharScanner: void resetText()> $i0 = $r2.column,$r2 (CharScanner.resetText));true;-1;true;true;-1;true;true;134;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r5 = r1.alternatives,r1 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;239;false;true;883;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;235;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i38 = $r64.guessing,$r64 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;415;false;true;80;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i26 = $r36.guessing,$r36 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;314;false;true;5;false
BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $i0 = $r4.lastElement,$r4 (VectorEnumerator.nextElement));true;-1;true;true;-1;true;true;407;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (MakeGrammar.defineRuleName));true;-1;true;true;236;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;237;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.refRule));true;-1;true;true;284;false;true;34;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mBANG));true;-1;true;true;761;false;true;1;false
BackwardQuery: (<antlr.RuleBlock: java.lang.String getRuleName()> $r1 = r0.ruleName,r0 (RuleBlock.getRuleName));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ruleName = r2,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i1 = r0.expecting,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.expecting = c1,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r30 = $r28.antlrTool,$r28 (RuleBlock.setOption));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $r5 = r0.inputState,r0 (ANTLRParser.rule));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;483;false;true;210;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;244;false;true;3;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r56 = $r55.exportVocab,$r55 (DefineGrammarSymbols.endOptions));true;-1;true;true;342;false;true;1;false
BackwardQuery: (<antlr.CharStreamIOException: void <init>(java.io.IOException)> r0.io = r1,r0 (CharStreamIOException.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r14 = $r13.io,$r13 (PreprocessorLexer.nextToken));false;3;false;true;227;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i1 = $r4.guessing,$r4 (ANTLRParser.throwsSpec));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.parserSpec));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r91 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i8 = $r11.guessing,$r11 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;274;false;true;1;false
BackwardQuery: (<antlr.CommonToken: java.lang.String toString()> $i0 = r0.type,r0 (CommonToken.toString));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r122 = $r121.exportVocab,$r121 (DefineGrammarSymbols.endOptions));true;-1;true;true;552;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;253;false;true;950;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r108 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r28 = r0.antlrTool,r0 (Grammar.setOption));true;-1;true;true;469;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.ignoreRule = varReplacer2287,r0 (RuleBlock.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.ignoreRule = $r40,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r123 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i4 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;773;false;true;50;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r107 = $r105.exportVocab,$r105 (DefineGrammarSymbols.endOptions));true;-1;true;true;339;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void block()> $i0 = $r1.guessing,$r1 (ANTLRParser.block));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r12 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;243;false;true;24;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $r4 = r0.inputState,r0 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;477;false;true;222;false;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;7;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: int mark()> $i2 = r0.markerOffset,r0 (TokenBuffer.mark));true;-1;true;true;432;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r3 = r0.tool,r0 (MakeGrammar.beginExceptionGroup));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;235;false;true;14;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;829;false;true;634;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r8 = r0.ruleBlock,r0 (MakeGrammar.labelElement));true;-1;true;true;407;false;true;13;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r45 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;336;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r19 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;287;false;true;13;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r14 = r0.grammar,r0 (StringLiteralElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;256;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i1 = $r2.guessing,$r2 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;282;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.fileName = r2,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String getName()> $r1 = r0.fileName,r0 (GrammarFile.getName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r109 = $r108.exportVocab,$r108 (DefineGrammarSymbols.endOptions));true;-1;true;true;666;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refWildcard(antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (MakeGrammar.refWildcard));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;250;false;true;481;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refArgAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r6 = r0.grammar,r0 (MakeGrammar.synPred));false;0;false;true;236;false;true;5;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2598,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedySet = $z5,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginAlt(boolean)> $r4 = $r3.block,$r3 (MakeGrammar.beginAlt));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r2 = r0.head,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;351;false;true;363;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r10 = $r9.block,$r9 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i2 = $r2.guessing,$r2 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;242;false;true;61;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i0 = $r1.guessing,$r1 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;416;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r4 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;314;false;true;10;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $r3 = r0.vector,r0 (VectorEnumerator.hasMoreElements));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.vector = r1,r0 (VectorEnumerator.<init>));true;27;false;true;241;false;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $i1 = $r5.maxk,$r5 (AlternativeBlock.prepareForAnalysis));false;1;false;true;-1;true;true;74;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r2 = $r1.alternatives,$r1 (BlockContext.currentAlt));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r18 = r0.antlrTool,r0 (LexerGrammar.setOption));true;-1;true;true;470;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i38 = $r64.guessing,$r64 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;223;false;true;408;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r71 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;224;false;true;2;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void add(int)> $r1 = r0.bits,r0 (BitSet.add));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;518;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r25 = $r23.antlrTool,$r23 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i15 = $r9.guessing,$r9 (ANTLRParser.classDef));true;-1;true;true;290;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i1 = $r4.guessing,$r4 (ANTLRParser.qualifiedID));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.symbols = $r6,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: boolean isDefined(java.lang.String)> $r2 = r0.symbols,r0 (Grammar.isDefined));true;-1;true;true;339;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r21 = r0.grammar,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;311;false;true;-1;true
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i4 = $r6.guessing,$r6 (ANTLRParser.grammar));true;-1;true;true;415;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r2 = $r1.blockEnd,$r1 (MakeGrammar.endAlt));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.hasAnAction = $z1,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3.hasAnAction = varReplacer2265,$r3 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ruleOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.ruleOptionsSpec));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: antlr.preprocessor.GrammarFile getFile(java.lang.String)> $r2 = r0.files,r0 (Hierarchy.getFile));BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.files = $r6,r0 (Hierarchy.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;236;false;true;261;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r3 = r0.inputState,r0 (ANTLRParser.lexerSpec));true;471;false;true;208;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r22 = r0.options,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r11 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.language = varReplacer1588,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> r0.language = $r74,r0 (DefineGrammarSymbols.setFileOption));true;-1;true;true;222;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.predefined = varReplacer1706,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void setPredefined(boolean)> r0.predefined = z0,r0 (Grammar.setPredefined));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void expand()> r0.offset = varReplacer3588,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: antlr.Token elementAt(int)> $i1 = r0.offset,r0 (TokenQueue.elementAt));true;-1;true;true;947;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: int length()> $r1 = r0.s,r0 (ANTLRHashString.length));BackwardQuery: (<antlr.ANTLRHashString: void setString(java.lang.String)> r0.s = r1,r0 (ANTLRHashString.setString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;246;false;true;11;false
BackwardQuery: (<antlr.RecognitionException: java.lang.String toString()> $i0 = r0.column,r0 (RecognitionException.toString));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String)> r0.column = varReplacer2258,r0 (RecognitionException.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;236;false;true;7;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r13 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;211;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: java.lang.Object elementAt(int)> $r13 = r0.data,r0 (Vector.elementAt));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r40 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;10;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(antlr.preprocessor.Option,antlr.preprocessor.Grammar)> $r5 = r0.options,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r4 = r0.inputState,r0 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;992;false;true;-1;true
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: void processArguments(java.lang.String[])> $r6 = r0.antlrTool,r0 (LexerGrammar.processArguments));true;-1;true;true;820;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;314;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void addOption(antlr.preprocessor.Option)> r0.options = $r5,r0 (Grammar.addOption));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r12 = r0.options,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r155 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void expand()> r0.offset = varReplacer2943,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.offset = varReplacer1618,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i2 = r2.type,r2 (MakeGrammar.refRule));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;791;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r2 = r0.alternatives,r0 (AlternativeBlock.prepareForAnalysis));BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;745;false;true;169;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r139 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;266;false;true;11;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r3 = r0.head,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));true;-1;true;true;532;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i6 = $r14.guessing,$r14 (ANTLRParser.terminal));true;-1;true;true;534;false;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.parserSpec));true;-1;true;true;313;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;759;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tree()> $r7 = r0.inputState,r0 (ANTLRParser.tree));true;491;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.length = $i5,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;249;false;true;890;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void inherit(antlr.preprocessor.Option,antlr.preprocessor.Grammar)> $r6 = r0.options,r0 (Grammar.inherit));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: antlr.BlockContext context()> $r1 = r0.blocks,r0 (MakeGrammar.context));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));true;-1;true;true;243;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r10 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;243;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i14 = $r37.guessing,$r37 (ANTLRParser.ebnf));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.treeParserSpec));true;-1;true;true;238;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;361;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i8,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;29;false;true;282;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;572;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mPLUS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;904;false;true;225;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i24 = $r39.guessing,$r39 (ANTLRParser.classDef));true;-1;true;true;309;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10.comment = r4,$r10 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.comment = varReplacer2391,r0 (Grammar.<init>));true;-1;true;true;462;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i24 = $r39.guessing,$r39 (ANTLRParser.classDef));true;-1;true;true;296;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r84 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;258;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r8 = r1.bits,r1 (BitSet.orInPlace));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;21;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = varReplacer2696,r0 (Grammar.setOption));BackwardQuery: (<antlr.BlockEndElement: void <init>(antlr.Grammar)> $i0 = r1.maxk,r1 (BlockEndElement.<init>));false;1;false;true;604;false;true;80;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void refArgAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refArgAction));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r25 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;241;false;true;523;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;253;false;true;751;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2439,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.Grammar: boolean getDefaultErrorHandler()> $z0 = r0.defaultErrorHandler,r0 (Grammar.getDefaultErrorHandler));true;-1;true;true;346;false;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r4 = r0.bits,r0 (BitSet.orInPlace));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $i0 = r0.nested,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;238;false;true;889;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i13 = $r18.guessing,$r18 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $r7 = r0.behavior,r0 (ANTLRParser.grammar));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;342;false;true;217;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r36 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;500;false;true;214;false;true;46;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $r3 = r1.initAction,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.initAction = $r3,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token id()> $i1 = $r1.guessing,$r1 (ANTLRParser.id));true;-1;true;true;239;false;true;1;false
BackwardQuery: (<antlr.ExceptionSpec: void <init>(antlr.Token)> r0.label = r1,r0 (ExceptionSpec.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r8 = r1.label,r1 (RuleBlock.addExceptionSpec));true;-1;true;true;341;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i2 = $r2.guessing,$r2 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;275;false;true;2;false
BackwardQuery: (<antlr.ANTLRHashString: int hashCode()> $r2 = r0.lexer,r0 (ANTLRHashString.hashCode));BackwardQuery: (<antlr.ANTLRHashString: void <init>(antlr.CharScanner)> r0.lexer = r1,r0 (ANTLRHashString.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;738;false;true;163;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $r3 = r0.inputState,r0 (ANTLRParser.optionValue));true;525;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> r0.args = r1,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $r16 = r0.args,r0 (Tool.processArguments));false;0;false;true;211;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r106 = r0.tool,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;225;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;772;false;true;275;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r21 = r0.inputState,r0 (ANTLRParser.terminal));true;706;false;true;304;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;293;false;true;9;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r11 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;290;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> r0.language = $r70,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $r2 = r1.language,r1 (Tool.getLanguage));false;901;false;true;272;false;true;2;false
BackwardQuery: (<antlr.preprocessor.Option: java.lang.String toString()> $r3 = r0.name,r0 (Option.toString));BackwardQuery: (<antlr.preprocessor.Option: void <init>(java.lang.String,java.lang.String,antlr.preprocessor.Grammar)> r0.name = r1,r0 (Option.<init>));false;1;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;550;false;true;0;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object top()> $r2 = r0.head,r0 (LList.top));true;-1;true;true;554;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i7 = $r5.guessing,$r5 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;286;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r11 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;-1;true
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitive = varReplacer2444,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $z3 = $r10.caseSensitive,$r10 (MakeGrammar.refCharLiteral));true;-1;true;true;342;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10.comment = r4,$r10 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.comment = varReplacer2391,r0 (Grammar.<init>));true;-1;true;true;354;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i0 = $r2.guessing,$r2 (ANTLRParser.ebnf));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r9 = $r8.block,$r8 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2657,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $z3 = $r10.caseSensitive,$r10 (MakeGrammar.refCharLiteral));true;-1;true;true;606;false;true;18;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r96 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;242;false;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r9 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i6 = $r3.guessing,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;234;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i10 = $r29.guessing,$r29 (ANTLRParser.lexerSpec));true;-1;true;true;245;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void subruleOptionsSpec()> $r4 = r0.behavior,r0 (ANTLRParser.subruleOptionsSpec));true;467;false;true;212;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r66 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.exceptionSpec));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13.block = $r15,$r13 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17.block = r1,$r17 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i7 = $r5.guessing,$r5 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i7 = $r20.guessing,$r20 (ANTLRParser.lexerSpec));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i5 = $r14.guessing,$r14 (ANTLRParser.ebnf));true;-1;true;true;235;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;258;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r149 = $r148.exportVocab,$r148 (DefineGrammarSymbols.endOptions));true;-1;true;true;482;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r5 = r2.block,r2 (MakeGrammar.endRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.hasASynPred = varReplacer2245,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8.hasASynPred = varReplacer2223,$r8 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2559,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.generateAmbigWarnings = varReplacer2237,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;744;false;true;905;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i1 = $r1.guessing,$r1 (ANTLRParser.exceptionSpec));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r5 = $r4.block,$r4 (MakeGrammar.endChildList));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;702;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $r7 = r0.behavior,r0 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;439;false;true;212;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r12 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));false;0;false;true;346;false;true;6;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.superGrammar = r3,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String getSuperGrammarName()> $r1 = r0.superGrammar,r0 (Grammar.getSuperGrammarName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;730;false;true;611;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void setCharVocabulary(antlr.collections.impl.BitSet)> r0.charVocabulary = r1,r0 (LexerGrammar.setCharVocabulary));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.charVocabulary = $r4,r0 (LexerGrammar.<init>));true;-1;true;true;347;false;true;10;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;239;false;true;3;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: java.lang.Object getElement(java.lang.Object)> $r3 = r0.index,r0 (IndexedVector.getElement));BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>()> r0.index = $r2,r0 (IndexedVector.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;12;false
BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> $r9 = r1.antlrTool,r1 (TokenRefElement.<init>));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;364;false;true;182;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r4 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;237;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i5 = $r13.guessing,$r13 (ANTLRParser.notTerminal));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r20 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;237;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitive = varReplacer1666,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: char LA(int)> $z0 = r0.caseSensitive,r0 (CharScanner.LA));true;-1;true;true;852;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r45 = r0.behavior,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;676;false;true;287;false;true;52;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;290;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i3 = $r3.guessing,$r3 (ANTLRParser.optionValue));true;-1;true;true;278;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;291;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r112 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;293;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;290;false;true;5;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r38 = r0.inputState,r0 (ANTLRParser.ebnf));true;566;false;true;262;false;true;1;false
BackwardQuery: (<antlr.NoViableAltException: java.lang.String getMessage()> $r12 = r0.token,r0 (NoViableAltException.getMessage));BackwardQuery: (<antlr.NoViableAltException: void <init>(antlr.Token,java.lang.String)> r0.token = r1,r0 (NoViableAltException.<init>));false;2;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void prepareForAnalysis()> $r3 = r0.alternatives,r0 (AlternativeBlock.prepareForAnalysis));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r69 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;242;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(long[])> r0.bits = r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: int degree()> $r2 = r0.bits,r0 (BitSet.degree));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.traceRules = varReplacer2398,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: void processArguments(java.lang.String[])> r0.traceRules = varReplacer2438,r0 (LexerGrammar.processArguments));true;-1;true;true;477;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;761;false;true;162;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;441;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i2 = $r1.guessing,$r1 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;230;false;true;24;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $r4 = r0.antlrTool,r0 (ANTLRParser.setBlockElement));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.antlrTool = r3,r0 (ANTLRParser.<init>));true;441;false;true;211;false;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r131 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;243;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $r1 = r0.inputState,r0 (ANTLRParser.optionValue));true;529;false;true;217;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $r2 = r0.inputState,r0 (ANTLRParser.ast_type_spec));true;509;false;true;340;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;21;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;874;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.target_file = $r7,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r19 = r0.target_file,r0 (PreservingFileWriter.close));false;0;false;true;220;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r70 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;241;false;true;704;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;731;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r117 = $r116.importVocab,$r116 (DefineGrammarSymbols.endOptions));true;-1;true;true;474;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r87 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r23 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;375;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;266;false;true;342;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> $r5 = r0.text,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;734;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;243;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r19 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;235;false;true;8;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> r0.nbrEntries = $i8,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (TokenQueue.removeFirst));true;-1;true;true;752;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i41 = $r67.guessing,$r67 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;245;false;true;54;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r18 = $r17.block,$r17 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void setExpanded(boolean)> r0.expanded = z0,r0 (GrammarFile.setExpanded));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String nameForExpandedGrammarFile(java.lang.String)> $z0 = r0.expanded,r0 (GrammarFile.nameForExpandedGrammarFile));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i6 = $r10.guessing,$r10 (ANTLRParser.range));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> r0.length = $i5,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> $i1 = r0.length,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r1 = r0.grammar,r0 (MakeGrammar.abortGrammar));true;-1;true;true;244;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r14 = r0.ruleBlock,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;503;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserOptionsSpec));true;-1;true;true;250;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r66 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;252;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.antlrTool = r1,r0 (Hierarchy.<init>));BackwardQuery: (<antlr.preprocessor.Hierarchy: boolean verifyThatHierarchyIsComplete()> $r11 = r0.antlrTool,r0 (Hierarchy.verifyThatHierarchyIsComplete));true;-1;true;true;216;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.numToConsume = $i3,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void consume()> $i0 = r0.numToConsume,r0 (TokenBuffer.consume));true;-1;true;true;668;false;true;312;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;267;false;true;879;false
BackwardQuery: (<antlr.ANTLRParser: void throwsSpec()> $i2 = $r6.guessing,$r6 (ANTLRParser.throwsSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;228;false;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r3 = $r2.block,$r2 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r14 = $r13.block,$r13 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r13,r1 (Preprocessor.optionSpec));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r22 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17.block = r1,$r17 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $i4 = $r2.type,$r2 (TokenBuffer.LA));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));true;-1;true;true;-1;true;true;192;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r31 = $r29.exportVocab,$r29 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));false;0;false;true;473;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;6;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i5 = $r8.guessing,$r8 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;239;false;true;60;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r7 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;242;false;true;11;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r18 = r0.grammar,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r4 = r0.head,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));true;-1;true;true;481;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> $r2 = r0.bits,r0 (BitSet.growToInclude));BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void setCaseSensitive(boolean)> r0.caseSensitive = z0,r0 (CharScanner.setCaseSensitive));BackwardQuery: (<antlr.CharScanner: char LA(int)> $z0 = r0.caseSensitive,r0 (CharScanner.LA));true;-1;true;true;731;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Token: int getType()> $i0 = r0.type,r0 (Token.getType));BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;241;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i9 = $r26.guessing,$r26 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;238;false;true;134;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void setTokenBuffer(antlr.TokenBuffer)> $r2.input = r1,$r2 (Parser.setTokenBuffer));BackwardQuery: (<antlr.Parser: void rewind(int)> $r2 = $r1.input,$r1 (Parser.rewind));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i3 = $r3.guessing,$r3 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;263;false;true;5;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;736;false;true;279;false
BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r71 = $r70.exportVocab,$r70 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;481;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;19;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r37 = $r35.antlrTool,$r35 (RuleBlock.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRHashString: boolean equals(java.lang.Object)> $r4 = r0.lexer,r0 (ANTLRHashString.equals));BackwardQuery: (<antlr.ANTLRHashString: void <init>(java.lang.String,antlr.CharScanner)> r0.lexer = r2,r0 (ANTLRHashString.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r139 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;337;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;297;false;true;299;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i36 = $r60.guessing,$r60 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;239;false;true;52;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.GrammarElement: int getLine()> $i0 = r0.line,r0 (GrammarElement.getLine));true;-1;true;true;-1;true;true;24;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r66 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;365;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tree()> $i2 = $r6.guessing,$r6 (ANTLRParser.tree));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;293;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r83 = $r82.importVocab,$r82 (DefineGrammarSymbols.endOptions));false;0;false;true;474;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;238;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i6 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.mismatchType = $b4,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitive = varReplacer2444,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2664,r0 (LexerGrammar.setOption));true;-1;true;true;464;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r131 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;238;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r9 = $r8.block,$r8 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r40 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;233;false;true;1;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.headerAction = varReplacer1854,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r6 = r0.headerAction,r0 (GrammarFile.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.numTreeParsers = $i2,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numTreeParsers = varReplacer1591,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;285;false;true;11;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r13,r1 (Preprocessor.optionSpec));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r8 = r0.exportVocab,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.SimpleTokenManager: boolean tokenDefined(java.lang.String)> $r2 = r0.table,r0 (SimpleTokenManager.tokenDefined));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.table = $r5,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;260;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r13 = r0.grammar,r0 (MakeGrammar.endSubRule));false;0;false;true;250;false;true;6;false
BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.numToConsume = $i3,r0 (TokenBuffer.syncConsume));BackwardQuery: (<antlr.TokenBuffer: void consume()> r0.numToConsume = $i1,r0 (TokenBuffer.consume));true;-1;true;true;669;false;true;311;false
BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r1 = r0.block,r0 (BlockContext.currentAlt));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;19;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;235;false;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenRefElement: void <init>(antlr.Grammar,antlr.Token,boolean,int)> $r5 = r0.atomText,r0 (TokenRefElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));true;101;false;true;217;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i3 = $r2.guessing,$r2 (ANTLRParser.alternative));true;-1;true;true;223;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r149 = $r148.exportVocab,$r148 (DefineGrammarSymbols.endOptions));true;-1;true;true;473;false;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r8 = $r7.block,$r7 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r17 = $r16.block,$r16 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i1 = r0.nbrEntries,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (TokenQueue.removeFirst));true;-1;true;true;730;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.not = varReplacer2176,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $z0 = $r2.not,$r2 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.LexerGrammar: void processArguments(java.lang.String[])> r0.traceRules = varReplacer2433,r0 (LexerGrammar.processArguments));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.traceRules = varReplacer2398,r0 (Grammar.<init>));true;-1;true;true;471;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i3 = r0.length,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r3 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mML_COMMENT));true;-1;true;true;740;false;true;1;false
BackwardQuery: (<antlr.TokenQueue: void removeFirst()> $i1 = r0.sizeLessOne,r0 (TokenQueue.removeFirst));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.sizeLessOne = $i4,r0 (TokenQueue.expand));true;-1;true;true;734;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r14 = $r13.block,$r13 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;243;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r46 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r61 = $r60.importVocab,$r60 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;845;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r8 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;245;false;true;342;false
BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i0 = r1.type,r1 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i7 = $r5.guessing,$r5 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;244;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r90 = $r87.importVocab,$r87 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;560;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i0 = $r3.guessing,$r3 (ANTLRParser.qualifiedID));true;-1;true;true;246;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r157 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;249;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;741;false;true;749;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.expanded = varReplacer1853,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String nameForExpandedGrammarFile(java.lang.String)> $z0 = r0.expanded,r0 (GrammarFile.nameForExpandedGrammarFile));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> $i1 = r0.length,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r35 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;205;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i2 = $r5.guessing,$r5 (ANTLRParser.grammar));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;283;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.blockNesting = varReplacer1576,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void block()> r0.blockNesting = $i5,r0 (ANTLRParser.block));true;505;false;true;253;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i6 = $r14.guessing,$r14 (ANTLRParser.terminal));true;-1;true;true;288;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r78 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;268;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i3 = $r3.guessing,$r3 (ANTLRParser.rule));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;288;false;true;12;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r33 = $r32.exportVocab,$r32 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));false;0;false;true;560;false;true;0;false
BackwardQuery: (<antlr.Token: java.lang.String toString()> $i0 = r0.type,r0 (Token.toString));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r6 = $r5.block,$r5 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.numToConsume = varReplacer1600,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void consume()> r0.numToConsume = $i1,r0 (TokenBuffer.consume));true;-1;true;true;693;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionHandler));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;313;false;true;4;false
BackwardQuery: (<antlr.RuleBlock: void setDefaultErrorHandler(boolean)> r0.defaultErrorHandler = z0,r0 (RuleBlock.setDefaultErrorHandler));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.defaultErrorHandler = varReplacer2283,r0 (RuleBlock.<init>));true;-1;true;true;215;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r5 = r0.alternatives,r0 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r2 = $r1.exportVocab,$r1 (DefineGrammarSymbols.endOptions));true;-1;true;true;354;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r19 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.currentExceptionSpec = varReplacer1584,r0 (MakeGrammar.<init>));true;-1;true;true;223;false;true;95;false
BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;419;false;true;116;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8.hasASynPred = varReplacer2223,$r8 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.hasASynPred = $z0,r0 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r7 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;337;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i30 = $r52.guessing,$r52 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;335;false;true;70;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r5 = $r4.block,$r4 (MakeGrammar.endChildList));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r2.column = varReplacer2937,$r2 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: void resetText()> $i0 = $r2.column,$r2 (CharScanner.resetText));true;-1;true;true;-1;true;true;34;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r4 = r1.alternatives,r1 (LLkAnalyzer.subruleCanBeInverted));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r37 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));false;0;false;true;450;false;true;27;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i26 = $r36.guessing,$r36 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;324;false;true;5;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tree()> $r2 = r0.inputState,r0 (ANTLRParser.tree));true;749;false;true;242;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r12 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;236;false;true;7;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r13 = r0.antlrTool,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void <init>(antlr.Tool,java.lang.String[])> r0.antlrTool = r1,r0 (Tool.<init>));true;23;false;true;206;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r6 = r0.exceptionSpecs,r0 (RuleBlock.addExceptionSpec));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.exceptionSpecs = $r5,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.alternatives = $r3,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: antlr.collections.impl.Vector getAlternatives()> $r1 = r0.alternatives,r0 (AlternativeBlock.getAlternatives));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.buildAST = varReplacer2396,r0 (Grammar.<init>));BackwardQuery: (<antlr.TreeWalkerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.buildAST = varReplacer2633,r0 (TreeWalkerGrammar.setOption));true;-1;true;true;470;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r19 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;244;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i0 = r0.nested,r0 (MakeGrammar.endAlt));true;-1;true;true;260;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r16 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;245;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r2 = $r1.block,$r1 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;722;false;true;259;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i3 = $r7.guessing,$r7 (ANTLRParser.tree));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;221;false;true;519;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.expanded = varReplacer1853,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: void setExpanded(boolean)> r0.expanded = z0,r0 (GrammarFile.setExpanded));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r8 = r0.grammar,r0 (MakeGrammar.abortGrammar));true;-1;true;true;408;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r11 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;312;false;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r5 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;233;false;true;1;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.input = r1,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: char LA(int)> $r2 = $r1.input,$r1 (CharScanner.LA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void fileOptionsSpec()> $r3 = r0.inputState,r0 (ANTLRParser.fileOptionsSpec));true;639;false;true;279;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r10 = r0.inputState,r0 (ANTLRParser.range));true;518;false;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i30 = $r52.guessing,$r52 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;254;false;true;59;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: void processArguments(java.lang.String[])> $r6 = r0.antlrTool,r0 (ParserGrammar.processArguments));true;-1;true;true;472;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;292;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;737;false;true;561;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r3 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));true;-1;true;true;236;false;true;24;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.generateAmbigWarnings = varReplacer2237,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.generateAmbigWarnings = $z3,r0 (MakeGrammar.setBlock));true;-1;true;true;208;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r12 = r0.antlrTool,r0 (LexerGrammar.setOption));true;-1;true;true;465;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;731;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r25 = r0.inputState,r0 (ANTLRParser.range));true;488;false;true;210;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r31 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));true;499;false;true;209;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i9 = $r26.guessing,$r26 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;280;false;true;134;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.noConstructors = varReplacer1903,r0 (Tool.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r76.noConstructors = $z21,$r76 (DefineGrammarSymbols.setFileOption));true;-1;true;true;519;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r157 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;293;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: int length()> $i0 = r0.len,r0 (ANTLRHashString.length));BackwardQuery: (<antlr.ANTLRHashString: void setBuffer(char[],int)> r0.len = i0,r0 (ANTLRHashString.setBuffer));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r25 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;398;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r60 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;311;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r70 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;275;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r25 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;234;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i10 = $r28.guessing,$r28 (ANTLRParser.parserSpec));true;-1;true;true;243;false;true;1;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $i0 = $r4.lastElement,$r4 (VectorEnumerator.hasMoreElements));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRHashString: void <init>(java.lang.String,antlr.CharScanner)> r0.lexer = r2,r0 (ANTLRHashString.<init>));BackwardQuery: (<antlr.ANTLRHashString: boolean equals(java.lang.Object)> $r6 = r0.lexer,r0 (ANTLRHashString.equals));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i19 = $r31.guessing,$r31 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;221;false;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> r0.nMarkers = $i1,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i1 = r0.nMarkers,r0 (TokenBuffer.syncConsume));true;-1;true;true;661;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r39 = r0.inputState,r0 (ANTLRParser.classDef));true;461;false;true;211;false;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void consume()> r0.numToConsume = $i1,r0 (TokenBuffer.consume));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i0 = r0.numToConsume,r0 (TokenBuffer.syncConsume));true;-1;true;true;948;false;true;143;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r62 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));false;0;false;true;301;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;235;false;true;87;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r5 = r1.blockEnd,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r19 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;721;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $r10 = r0.inputState,r0 (ANTLRParser.exceptionSpec));true;479;false;true;212;false;true;0;false
BackwardQuery: (<antlr.WildcardElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.line = $i1,r0 (WildcardElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.line = $i0,r0 (GrammarElement.<init>));true;-1;true;true;206;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mCOLON));true;-1;true;true;727;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;223;false;true;8;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $i7 = r0.nargs,r0 (Tool.processArguments));true;26;false;true;208;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i1 = $r1.guessing,$r1 (ANTLRParser.alternative));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;222;false;true;152;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;473;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r3 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;236;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r9 = r0.blocks,r0 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));true;-1;true;true;251;false;true;-1;true
BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r53 = r0.tokenText,r0 (MismatchedTokenException.getMessage));BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = varReplacer1574,r0 (MismatchedTokenException.<init>));false;0;false;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17.preambleAction = $r16,$r17 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r17.preambleAction = $r16,$r17 (DefineGrammarSymbols.startParser));true;-1;true;true;473;false;false;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.offset = varReplacer1606,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.offset = varReplacer3588,r0 (TokenQueue.expand));true;-1;true;true;471;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r144 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $r1 = r0.inputState,r0 (ANTLRParser.exceptionSpecNoLabel));true;648;false;true;275;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r87 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;305;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r21 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;383;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;754;false;true;259;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Rule: boolean sameSignature(antlr.preprocessor.Rule)> $r8 = r0.args,r0 (Rule.sameSignature));BackwardQuery: (<antlr.preprocessor.Rule: void setArgs(java.lang.String)> r0.args = r1,r0 (Rule.setArgs));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;236;false;true;257;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mML_COMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mML_COMMENT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r21 = r0.antlrTool,r0 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.antlrTool = r3,r0 (ANTLRParser.<init>));true;434;false;true;210;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i2 = $r2.guessing,$r2 (ANTLRParser.range));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;360;false;true;575;false
BackwardQuery: (<antlr.LLkParser: int LA(int)> $r2 = $r1.input,$r1 (LLkParser.LA));BackwardQuery: (<antlr.Parser: void setTokenBuffer(antlr.TokenBuffer)> $r2.input = r1,$r2 (Parser.setTokenBuffer));true;-1;true;true;302;false;true;167;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $i0 = r0.maxToken,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: int nextTokenType()> r0.maxToken = $i1,r0 (SimpleTokenManager.nextTokenType));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (MakeGrammar.refCharLiteral));true;-1;true;true;317;false;true;33;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r10 = r0.ruleBlock,r0 (MakeGrammar.labelElement));true;-1;true;true;313;false;true;15;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r27 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;246;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r3 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;296;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;310;false;true;696;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r5 = r2.block,r2 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i1 = $r2.guessing,$r2 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;239;false;true;31;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i3 = $r2.guessing,$r2 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;247;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void resetText()> $r1 = r0.text,r0 (CharScanner.resetText));true;-1;true;true;753;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r12 = r0.blocks,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;240;false;true;922;false
BackwardQuery: (<antlr.CharScanner: void setCaseSensitive(boolean)> r0.caseSensitive = z0,r0 (CharScanner.setCaseSensitive));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.caseSensitive = varReplacer1666,r0 (CharScanner.<init>));true;-1;true;true;211;false;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i0 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,antlr.collections.impl.BitSet,boolean,antlr.CharScanner)> r0.mismatchType = $b3,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.markerOffset = varReplacer1602,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: int LA(int)> $i1 = r0.markerOffset,r0 (TokenBuffer.LA));true;-1;true;true;669;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedySet = varReplacer2243,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedySet = $z5,r0 (MakeGrammar.setBlock));true;-1;true;true;364;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r35 = r0.options,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet charSet()> $i0 = $r1.guessing,$r1 (ANTLRParser.charSet));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;311;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r6 = $r5.block,$r5 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r17.block = r1,$r17 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;304;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $r30 = r0.inputState,r0 (ANTLRParser.range));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;499;false;true;209;false;true;119;false
BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> $r6 = r0.grammar,r0 (MakeGrammar.refSemPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;247;false;true;223;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r4 = r0.data,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: boolean member(int)> $r1 = r0.bits,r0 (BitSet.member));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.GrammarSymbol: void <init>(java.lang.String)> r0.id = r1,r0 (GrammarSymbol.<init>));BackwardQuery: (<antlr.GrammarSymbol: java.lang.String getId()> $r1 = r0.id,r0 (GrammarSymbol.getId));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> $r9 = r0.text,r0 (PreprocessorLexer.mID));true;-1;true;true;739;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r23 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));false;0;false;true;261;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r19 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;393;false;true;19;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r11 = $r9.antlrTool,$r9 (MakeGrammar.refTokensSpecElementOption));true;-1;true;true;448;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> $r6 = r0.grammar,r0 (MakeGrammar.refSemPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;312;false;true;422;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;298;false;true;6;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i2 = r0.length,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r15 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;763;false;true;296;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i3 = $r3.guessing,$r3 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;249;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r60 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;268;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r8 = $r7.exportVocab,$r7 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;548;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2247,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r9 = $r8.labeledElements,$r8 (MakeGrammar.labelElement));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.labeledElements = $r3,r0 (RuleBlock.<init>));true;-1;true;true;450;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;244;false;true;574;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i4 = r0.length,r0 (ANTLRStringBuffer.append));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void consume()> r0.numToConsume = $i1,r0 (InputBuffer.consume));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> r0.numToConsume = $i3,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r12 = r0.blocks,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;254;false;true;896;false
BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r3 = r0.bits,r0 (BitSet.orInPlace));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $i7 = r0.nbrEntries,r0 (TokenQueue.append));true;-1;true;true;468;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i36 = $r60.guessing,$r60 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;241;false;true;51;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i0 = r0.nested,r0 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r0.nested = $i1,r0 (MakeGrammar.endSubRule));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i10 = $r29.guessing,$r29 (ANTLRParser.lexerSpec));true;-1;true;true;240;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Hierarchy: antlr.preprocessor.Grammar getGrammar(java.lang.String)> $r2 = r0.symbols,r0 (Hierarchy.getGrammar));BackwardQuery: (<antlr.preprocessor.Hierarchy: void <init>(antlr.Tool)> r0.symbols = $r5,r0 (Hierarchy.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refSemPred(antlr.Token)> $r6 = r0.grammar,r0 (MakeGrammar.refSemPred));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;239;false;true;280;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r4 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;241;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r3 = r0.grammar,r0 (MakeGrammar.endChildList));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;318;false;true;254;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;731;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r3 = $r2.block,$r2 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r8 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;17;false
BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> $r4 = r0.grammar,r0 (TokenRangeElement.<init>));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;223;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r2 = $r1.block,$r1 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r2 = r1.block,r1 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.autoGenType = i0,r0 (AlternativeElement.<init>));BackwardQuery: (<antlr.AlternativeElement: int getAutoGenType()> $i0 = r0.autoGenType,r0 (AlternativeElement.getAutoGenType));true;-1;true;true;-1;true;true;26;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> $r3 = r0.text,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i6 = $r3.guessing,$r3 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r11 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;245;false;true;520;false
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r4 = r0.grammar,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r12 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;261;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedy = varReplacer2583,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.greedy = varReplacer2179,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r4 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r150 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;229;false;true;24;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet setBlockElement()> $i3 = $r2.guessing,$r2 (ANTLRParser.setBlockElement));true;-1;true;true;248;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r36 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;237;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $z2 = $r7.caseSensitive,$r7 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitive = varReplacer2657,r0 (LexerGrammar.setOption));true;-1;true;true;612;false;true;227;false
BackwardQuery: (<antlr.ANTLRParser: boolean lastInRule()> $i0 = r0.blockNesting,r0 (ANTLRParser.lastInRule));BackwardQuery: (<antlr.ANTLRParser: void rule()> r0.blockNesting = varReplacer1224,r0 (ANTLRParser.rule));true;571;false;true;216;false;true;20;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;253;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r13 = $r12.blockEnd,$r12 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r6 = $r5.exportVocab,$r5 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;484;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i5 = $r8.guessing,$r8 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;387;false;true;64;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r1.line = $i1,$r1 (CharScanner.newline));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.line = varReplacer1622,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;752;false;true;179;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r34 = r0.tool,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;224;false;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i6,r0 (Tool.processArguments));true;28;false;true;221;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;734;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i1 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = $i6,r0 (Tool.processArguments));true;26;false;true;209;false;true;0;false
BackwardQuery: (<antlr.ImportVocabTokenManager: java.lang.Object clone()> $r4 = r0.grammar,r0 (ImportVocabTokenManager.clone));BackwardQuery: (<antlr.ImportVocabTokenManager: void <init>(antlr.Grammar,java.lang.String,java.lang.String,antlr.Tool)> r0.grammar = r1,r0 (ImportVocabTokenManager.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.alreadyExpanded = varReplacer1708,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.alreadyExpanded = varReplacer2751,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r3 = $r2.block,$r2 (MakeGrammar.setUserExceptions));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i13 = $r8.guessing,$r8 (ANTLRParser.classDef));true;-1;true;true;316;false;true;0;false
BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> r0.head = r1,r0 (Alternative.addElement));BackwardQuery: (<antlr.Alternative: boolean atStart()> $r1 = r0.head,r0 (Alternative.atStart));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r4 = $r3.block,$r3 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;235;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r137 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;247;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r121 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;239;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2559,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2587,r0 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: java.lang.String getLabel()> $r1 = r0.label,r0 (AlternativeBlock.getLabel));BackwardQuery: (<antlr.AlternativeBlock: void setLabel(java.lang.String)> r0.label = r1,r0 (AlternativeBlock.setLabel));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i2 = r0.lastElement,r0 (Vector.removeElement));true;-1;true;true;-1;true;true;397;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r26 = r0.inputState,r0 (ANTLRParser.ebnf));true;622;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r8.altNum = varReplacer2252,$r8 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r8.altNum = varReplacer2254,$r8 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r14 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;732;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i5 = $r12.guessing,$r12 (ANTLRParser.grammar));true;-1;true;true;238;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i2 = $r3.guessing,$r3 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $r3 = r0.block,r0 (TreeBlockContext.addAlternativeElement));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z0 = r0.genDiagnostics,r0 (Tool.getLanguage));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDiagnostics = varReplacer1883,r0 (Tool.processArguments));false;0;false;true;207;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i1 = $r2.guessing,$r2 (ANTLRParser.tree));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;229;false;true;521;false
BackwardQuery: (<antlr.collections.impl.BitSet: boolean member(int)> $r2 = r0.bits,r0 (BitSet.member));BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(long[])> r0.bits = r1,r0 (BitSet.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r14 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;226;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i41 = $r67.guessing,$r67 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;357;false;true;51;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r5 = r2.block,r2 (MakeGrammar.endRule));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mSEMI));true;-1;true;true;812;false;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;752;false;true;115;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.TokenStreamRecognitionException: void <init>(antlr.RecognitionException)> r0.recog = r1,r0 (TokenStreamRecognitionException.<init>));BackwardQuery: (<antlr.TokenStreamRecognitionException: java.lang.String toString()> $r1 = r0.recog,r0 (TokenStreamRecognitionException.toString));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r64 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;224;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;315;false;true;610;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r68 = $r66.exportVocab,$r66 (DefineGrammarSymbols.endOptions));true;-1;true;true;343;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;731;false;true;163;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: void append(char)> $i8 = r0.nbrEntries,r0 (CharQueue.append));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r11 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;249;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;745;false;true;91;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: antlr.Token qualifiedID()> $i0 = $r3.guessing,$r3 (ANTLRParser.qualifiedID));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;728;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;393;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i37 = $r61.guessing,$r61 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;315;false;true;89;false
BackwardQuery: (<antlr.CharScanner: void setColumn(int)> $r1.column = i0,$r1 (CharScanner.setColumn));BackwardQuery: (<antlr.CharScanner: int getColumn()> $i0 = $r1.column,$r1 (CharScanner.getColumn));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> $r4 = r0.grammar,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));false;0;false;true;298;false;true;5;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r12 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.exportVocab = $r39,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r11,r1 (Preprocessor.optionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r121 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;235;false;true;10;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r116 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;245;false;true;10;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i4 = $r2.guessing,$r2 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i8 = $r21.guessing,$r21 (ANTLRParser.terminal));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r45 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;236;false;true;10;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i6 = $r10.guessing,$r10 (ANTLRParser.range));true;-1;true;true;233;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Tool: void error(java.lang.String,java.lang.String,int,int)> r0.hasError = varReplacer2129,r0 (Tool.error));BackwardQuery: (<antlr.Tool: void error(java.lang.String)> r0.hasError = varReplacer1900,r0 (Tool.error));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;723;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;733;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r66 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r7 = $r6.block,$r6 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2602,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z2 = r1.warnWhenFollowAmbig,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i4 = $r4.guessing,$r4 (ANTLRParser.rule));true;-1;true;true;246;false;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r29 = r0.behavior,r0 (ANTLRParser.ebnf));true;452;false;true;213;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r87 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.nested = varReplacer1582,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $i0 = r0.nested,r0 (MakeGrammar.beginSubRule));true;-1;true;true;414;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> $r22 = r0.text,r0 (PreprocessorLexer.mRULE_BLOCK));true;-1;true;true;732;false;true;1;false
BackwardQuery: (<antlr.TokenQueue: void expand()> r0.buffer = r1,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));true;-1;true;true;476;false;true;297;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.input = r1,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: void consume()> $r6 = $r5.input,$r5 (CharScanner.consume));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void add(int)> $r1 = r0.bits,r0 (BitSet.add));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r2.column = varReplacer2937,$r2 (CharScanner.newline));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.column = varReplacer1623,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.ANTLRStringBuffer: java.lang.String toString()> $i0 = r0.length,r0 (ANTLRStringBuffer.toString));BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet charSet()> $i0 = $r1.guessing,$r1 (ANTLRParser.charSet));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i0 = $r2.guessing,$r2 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;247;false;true;837;false
BackwardQuery: (<antlr.MakeGrammar: void beginChildList()> $r3 = $r1.block,$r1 (MakeGrammar.beginChildList));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.currentExceptionSpec = varReplacer2404,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r1 = r0.currentExceptionSpec,r0 (MakeGrammar.endExceptionSpec));true;-1;true;true;242;false;true;24;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r6 = r0.headerAction,r0 (GrammarFile.toString));BackwardQuery: (<antlr.preprocessor.GrammarFile: void addHeaderAction(java.lang.String)> r0.headerAction = $r8,r0 (GrammarFile.addHeaderAction));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $i4 = r0.offset,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void expand()> r0.offset = varReplacer2943,r0 (CharQueue.expand));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;427;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i1 = $r5.guessing,$r5 (ANTLRParser.exceptionGroup));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;246;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i6 = $r5.guessing,$r5 (ANTLRParser.parserSpec));true;-1;true;true;247;false;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.numToConsume = varReplacer1611,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: void consume()> $i0 = r0.numToConsume,r0 (InputBuffer.consume));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r25 = r0.grammar,r0 (MakeGrammar.refCharRange));false;0;false;true;249;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mDIGIT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;925;false;true;-1;true
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.rules = r4,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r72 = r0.rules,r0 (Grammar.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i20 = $r23.guessing,$r23 (ANTLRParser.classDef));true;-1;true;true;238;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i7 = $r21.guessing,$r21 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;238;false;true;135;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;726;false;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $r5 = r0.inputState,r0 (ANTLRParser.grammar));true;380;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.name = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r66 = r0.name,r0 (Grammar.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.tool = r1,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: void generateExpandedFile()> $r4 = r0.tool,r0 (GrammarFile.generateExpandedFile));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.defaultErrorHandler = varReplacer2699,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2390,r0 (Grammar.<init>));true;-1;true;true;477;false;true;76;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i10 = r0.expecting,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,char,boolean,antlr.CharScanner)> r0.expecting = c1,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $r2 = r0.data,r0 (Vector.setElementAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> $i2 = r0.markerOffset,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> r0.markerOffset = i0,r0 (TokenBuffer.rewind));true;-1;true;true;649;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i1 = $r1.guessing,$r1 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;526;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.numToConsume = varReplacer1600,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> r0.numToConsume = $i3,r0 (TokenBuffer.syncConsume));true;-1;true;true;464;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammarFileName = $r6,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r21 = r0.grammarFileName,r0 (Tool.preprocess));true;25;false;true;213;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r69 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;241;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (MakeGrammar.defineRuleName));true;-1;true;true;246;false;true;26;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r20 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;240;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r49 = $r48.exportVocab,$r48 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;492;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void setRuleOption(antlr.Token,antlr.Token)> $r3 = r0.ruleBlock,r0 (MakeGrammar.setRuleOption));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r8 = r1.bits,r1 (BitSet.orInPlace));false;0;false;false;234;false;true;12;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i1 = $r1.guessing,$r1 (ANTLRParser.classDef));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;223;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;242;false;true;223;false
BackwardQuery: (<antlr.CharQueue: void expand()> r0.buffer = r1,r0 (CharQueue.expand));BackwardQuery: (<antlr.CharQueue: void append(char)> $r2 = r0.buffer,r0 (CharQueue.append));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void consume()> $r4.column = $i4,$r4 (CharScanner.consume));BackwardQuery: (<antlr.CharScanner: int getColumn()> $i0 = $r1.column,$r1 (CharScanner.getColumn));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;739;false;true;166;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r4 = r0.blocks,r0 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;246;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r13.importVocab = $r14,$r13 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r98 = $r97.importVocab,$r97 (DefineGrammarSymbols.endOptions));true;-1;true;true;474;false;true;7;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>(int)> r0.elements = $r1,r0 (IndexedVector.<init>));BackwardQuery: (<antlr.collections.impl.IndexedVector: java.lang.Object elementAt(int)> $r1 = r0.elements,r0 (IndexedVector.elementAt));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r0.head = $r3,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;347;false;true;365;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i28 = $r40.guessing,$r40 (ANTLRParser.classDef));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.RecognitionException: java.lang.String toString()> $r3 = r0.fileName,r0 (RecognitionException.toString));BackwardQuery: (<antlr.RecognitionException: void <init>(java.lang.String,java.lang.String,int,int)> r0.fileName = r2,r0 (RecognitionException.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r13 = r0.behavior,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;754;false;true;301;false;true;128;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: void <init>(antlr.collections.impl.Vector)> r0.vector = r1,r0 (VectorEnumerator.<init>));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $r3 = r0.vector,r0 (VectorEnumerator.nextElement));true;28;false;true;287;false;true;1;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> $r16 = r0.antlrTool,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;548;false;true;21;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;286;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r23 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;288;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.cmdLineArgValid = $r3,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void setArgOK(int)> $r1 = r0.cmdLineArgValid,r0 (Tool.setArgOK));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r3 = r0.grammar,r0 (MakeGrammar.endChildList));true;-1;true;true;286;false;true;10;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: void setElementAt(java.lang.Object,int)> $i2 = r0.lastElement,r0 (Vector.setElementAt));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r157 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;236;false;true;0;false
BackwardQuery: (<antlr.LexerGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.caseSensitiveLiterals = varReplacer2644,r0 (LexerGrammar.setOption));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitiveLiterals = varReplacer2441,r0 (LexerGrammar.<init>));true;-1;true;true;478;false;true;20;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i0 = $r1.guessing,$r1 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;239;false;true;30;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleEnd = varReplacer2401,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r6 = r0.ruleEnd,r0 (MakeGrammar.endRule));true;-1;true;true;237;false;true;25;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r89 = $r88.exportVocab,$r88 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;476;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;5;false
BackwardQuery: (<antlr.Tool: int doEverything(java.lang.String[])> $r19 = r0.cmdLineArgValid,r0 (Tool.doEverything));BackwardQuery: (<antlr.Tool: void <init>()> r0.cmdLineArgValid = $r3,r0 (Tool.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.traceRules = varReplacer2398,r0 (Grammar.<init>));BackwardQuery: (<antlr.TreeWalkerGrammar: void processArguments(java.lang.String[])> r0.traceRules = varReplacer2422,r0 (TreeWalkerGrammar.processArguments));true;-1;true;true;750;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i1 = $r1.guessing,$r1 (ANTLRParser.alternative));true;-1;true;true;294;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r11 = r0.grammar,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;337;false;true;718;false
BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> $i5 = r0.nargs,r0 (Tool.processArguments));BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i3,r0 (Tool.preprocess));true;29;false;true;257;false;true;1;false
BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));BackwardQuery: (<antlr.RuleBlock: void addExceptionSpec(antlr.ExceptionSpec)> $r17 = r0.grammar,r0 (RuleBlock.addExceptionSpec));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.target_file = $r7,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r4 = r0.target_file,r0 (PreservingFileWriter.close));false;0;false;true;255;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i0 = $r1.guessing,$r1 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;290;false;true;34;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r1.line = $i1,$r1 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: void resetText()> $i1 = $r4.line,$r4 (CharScanner.resetText));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.SimpleTokenManager: void mapToTokenSymbol(java.lang.String,antlr.TokenSymbol)> $r3 = r0.table,r0 (SimpleTokenManager.mapToTokenSymbol));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.table = $r5,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> $r4 = r0.head,r0 (LList.deleteHead));BackwardQuery: (<antlr.collections.impl.LList: void <init>()> r0.head = varReplacer1587,r0 (LList.<init>));true;-1;true;true;407;false;true;422;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $r3 = r0.buffer,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void expand()> r0.buffer = r1,r0 (TokenQueue.expand));true;-1;true;true;739;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refStringLiteral));true;-1;true;true;237;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void expand()> $r4 = r0.buffer,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));true;-1;true;true;478;false;true;333;false
BackwardQuery: (<antlr.ANTLRParser: void parserOptionsSpec()> $r3 = r0.inputState,r0 (ANTLRParser.parserOptionsSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;474;false;true;211;false;true;6;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r12 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;237;false;true;905;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r48 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;236;false;true;10;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r8 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));false;0;false;true;238;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;829;false;true;189;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r8.altNum = varReplacer2252,$r8 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $i0 = r0.altNum,r0 (BlockContext.currentAlt));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.treeParserSpec));true;-1;true;true;286;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i16 = $r38.guessing,$r38 (ANTLRParser.ebnf));true;-1;true;true;285;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r32 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;287;false;true;12;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;215;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r10 = $r9.block,$r9 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> $r1 = r0.text,r0 (ANTLRTokdefLexer.mASSIGN));true;-1;true;true;810;false;true;1;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> $r3 = r0.buffer,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));true;-1;true;true;487;false;true;300;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r20 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r16 = r0.ruleBlock,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleBlock = r5,r0 (MakeGrammar.defineRuleName));true;-1;true;true;246;false;true;165;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i7 = $r20.guessing,$r20 (ANTLRParser.lexerSpec));true;-1;true;true;239;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.markerOffset = varReplacer1613,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.CharBuffer: void fill(int)> $i1 = r0.markerOffset,r0 (CharBuffer.fill));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i6 = $r3.guessing,$r3 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;223;false;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r13 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;429;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;240;false;true;431;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> $r6 = r0.text,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;772;false;true;116;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> $r5 = $r4.tokenManager,$r4 (TokenRangeElement.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r2 = $r1.block,$r1 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;744;false;true;226;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.autoGenType = i0,r0 (CharLiteralElement.<init>));BackwardQuery: (<antlr.AlternativeElement: int getAutoGenType()> $i0 = r0.autoGenType,r0 (AlternativeElement.getAutoGenType));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: antlr.Grammar findGrammar(java.lang.String)> $r4 = r0.grammars,r0 (DefineGrammarSymbols.findGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammars = $r4,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;234;false;true;24;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i17 = $r39.guessing,$r39 (ANTLRParser.ebnf));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.headerActions = $r6,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void refHeaderAction(antlr.Token,antlr.Token)> $r19 = r0.headerActions,r0 (DefineGrammarSymbols.refHeaderAction));true;-1;true;true;226;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.fileName = varReplacer2399,r0 (Grammar.<init>));BackwardQuery: (<antlr.Grammar: java.lang.String getFilename()> $r1 = r0.fileName,r0 (Grammar.getFilename));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r33 = $r32.exportVocab,$r32 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));false;0;false;true;471;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r56 = $r55.exportVocab,$r55 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));false;0;false;true;476;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;257;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRTokdefLexer.nextToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.input = r1,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: char LA(int)> $r4 = $r3.input,$r3 (CharScanner.LA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> r0.head = r1,r0 (Alternative.addElement));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> r18 = r2.head,r2 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;238;false;true;53;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $i0 = r1.line,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String,int,boolean)> r0.line = i0,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;12;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r15 = $r14.block,$r14 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r49 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;24;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r23 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));true;-1;true;true;244;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $r5 = r0.behavior,r0 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;460;false;true;211;false;true;115;false
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r4 = r0.blocks,r0 (MakeGrammar.beginSubRule));true;-1;true;true;248;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;761;false;true;180;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r42 = r0.tool,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;231;false;true;54;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r45 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;225;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r138 = $r137.importVocab,$r137 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136.importVocab = varReplacer2301,$r136 (DefineGrammarSymbols.endOptions));true;-1;true;true;515;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.doAutoGen = varReplacer2240,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setAutoGen(boolean)> r0.doAutoGen = z0,r0 (AlternativeBlock.setAutoGen));true;-1;true;true;209;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r15 = $r14.block,$r14 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r125 = $r124.exportVocab,$r124 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;491;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;474;false;true;6;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i42 = $r68.guessing,$r68 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.buffer = $r1,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $r3 = r0.buffer,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r60 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r22 = $r21.block,$r21 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.offset = varReplacer1606,r0 (TokenQueue.init));BackwardQuery: (<antlr.TokenQueue: void removeFirst()> $i0 = r0.offset,r0 (TokenQueue.removeFirst));true;-1;true;true;480;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i1 = $r3.guessing,$r3 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;226;false;true;55;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i1 = r0.nargs,r0 (Tool.preprocessedArgList));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = varReplacer1857,r0 (Tool.processArguments));true;32;false;true;271;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r55 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;238;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $r2 = r0.inputState,r0 (ANTLRParser.exceptionSpecNoLabel));true;487;false;true;209;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r36 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;241;false;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;222;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionSpecNoLabel));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r2 = $r1.exportVocab,$r1 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;485;false;true;0;false
BackwardQuery: (<antlr.preprocessor.Preprocessor: antlr.collections.impl.IndexedVector optionSpec(antlr.preprocessor.Grammar)> r1.exportVocab = $r11,r1 (Preprocessor.optionSpec));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r22 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r124 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r49 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;19;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.tmp_file = $r10,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r8 = r0.tmp_file,r0 (PreservingFileWriter.close));false;0;false;true;275;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r49 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;246;false;true;35;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r52 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));true;497;false;true;211;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r8 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;724;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genDiagnostics = varReplacer1908,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDiagnostics = varReplacer1881,r0 (Tool.processArguments));true;-1;true;true;215;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r137 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;237;false;true;10;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i5 = $r13.guessing,$r13 (ANTLRParser.notTerminal));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginAlt(boolean)> $r4 = $r3.block,$r3 (MakeGrammar.beginAlt));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $r15 = r0.behavior,r0 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;463;false;true;216;false;true;92;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $r5 = r0.behavior,r0 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;499;false;true;209;false;true;16;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mRANGE));true;-1;true;true;721;false;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;371;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;877;false;true;1;false
BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> $i1 = r2.type,r2 (RuleRefElement.<init>));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r13 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.thePreambleAction = $r18,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;315;false;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;213;false
BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.markerOffset = varReplacer1613,r0 (InputBuffer.<init>));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mINT(boolean)> $r7 = r0.text,r0 (ANTLRTokdefLexer.mINT));true;-1;true;true;847;false;true;1;false
BackwardQuery: (<antlr.ANTLRHashString: void setString(java.lang.String)> r0.s = r1,r0 (ANTLRHashString.setString));BackwardQuery: (<antlr.ANTLRHashString: int length()> $r2 = r0.s,r0 (ANTLRHashString.length));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;880;false;true;741;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.blockNesting = varReplacer1576,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void rule()> r0.blockNesting = varReplacer1224,r0 (ANTLRParser.rule));true;432;false;true;210;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r16 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;240;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r7 = r0.grammar,r0 (DefineGrammarSymbols.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;238;false;true;797;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS_LOOP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWS_LOOP));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r15 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));false;0;false;true;239;false;true;3;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;264;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r2.column = varReplacer2937,$r2 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: void consume()> $i3 = $r4.column,$r4 (CharScanner.consume));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRHashString: void <init>(java.lang.String,antlr.CharScanner)> r0.lexer = r2,r0 (ANTLRHashString.<init>));BackwardQuery: (<antlr.ANTLRHashString: boolean equals(java.lang.Object)> $r3 = r0.lexer,r0 (ANTLRHashString.equals));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setAlternatives(antlr.collections.impl.Vector)> r0.alternatives = r1,r0 (AlternativeBlock.setAlternatives));BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r2 = $r1.alternatives,$r1 (BlockContext.currentAlt));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> r0.lastElement = $i5,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> $i2 = r0.lastElement,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i1 = r0.lastElement,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void appendElement(java.lang.Object)> r0.lastElement = $i3,r0 (Vector.appendElement));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));BackwardQuery: (<antlr.ANTLRParser: void alternative()> $r7 = r0.behavior,r0 (ANTLRParser.alternative));true;450;false;true;213;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.parserSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r4 = $r3.block,$r3 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;237;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.GrammarAtom: void setOption(antlr.Token,antlr.Token)> $r6 = $r4.antlrTool,$r4 (GrammarAtom.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.tool,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;300;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;786;false
BackwardQuery: (<antlr.MakeGrammar: void addElementToCurrentAlt(antlr.AlternativeElement)> $r2 = r0.ruleBlock,r0 (MakeGrammar.addElementToCurrentAlt));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;253;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;250;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r2 = $r1.block,$r1 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r15.block = r5,$r15 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.LLkParser: antlr.Token LT(int)> $r2 = $r1.input,$r1 (LLkParser.LT));BackwardQuery: (<antlr.Parser: void setTokenBuffer(antlr.TokenBuffer)> $r2.input = r1,$r2 (Parser.setTokenBuffer));true;-1;true;true;251;false;true;145;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;237;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.autoGenType = varReplacer2153,r0 (AlternativeElement.<init>));BackwardQuery: (<antlr.AlternativeElement: int getAutoGenType()> $i0 = r0.autoGenType,r0 (AlternativeElement.getAutoGenType));true;-1;true;true;-1;true;true;21;false
BackwardQuery: (<antlr.NoViableAltException: java.lang.String getMessage()> $r1 = r0.token,r0 (NoViableAltException.getMessage));BackwardQuery: (<antlr.NoViableAltException: void <init>(antlr.Token,java.lang.String)> r0.token = r1,r0 (NoViableAltException.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i9 = $r34.guessing,$r34 (ANTLRParser.rule));true;-1;true;true;242;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r146 = $r144.exportVocab,$r144 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));true;-1;true;true;472;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;249;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mCOLON));true;-1;true;true;740;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r16 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;777;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.exportVocab = varReplacer2381,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r78 = $r77.exportVocab,$r77 (DefineGrammarSymbols.endOptions));true;-1;true;true;348;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserOptionsSpec));true;-1;true;true;242;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r4 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;237;false;true;426;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;237;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;194;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mXDIGIT(boolean)> $r3 = r0.text,r0 (ANTLRTokdefLexer.mXDIGIT));true;-1;true;true;889;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r1 = r0._returnToken,r0 (PreprocessorLexer.nextToken));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i10 = $r24.guessing,$r24 (ANTLRParser.terminal));true;-1;true;true;269;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;315;false;true;752;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i4 = $r7.guessing,$r7 (ANTLRParser.range));true;-1;true;true;337;false;true;4;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));BackwardQuery: (<antlr.ANTLRStringBuffer: void append(char)> $i2 = r0.length,r0 (ANTLRStringBuffer.append));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setOptions(antlr.collections.impl.IndexedVector)> r0.options = r1,r0 (Grammar.setOptions));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r12 = r0.options,r0 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r9 = $r8.block,$r8 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r17 = $r16.block,$r16 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $r6 = r0.data,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> r0.data = $r4,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i6 = $r14.guessing,$r14 (ANTLRParser.terminal));true;-1;true;true;242;false;true;4;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r16 = $r14.tokenManager,$r14 (StringLiteralElement.<init>));BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;876;false;true;218;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r61 = $r60.importVocab,$r60 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));true;-1;true;true;346;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionHandler()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionHandler));true;-1;true;true;237;false;true;4;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;732;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i0 = $r1.guessing,$r1 (ANTLRParser.exceptionGroup));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.warnWhenFollowAmbig = varReplacer2593,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z2 = r1.warnWhenFollowAmbig,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r13 = $r12.tokenManager,$r12 (DefineGrammarSymbols._refStringLiteral));true;-1;true;true;483;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;249;false;true;268;false
BackwardQuery: (<antlr.MakeGrammar: void refWildcard(antlr.Token,antlr.Token,int)> $r5 = r0.grammar,r0 (MakeGrammar.refWildcard));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;372;false;true;371;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> $r2 = r0.text,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;314;false
BackwardQuery: (<antlr.collections.impl.BitSet: void add(int)> $r2 = r0.bits,r0 (BitSet.add));BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRHashString: void setString(java.lang.String)> r0.s = r1,r0 (ANTLRHashString.setString));BackwardQuery: (<antlr.ANTLRHashString: char charAt(int)> $r3 = r0.s,r0 (ANTLRHashString.charAt));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i1 = $r5.guessing,$r5 (ANTLRParser.exceptionGroup));true;-1;true;true;394;false;true;10;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $r11 = r0.name,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.name = r1,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;273;false;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r19 = r0.behavior,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;574;false;true;284;false;true;48;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.analyzerDebug = varReplacer2719,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.analyzerDebug = varReplacer2386,r0 (Grammar.<init>));true;-1;true;true;634;false;true;116;false
BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.targetRule = $r3,r0 (RuleRefElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r7 = r3.targetRule,r3 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;22;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2242,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $z0 = $r4.not,$r4 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r83 = $r82.importVocab,$r82 (DefineGrammarSymbols.endOptions));true;-1;true;true;588;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $r2 = r0.inputState,r0 (ANTLRParser.optionValue));true;565;false;true;241;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $r2 = r0.inputState,r0 (ANTLRParser.exceptionSpec));true;531;false;true;246;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r3 = r0.blocks,r0 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.blocks = $r4,r0 (MakeGrammar.<init>));true;-1;true;true;258;false;true;13;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.defaultErrorHandler = varReplacer2551,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.RuleBlock: void <init>(antlr.Grammar,java.lang.String)> r0.defaultErrorHandler = varReplacer2283,r0 (RuleBlock.<init>));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r5 = r0.grammar,r0 (MakeGrammar.refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;324;false;true;808;false
BackwardQuery: (<antlr.ANTLRHashString: int length()> $r1 = r0.s,r0 (ANTLRHashString.length));BackwardQuery: (<antlr.ANTLRHashString: void setBuffer(char[],int)> r0.s = varReplacer3199,r0 (ANTLRHashString.setBuffer));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r6 = $r5.exportVocab,$r5 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;530;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.tokenStartLine = varReplacer1620,r0 (LexerSharedInputState.<init>));BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $i2 = $r4.tokenStartLine,$r4 (CharScanner.makeToken));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;14;false
BackwardQuery: (<antlr.CharScanner: void consume()> $i3 = $r4.column,$r4 (CharScanner.consume));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.column = varReplacer1623,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> r0.nested = $i1,r0 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> r0.nested = $i1,r0 (MakeGrammar.beginSubRule));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.interactive = varReplacer2392,r0 (Grammar.<init>));BackwardQuery: (<antlr.ParserGrammar: boolean setOption(java.lang.String,antlr.Token)> r0.interactive = varReplacer2612,r0 (ParserGrammar.setOption));true;-1;true;true;485;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i1 = $r5.guessing,$r5 (ANTLRParser.exceptionGroup));true;-1;true;true;246;false;true;4;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r10 = r0.tool,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;292;false;true;15;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;791;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.numToConsume = varReplacer1600,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void syncConsume()> $i2 = r0.numToConsume,r0 (TokenBuffer.syncConsume));true;-1;true;true;460;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;245;false;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i20 = $r23.guessing,$r23 (ANTLRParser.classDef));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar,antlr.Token)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.BlockWithImpliedExitPath: void <init>(antlr.Grammar)> $i0 = $r2.maxk,$r2 (BlockWithImpliedExitPath.<init>));BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.maxk = $i6,r0 (Grammar.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;938;false;true;258;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i4 = $r2.guessing,$r2 (ANTLRParser.tokensSpec));true;-1;true;true;311;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r144 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;281;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r154.exportVocab = varReplacer2296,$r154 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r107 = $r105.exportVocab,$r105 (DefineGrammarSymbols.endOptions));true;-1;true;true;497;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r8 = $r7.block,$r7 (MakeGrammar.endSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.collections.impl.BitSet: void setSize(int)> r0.bits = r1,r0 (BitSet.setSize));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> $r4 = r0.bits,r0 (BitSet.growToInclude));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> $r6 = r0.text,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;753;false;true;1;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.mismatchType = $b4,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i3 = r0.mismatchType,r0 (MismatchedCharException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID(boolean)> r0._returnToken = r12,r0 (PreprocessorLexer.mID));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r2 = r1.bits,r1 (BitSet.orInPlace));true;-1;true;true;286;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> r0.currentExceptionSpec = varReplacer2268,r0 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;305;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r7 = r0.ruleEnd,r0 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleEnd = $r16,r0 (MakeGrammar.defineRuleName));true;-1;true;true;265;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void endChildList()> $r5 = $r4.block,$r4 (MakeGrammar.endChildList));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.InputBuffer: char LA(int)> $i1 = r0.markerOffset,r0 (InputBuffer.LA));BackwardQuery: (<antlr.InputBuffer: void syncConsume()> r0.markerOffset = $i5,r0 (InputBuffer.syncConsume));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mINT(boolean)> $r7 = r0.text,r0 (ANTLRLexer.mINT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;742;false;true;190;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.nargs = varReplacer1857,r0 (Tool.processArguments));true;24;false;true;240;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r14 = r3.targetRule,r3 (AlternativeBlock.removeTrackingOfRuleRefs));BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.targetRule = $r5,r0 (RuleRefElement.<init>));false;0;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i4 = $r2.guessing,$r2 (ANTLRParser.tokensSpec));true;-1;true;true;238;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.Token optionValue()> $i2 = $r2.guessing,$r2 (ANTLRParser.optionValue));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;255;false;true;4;false
BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $i1 = r2.type,r2 (MakeGrammar.refRule));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r85.exportVocab = $r86,$r85 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r107 = $r105.exportVocab,$r105 (DefineGrammarSymbols.endOptions));true;-1;true;true;477;false;true;0;false
BackwardQuery: (<antlr.TokenQueue: void expand()> $r2 = r0.buffer,r0 (TokenQueue.expand));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.buffer = $r1,r0 (TokenQueue.init));true;-1;true;true;669;false;true;371;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r26 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;247;false;true;7;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r24 = $r23.tokenManager,$r23 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));true;-1;true;true;769;false;true;28;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i30 = $r52.guessing,$r52 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;273;false;true;69;false
BackwardQuery: (<antlr.CharLiteralElement: void <init>(antlr.LexerGrammar,antlr.Token,boolean,int)> r0.autoGenType = i0,r0 (CharLiteralElement.<init>));BackwardQuery: (<antlr.AlternativeElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.autoGenType = varReplacer2153,r0 (AlternativeElement.<init>));true;-1;true;true;256;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $r6 = r0.behavior,r0 (ANTLRParser.treeParserSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;627;false;true;236;false;true;3;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i8 = $r21.guessing,$r21 (ANTLRParser.terminal));true;-1;true;true;223;false;true;0;false
BackwardQuery: (<antlr.CharScanner: char LA(int)> $r1 = r0.inputState,r0 (CharScanner.LA));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;739;false;true;-1;true
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $i0 = $r4.lastElement,$r4 (VectorEnumerator.hasMoreElements));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i15 = $r50.guessing,$r50 (ANTLRParser.rule));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;224;false;true;11;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r16 = $r15.block,$r15 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i9 = $r26.guessing,$r26 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;443;false;true;135;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r5 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;317;false;true;32;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r18 = r0.grammar,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;251;false;true;345;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.NoViableAltException: void <init>(antlr.Token,java.lang.String)> r0.token = r1,r0 (NoViableAltException.<init>));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r30 = r42.token,r42 (ANTLRParser.classDef));false;21;false;true;211;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet charSet()> $i0 = $r1.guessing,$r1 (ANTLRParser.charSet));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;225;false;true;13;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i13 = $r18.guessing,$r18 (ANTLRParser.elementNoOptionSpec));true;-1;true;true;238;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r6 = r0.grammar,r0 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;236;false;true;540;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r14.blockEnd = $r15,$r14 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r15 = r2.blockEnd,r2 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> r0.nargs = $i1,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: java.lang.String[] preprocessedArgList()> $i0 = r0.nargs,r0 (Tool.preprocessedArgList));true;27;false;true;211;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;243;false;true;894;false
BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet charSet()> $i0 = $r1.guessing,$r1 (ANTLRParser.charSet));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $r2 = r0.inputState,r0 (ANTLRParser.tokensSpec));true;489;false;true;209;false;true;0;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.headerAction = varReplacer1854,r0 (GrammarFile.<init>));BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String toString()> $r17 = r0.headerAction,r0 (GrammarFile.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerOptionsSpec()> $i0 = $r4.guessing,$r4 (ANTLRParser.lexerOptionsSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i0 = r1.type,r1 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.Token: void setType(int)> r0.type = i0,r0 (Token.setType));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.AlternativeBlock: void setInitAction(java.lang.String)> r0.initAction = r1,r0 (AlternativeBlock.setInitAction));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar,antlr.Token,boolean)> r0.initAction = varReplacer2181,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;17;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r6 = r0.grammar,r0 (MakeGrammar.synPred));true;-1;true;true;241;false;true;26;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r142 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;253;false;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> $r3 = r0.data,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i3 = $r7.guessing,$r7 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;281;false;true;97;false
BackwardQuery: (<antlr.TokenQueue: void append(antlr.Token)> r0.nbrEntries = $i8,r0 (TokenQueue.append));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));true;-1;true;true;544;false;true;332;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.thePreambleAction = $r7,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;257;false;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r10 = $r9.block,$r9 (MakeGrammar.refReturnAction));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r10 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;275;false;true;12;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpec()> $i3 = $r10.guessing,$r10 (ANTLRParser.exceptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;386;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginAlt(boolean)> $r4 = $r3.block,$r3 (MakeGrammar.beginAlt));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: java.lang.String nameForExpandedGrammarFile(java.lang.String)> $r4 = r0.tool,r0 (GrammarFile.nameForExpandedGrammarFile));BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.tool = r1,r0 (GrammarFile.<init>));false;0;false;true;-1;true;true;3;false
BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.caseSensitive = varReplacer2444,r0 (LexerGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $z2 = $r10.caseSensitive,$r10 (MakeGrammar.refCharRange));true;-1;true;true;703;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r22 = $r21.block,$r21 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.MakeGrammar: void refCharRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r27 = r0.ruleBlock,r0 (MakeGrammar.refCharRange));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;279;false;true;611;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mNOT_OP(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNOT_OP));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r12 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;277;false;true;7;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r1 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;665;false;true;289;false;true;60;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r17 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;313;false;true;10;false
BackwardQuery: (<antlr.ANTLRLexer: void mTOKEN_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTOKEN_REF));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $r4 = r0.behavior,r0 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;535;false;true;237;false;true;3;false
BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r12 = r0.type,r0 (Grammar.toString));BackwardQuery: (<antlr.preprocessor.Grammar: void setType(java.lang.String)> r0.type = r1,r0 (Grammar.setType));false;0;false;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r11 = r0.args,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.args = r2,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;251;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;268;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> $r3 = r0.block,r0 (TreeBlockContext.addAlternativeElement));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r9 = $r8.block,$r8 (MakeGrammar.optionalSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> r0.i = $i3,r0 (VectorEnumerator.nextElement));BackwardQuery: (<antlr.collections.impl.VectorEnumerator: boolean hasMoreElements()> $i1 = r0.i,r0 (VectorEnumerator.hasMoreElements));true;23;false;true;232;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i1 = $r2.guessing,$r2 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;358;false;true;33;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r9 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;368;false;true;-1;true
BackwardQuery: (<antlr.RuleEndElement: void <init>(antlr.Grammar)> $i0 = r1.maxk,r1 (RuleEndElement.<init>));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.maxk = varReplacer2389,r0 (Grammar.<init>));true;-1;true;true;452;false;true;16;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mCARET(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCARET));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void newline()> $r1.line = $i1,$r1 (CharScanner.newline));BackwardQuery: (<antlr.CharScanner: int getLine()> $i0 = $r1.line,$r1 (CharScanner.getLine));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.CharScanner: int getLine()> $i0 = $r1.line,$r1 (CharScanner.getLine));BackwardQuery: (<antlr.LexerSharedInputState: void <init>(antlr.InputBuffer)> r0.line = varReplacer1622,r0 (LexerSharedInputState.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;759;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> r0.ruleEnd = $r16,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r6 = r0.ruleEnd,r0 (MakeGrammar.endRule));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.notTerminal));true;-1;true;true;233;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r1 = r0.grammar,r0 (MakeGrammar.abortGrammar));true;-1;true;true;261;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mWS));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;253;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i1 = $r2.guessing,$r2 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;253;false;true;31;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r8.altNum = varReplacer2252,$r8 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r3.altNum = $i2,$r3 (MakeGrammar.endAlt));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;704;false
BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i3 = $r4.guessing,$r4 (ANTLRParser.terminal));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;240;false;true;87;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r17 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;7;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r27 = r0.tool,r0 (DefineGrammarSymbols.startTreeWalker));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;228;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r88 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;270;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.treeParserSpec));true;-1;true;true;235;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r11 = r0.grammar,r0 (MakeGrammar.endSubRule));true;-1;true;true;244;false;true;25;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.alternatives = $r2,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.AlternativeBlock: antlr.Alternative getAlternativeAt(int)> $r1 = r0.alternatives,r0 (AlternativeBlock.getAlternativeAt));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r124 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;246;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void resetText()> $r3.tokenStartColumn = $i0,$r3 (CharScanner.resetText));BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $i1 = $r3.tokenStartColumn,$r3 (CharScanner.makeToken));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mELEMENT(boolean)> r0._returnToken = r10,r0 (PreprocessorLexer.mELEMENT));true;-1;true;true;-1;true;true;16;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $i3 = $r2.guessing,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;314;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $r11 = r0.grammar,r0 (MakeGrammar.refTokenRange));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;255;false;true;342;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $i1 = $r2.guessing,$r2 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;230;false;true;273;false
BackwardQuery: (<antlr.SimpleTokenManager: java.lang.Object clone()> $r13 = r0.antlrTool,r0 (SimpleTokenManager.clone));BackwardQuery: (<antlr.SimpleTokenManager: void <init>(java.lang.String,antlr.Tool)> r0.antlrTool = r2,r0 (SimpleTokenManager.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i38 = $r64.guessing,$r64 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;264;false;true;57;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $r2 = $r1.blockEnd,$r1 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r82 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;383;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i1 = $r2.guessing,$r2 (ANTLRParser.block));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;315;false;true;4;false
BackwardQuery: (<antlr.collections.impl.IndexedVector: void <init>(int)> r0.elements = $r1,r0 (IndexedVector.<init>));BackwardQuery: (<antlr.collections.impl.IndexedVector: void appendElement(java.lang.Object,java.lang.Object)> $r3 = r0.elements,r0 (IndexedVector.appendElement));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mXDIGIT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSEMI));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mRULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRULE_REF));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $i4 = r0.offset,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.offset = varReplacer1618,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.collections.impl.LList: void insertHead(java.lang.Object)> r2 = r0.head,r0 (LList.insertHead));BackwardQuery: (<antlr.collections.impl.LList: java.lang.Object deleteHead()> r0.head = $r5,r0 (LList.deleteHead));true;-1;true;true;490;false;true;0;false
BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z1 = r0.genHTML,r0 (Tool.getLanguage));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genHTML = varReplacer1886,r0 (Tool.processArguments));false;0;false;true;215;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRStringBuffer: void setLength(int)> r0.length = i0,r0 (ANTLRStringBuffer.setLength));BackwardQuery: (<antlr.ANTLRStringBuffer: void <init>()> r0.length = varReplacer1670,r0 (ANTLRStringBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r29 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));false;0;false;true;361;false;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $r3 = r0.grammar,r0 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;293;false;true;551;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> r0.greedySet = varReplacer2598,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z5 = r1.greedySet,r1 (MakeGrammar.setBlock));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i4 = $r11.guessing,$r11 (ANTLRParser.alternative));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;248;false;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r105 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));false;0;false;true;241;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.PreservingFileWriter: void <init>(java.lang.String)> r0.target_file = $r7,r0 (PreservingFileWriter.<init>));BackwardQuery: (<antlr.PreservingFileWriter: void close()> $r11 = r0.target_file,r0 (PreservingFileWriter.close));false;0;false;true;307;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ARG_ACTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mNESTED_ARG_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.generateAmbigWarnings = varReplacer2237,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> r0.generateAmbigWarnings = varReplacer2556,r0 (RuleBlock.setOption));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $r67 = r0.inputState,r0 (ANTLRParser.elementNoOptionSpec));true;572;false;true;256;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r84 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));true;-1;true;true;287;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCURLY_BLOCK_SCARF(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mCURLY_BLOCK_SCARF));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r2 = $r1.block,$r1 (MakeGrammar.beginExceptionGroup));true;-1;true;true;-1;true;true;10;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;314;false;true;464;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mWS));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRTokdefLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mBANG));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $r1 = r0.inputState,r0 (ANTLRParser.tokensSpec));true;488;false;true;210;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: void tree()> $r1 = r0.inputState,r0 (ANTLRParser.tree));true;501;false;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mPLUS));true;-1;true;true;722;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.grammarError = varReplacer1583,r0 (MakeGrammar.<init>));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.grammarError = varReplacer2405,r0 (MakeGrammar.reset));true;-1;true;true;252;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i9 = $r34.guessing,$r34 (ANTLRParser.rule));true;-1;true;true;235;false;true;1;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mDIGIT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mDIGIT));true;-1;true;true;-1;true;true;19;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mRCURLY));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSUBRULE_BLOCK(boolean)> r0._returnToken = r21,r0 (PreprocessorLexer.mSUBRULE_BLOCK));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setFileOption(antlr.Token,antlr.Token,java.lang.String)> $r66 = r0.tool,r0 (DefineGrammarSymbols.setFileOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;223;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r6 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));true;-1;true;true;236;false;true;24;false
BackwardQuery: (<antlr.ANTLRLexer: void mSEMI(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSEMI));BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> $r4 = r0.text,r0 (PreprocessorLexer.mALT));true;-1;true;true;722;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i5 = $r12.guessing,$r12 (ANTLRParser.grammar));true;-1;true;true;244;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void resetText()> $r2 = r0.inputState,r0 (CharScanner.resetText));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;894;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;264;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i12 = $r30.guessing,$r30 (ANTLRParser.range));true;-1;true;true;268;false;true;4;false
BackwardQuery: (<antlr.TokenSymbol: void <init>(java.lang.String)> r0.ttype = varReplacer2147,r0 (TokenSymbol.<init>));BackwardQuery: (<antlr.TokenSymbol: int getTokenType()> $i0 = r0.ttype,r0 (TokenSymbol.getTokenType));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> $i0 = r0.nMarkers,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.nMarkers = varReplacer1603,r0 (TokenBuffer.<init>));true;-1;true;true;474;false;true;8;false
BackwardQuery: (<antlr.CharQueue: void removeFirst()> r0.nbrEntries = $i5,r0 (CharQueue.removeFirst));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r4 = $r3.exportVocab,$r3 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r140.exportVocab = $r141,$r140 (DefineGrammarSymbols.endOptions));true;-1;true;true;566;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (DefineGrammarSymbols._refToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;919;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void terminal(antlr.Token)> $i1 = $r2.guessing,$r2 (ANTLRParser.terminal));true;-1;true;true;227;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r4 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;243;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i2 = $r5.guessing,$r5 (ANTLRParser.grammar));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;241;false;true;0;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r3 = r0.atomText,r0 (StringLiteralElement.<init>));BackwardQuery: (<antlr.GrammarAtom: void <init>(antlr.Grammar,antlr.Token,int)> r0.atomText = $r3,r0 (GrammarAtom.<init>));true;111;false;true;211;false;true;0;false
BackwardQuery: (<antlr.Token: void <init>()> r0.type = varReplacer1357,r0 (Token.<init>));BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $i6 = r1.type,r1 (MakeGrammar.defineRuleName));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> $r13 = r0.antlrTool,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));true;-1;true;true;465;false;true;76;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i41 = $r67.guessing,$r67 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;245;false;true;52;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: antlr.collections.impl.IndexedVector getGrammars()> $r1 = r0.grammars,r0 (GrammarFile.getGrammars));BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.grammars = $r3,r0 (GrammarFile.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.VectorEnumerator: java.lang.Object nextElement()> $i0 = $r4.lastElement,$r4 (VectorEnumerator.nextElement));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedy = varReplacer2246,r0 (AlternativeBlock.<init>));BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.greedy = $z4,r0 (MakeGrammar.setBlock));true;-1;true;true;263;false;true;0;false
BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r30 = r0.grammar,r0 (AlternativeBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.collections.impl.Vector: boolean removeElement(java.lang.Object)> $i1 = r0.lastElement,r0 (Vector.removeElement));BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.lastElement = varReplacer1595,r0 (Vector.<init>));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.CommonToken: java.lang.String toString()> $i2 = r0.col,r0 (CommonToken.toString));BackwardQuery: (<antlr.CommonToken: void setColumn(int)> r0.col = i0,r0 (CommonToken.setColumn));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharBuffer: void fill(int)> $r2 = r0.queue,r0 (CharBuffer.fill));BackwardQuery: (<antlr.InputBuffer: void <init>()> r0.queue = $r1,r0 (InputBuffer.<init>));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.blocks = $r1,r0 (MakeGrammar.reset));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r12 = r0.blocks,r0 (MakeGrammar.synPred));true;-1;true;true;261;false;true;23;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r22 = $r21.block,$r21 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i7 = $r20.guessing,$r20 (ANTLRParser.lexerSpec));true;-1;true;true;234;false;true;1;false
BackwardQuery: (<antlr.Grammar: boolean getDefaultErrorHandler()> $z0 = r0.defaultErrorHandler,r0 (Grammar.getDefaultErrorHandler));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.defaultErrorHandler = varReplacer2390,r0 (Grammar.<init>));true;-1;true;true;342;false;true;12;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r136 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;234;false;true;0;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.Parser: void setFilename(java.lang.String)> $r2 = r0.inputState,r0 (Parser.setFilename));true;422;false;true;216;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r17 = $r16.blockEnd,$r16 (MakeGrammar.synPred));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;3;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mML_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mML_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r0._returnToken = r15,r0 (PreprocessorLexer.mID_OR_KEYWORD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void block()> $i1 = $r2.guessing,$r2 (ANTLRParser.block));BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));true;-1;true;true;223;false;true;62;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i15 = $r50.guessing,$r50 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;236;false;true;1;false
BackwardQuery: (<antlr.Grammar: boolean setOption(java.lang.String,antlr.Token)> r0.defaultErrorHandler = varReplacer2686,r0 (Grammar.setOption));BackwardQuery: (<antlr.Grammar: boolean getDefaultErrorHandler()> $z0 = r0.defaultErrorHandler,r0 (Grammar.getDefaultErrorHandler));true;-1;true;true;630;false;true;76;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOMMA));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;316;false;true;810;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r5 = r2.block,r2 (MakeGrammar.endRule));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.MakeGrammar: void endRule(java.lang.String)> $r7 = r0.ruleEnd,r0 (MakeGrammar.endRule));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleEnd = varReplacer2401,r0 (MakeGrammar.reset));true;-1;true;true;257;false;true;15;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r27 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mNEWLINE(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mNEWLINE));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;723;false;true;-1;true
BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> $r3 = r0.text,r0 (ANTLRLexer.mML_COMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;824;false;true;184;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.genDiagnostics = varReplacer1908,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genDiagnostics = varReplacer1888,r0 (Tool.processArguments));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = varReplacer1574,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r40 = r0.tokenText,r0 (MismatchedTokenException.getMessage));false;4;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r11 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;234;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r3 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;234;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i10 = $r35.guessing,$r35 (ANTLRParser.rule));true;-1;true;true;391;false;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> $r1 = r0.text,r0 (ANTLRLexer.mIMPLIES));true;-1;true;true;881;false;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i0 = $r2.guessing,$r2 (ANTLRParser.ebnf));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r8 = r0.grammar,r0 (MakeGrammar.abortGrammar));true;-1;true;true;242;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void refCharLiteral(antlr.Token,antlr.Token,boolean,int,boolean)> $r15 = r0.grammar,r0 (MakeGrammar.refCharLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;236;false;true;654;false
BackwardQuery: (<antlr.ANTLRParser: void elementOptionSpec()> $r4 = r0.behavior,r0 (ANTLRParser.elementOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;543;false;true;274;false;true;135;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i41 = $r67.guessing,$r67 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;313;false;true;68;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mML_COMMENT(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mML_COMMENT));true;-1;true;true;731;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $i1 = $r3.guessing,$r3 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;239;false;true;3;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r11 = r0.tool,r0 (MakeGrammar.endExceptionSpec));true;-1;true;true;222;false;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void setText(java.lang.String)> $r2 = r0.text,r0 (CharScanner.setText));true;-1;true;true;716;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void lexerSpec(java.lang.String)> $i6 = $r3.guessing,$r3 (ANTLRParser.lexerSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));true;-1;true;true;239;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r3 = $r2.block,$r2 (MakeGrammar.refAction));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r9 = r0.tool,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;257;false;true;9;false
BackwardQuery: (<antlr.CharScanner: antlr.Token makeToken(int)> $r3 = r0.inputState,r0 (CharScanner.makeToken));BackwardQuery: (<antlr.CharScanner: void <init>(antlr.LexerSharedInputState)> r0.inputState = r1,r0 (CharScanner.<init>));true;-1;true;true;891;false;true;-1;true
BackwardQuery: (<antlr.collections.impl.BitSet: boolean member(int)> $r2 = r0.bits,r0 (BitSet.member));BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMENT(boolean)> r0._returnToken = r8,r0 (PreprocessorLexer.mCOMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mTREE_BEGIN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mTREE_BEGIN));BackwardQuery: (<antlr.ANTLRLexer: void mPLUS(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mPLUS));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCOMMA(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mCOMMA));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mESC(boolean)> r0._returnToken = r14,r0 (PreprocessorLexer.mESC));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.antlrTool = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.AlternativeBlock: void setOption(antlr.Token,antlr.Token)> $r8 = $r6.antlrTool,$r6 (AlternativeBlock.setOption));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.TokenSymbol: java.lang.String getASTNodeType()> $r1 = r0.ASTNodeType,r0 (TokenSymbol.getASTNodeType));BackwardQuery: (<antlr.TokenSymbol: void setASTNodeType(java.lang.String)> r0.ASTNodeType = r1,r0 (TokenSymbol.setASTNodeType));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $r6 = r0.behavior,r0 (ANTLRParser.tokensSpec));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;449;false;true;212;false;true;9;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void refPreambleAction(antlr.Token)> r0.thePreambleAction = r1,r0 (DefineGrammarSymbols.refPreambleAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r16 = r0.thePreambleAction,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;240;false;true;2;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.name = r2,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r9 = r0.name,r0 (Grammar.toString));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i7 = $r21.guessing,$r21 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;311;false;true;209;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;872;false;true;258;false
BackwardQuery: (<antlr.RuleBlock: void setOption(antlr.Token,antlr.Token)> $r35 = r0.grammar,r0 (RuleBlock.setOption));BackwardQuery: (<antlr.GrammarElement: void <init>(antlr.Grammar)> r0.grammar = r1,r0 (GrammarElement.<init>));true;-1;true;true;-1;true;true;15;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: int ast_type_spec()> $i2 = $r2.guessing,$r2 (ANTLRParser.ast_type_spec));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void rule()> $i4 = $r4.guessing,$r4 (ANTLRParser.rule));true;-1;true;true;236;false;true;2;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r30 = r0.grammar,r0 (MakeGrammar.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;241;false;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mXDIGIT(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mXDIGIT));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void endTree()> $r4 = r1.block,r1 (MakeGrammar.endTree));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r93 = r0.tokenManagers,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tokenManagers = $r5,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;280;false;true;40;false
BackwardQuery: (<antlr.TokenRangeElement: void <init>(antlr.Grammar,antlr.Token,antlr.Token,int)> r0.begin = varReplacer2200,r0 (TokenRangeElement.<init>));BackwardQuery: (<antlr.MakeGrammar: void refTokenRange(antlr.Token,antlr.Token,antlr.Token,int,boolean)> $i1 = r4.begin,r4 (MakeGrammar.refTokenRange));true;119;false;true;372;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r13 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;266;false;true;572;false
BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i7 = $r14.guessing,$r14 (ANTLRParser.range));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;248;false;true;63;false
BackwardQuery: (<antlr.Grammar: void setTokenManager(antlr.TokenManager)> r0.tokenManager = r1,r0 (Grammar.setTokenManager));BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r26 = $r25.tokenManager,$r25 (DefineGrammarSymbols.defineToken));true;-1;true;true;493;false;true;0;false
BackwardQuery: (<antlr.collections.impl.BitSet: void <init>(int)> r0.bits = $r1,r0 (BitSet.<init>));BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r5 = r1.bits,r1 (BitSet.orInPlace));true;-1;true;true;220;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;250;false;true;5;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r14 = $r13.block,$r13 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mID_OR_KEYWORD(boolean)> r16 = r0._returnToken,r0 (PreprocessorLexer.mID_OR_KEYWORD));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mACTION(boolean)> $r1 = r0.text,r0 (PreprocessorLexer.mACTION));true;-1;true;true;733;false;true;1;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void exceptionGroup()> $i1 = $r5.guessing,$r5 (ANTLRParser.exceptionGroup));true;-1;true;true;236;false;true;4;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void treeParserOptionsSpec()> $i1 = $r3.guessing,$r3 (ANTLRParser.treeParserOptionsSpec));true;-1;true;true;239;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r32 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;239;false;true;2;false
BackwardQuery: (<antlr.preprocessor.Rule: boolean getBang()> $z0 = r0.bang,r0 (Rule.getBang));BackwardQuery: (<antlr.preprocessor.Rule: void <init>(java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector,antlr.preprocessor.Grammar)> r0.bang = varReplacer1801,r0 (Rule.<init>));false;1;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mIMPLIES(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mIMPLIES));BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRLexer.mESC));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> r9 = r0._returnToken,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionGroup()> $r2 = $r1.block,$r1 (MakeGrammar.beginExceptionGroup));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r14 = $r11.importVocab,$r11 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.Grammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.importVocab = varReplacer2397,r0 (Grammar.<init>));true;-1;true;true;345;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.TokenBuffer: void <init>(antlr.TokenStream)> r0.input = r1,r0 (TokenBuffer.<init>));BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $r2 = r0.input,r0 (TokenBuffer.fill));true;-1;true;true;499;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r27 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;397;false;true;9;false
BackwardQuery: (<antlr.MakeGrammar: void labelElement(antlr.AlternativeElement,antlr.Token)> $r5 = r0.ruleBlock,r0 (MakeGrammar.labelElement));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.ruleBlock = varReplacer2402,r0 (MakeGrammar.reset));true;-1;true;true;239;false;true;-1;true
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> $r10 = r0.grammar,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;4;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mSTRING(boolean)> r0._returnToken = r7,r0 (ANTLRTokdefLexer.mSTRING));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mESC(boolean)> r0._returnToken = r14,r0 (ANTLRTokdefLexer.mESC));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mLPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mLPAREN));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r10 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;239;false;true;469;false
BackwardQuery: (<antlr.TokenBuffer: void fill(int)> $i3 = $r1.nbrEntries,$r1 (TokenBuffer.fill));BackwardQuery: (<antlr.TokenQueue: void init(int)> r0.nbrEntries = varReplacer1607,r0 (TokenQueue.init));true;-1;true;true;468;false;true;296;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r24 = r0.grammar,r0 (DefineGrammarSymbols.setGrammarOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;237;false;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r84 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.BlockContext: antlr.Alternative currentAlt()> $r1 = r0.block,r0 (BlockContext.currentAlt));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;19;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r9.blockEnd = $r10,$r9 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r5 = r1.blockEnd,r1 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: void mID(boolean)> r0._returnToken = r8,r0 (ANTLRTokdefLexer.mID));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;724;false;true;120;false
BackwardQuery: (<antlr.MakeGrammar: void refRule(antlr.Token,antlr.Token,antlr.Token,antlr.Token,int)> $r6 = r0.grammar,r0 (MakeGrammar.refRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;239;false;true;726;false
BackwardQuery: (<antlr.collections.impl.Vector: void <init>(int)> r0.data = $r1,r0 (Vector.<init>));BackwardQuery: (<antlr.collections.impl.Vector: void ensureCapacity(int)> $r2 = r0.data,r0 (Vector.ensureCapacity));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refExceptionHandler(antlr.Token,antlr.Token)> $r5 = r0.currentExceptionSpec,r0 (MakeGrammar.refExceptionHandler));BackwardQuery: (<antlr.MakeGrammar: void beginExceptionSpec(antlr.Token)> r0.currentExceptionSpec = $r2,r0 (MakeGrammar.beginExceptionSpec));true;-1;true;true;235;false;true;0;false
BackwardQuery: (<antlr.StringLiteralElement: void <init>(antlr.Grammar,antlr.Token,int)> $r10 = $r9.charVocabulary,$r9 (StringLiteralElement.<init>));BackwardQuery: (<antlr.LexerGrammar: void <init>(java.lang.String,antlr.Tool,java.lang.String)> r0.charVocabulary = $r4,r0 (LexerGrammar.<init>));true;-1;true;true;351;false;true;260;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> $r7 = r0.text,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;735;false;true;1;false
BackwardQuery: (<antlr.ParserSharedInputState: void <init>()> r0.guessing = varReplacer1577,r0 (ParserSharedInputState.<init>));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i6 = $r10.guessing,$r10 (ANTLRParser.tokensSpec));true;-1;true;true;223;false;true;0;false
BackwardQuery: (<antlr.RuleRefElement: void <init>(antlr.Grammar,antlr.Token,int)> r0.targetRule = $r5,r0 (RuleRefElement.<init>));BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r7 = r3.targetRule,r3 (AlternativeBlock.removeTrackingOfRuleRefs));true;-1;true;true;-1;true;true;19;false
BackwardQuery: (<antlr.preprocessor.Grammar: void <init>(antlr.Tool,java.lang.String,java.lang.String,antlr.collections.impl.IndexedVector)> r0.superGrammar = r3,r0 (Grammar.<init>));BackwardQuery: (<antlr.preprocessor.Grammar: antlr.preprocessor.Grammar getSuperGrammar()> $r2 = r0.superGrammar,r0 (Grammar.getSuperGrammar));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.Tool: void <init>()> r0.hasError = varReplacer1909,r0 (Tool.<init>));BackwardQuery: (<antlr.Tool: boolean hasError()> $z0 = r0.hasError,r0 (Tool.hasError));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r71 = $r70.exportVocab,$r70 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;476;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void append(char)> $i5 = r0.sizeLessOne,r0 (CharQueue.append));BackwardQuery: (<antlr.CharQueue: void init(int)> r0.sizeLessOne = $i1,r0 (CharQueue.init));true;-1;true;true;-1;true;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refReturnAction(antlr.Token)> $r17 = r0.tool,r0 (MakeGrammar.refReturnAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.tool = r1,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;367;false;true;29;false
BackwardQuery: (<antlr.AlternativeBlock: void removeTrackingOfRuleRefs(antlr.Grammar)> $r9 = r4.references,r4 (AlternativeBlock.removeTrackingOfRuleRefs));BackwardQuery: (<antlr.RuleSymbol: void <init>(java.lang.String)> r0.references = $r2,r0 (RuleSymbol.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mWS(boolean)> $r5 = r0.text,r0 (PreprocessorLexer.mWS));true;-1;true;true;747;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> r0.exportVocab = $r39,r0 (Grammar.expandInPlace));BackwardQuery: (<antlr.preprocessor.Grammar: void expandInPlace()> $r15 = r1.exportVocab,r1 (Grammar.expandInPlace));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r96 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;237;false;true;1;false
BackwardQuery: (<antlr.preprocessor.Grammar: void setPreambleAction(java.lang.String)> r0.preambleAction = r1,r0 (Grammar.setPreambleAction));BackwardQuery: (<antlr.preprocessor.Grammar: java.lang.String toString()> $r5 = r0.preambleAction,r0 (Grammar.toString));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.collections.impl.BitSet: void orInPlace(antlr.collections.impl.BitSet)> $r7 = r1.bits,r1 (BitSet.orInPlace));BackwardQuery: (<antlr.collections.impl.BitSet: void growToInclude(int)> r0.bits = r1,r0 (BitSet.growToInclude));false;21;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i30 = $r52.guessing,$r52 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;240;false;true;51;false
BackwardQuery: (<antlr.TokenBuffer: int mark()> r0.nMarkers = $i1,r0 (TokenBuffer.mark));BackwardQuery: (<antlr.TokenBuffer: void rewind(int)> $i1 = r0.nMarkers,r0 (TokenBuffer.rewind));true;-1;true;true;666;false;true;8;false
BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.grammarFile = $r7,r0 (Tool.processArguments));BackwardQuery: (<antlr.Tool: java.io.Reader getGrammarReader()> $r9 = r0.grammarFile,r0 (Tool.getGrammarReader));true;-1;true;true;210;false;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.numParsers = $i2,r0 (DefineGrammarSymbols.startParser));BackwardQuery: (<antlr.DefineGrammarSymbols: void <init>(antlr.Tool,java.lang.String[],antlr.LLkAnalyzer)> r0.numParsers = varReplacer1589,r0 (DefineGrammarSymbols.<init>));true;-1;true;true;222;false;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mCHAR_LITERAL));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mALT(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mALT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r9 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;393;false;true;258;false
BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r5.block = $r6,$r5 (MakeGrammar.beginSubRule));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r24 = $r23.block,$r23 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.oneOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.TreeBlockContext: void addAlternativeElement(antlr.AlternativeElement)> r0.nextElementIsRoot = varReplacer2582,r0 (TreeBlockContext.addAlternativeElement));BackwardQuery: (<antlr.TreeBlockContext: void <init>()> r0.nextElementIsRoot = varReplacer2257,r0 (TreeBlockContext.<init>));true;-1;true;true;-1;true;true;35;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.tabsize = varReplacer1667,r0 (CharScanner.<init>));BackwardQuery: (<antlr.CharScanner: void tab()> $i5 = r0.tabsize,r0 (CharScanner.tab));true;-1;true;true;728;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void endAlt()> $i0 = r0.nested,r0 (MakeGrammar.endAlt));BackwardQuery: (<antlr.MakeGrammar: void reset()> r0.nested = varReplacer2403,r0 (MakeGrammar.reset));true;-1;true;true;349;false;true;426;false
BackwardQuery: (<antlr.ANTLRLexer: void mNESTED_ACTION(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mNESTED_ACTION));BackwardQuery: (<antlr.ANTLRLexer: void mASSIGN(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mASSIGN));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.ANTLRParser: void ebnf(antlr.Token,boolean)> $i17 = $r39.guessing,$r39 (ANTLRParser.ebnf));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;302;false;true;157;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i2 = $r5.guessing,$r5 (ANTLRParser.grammar));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;293;false;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));BackwardQuery: (<antlr.ANTLRLexer: int mINTERNAL_RULE_REF(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mINTERNAL_RULE_REF));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> $r6 = r2.synPred,r2 (LLkAnalyzer.subruleCanBeInverted));BackwardQuery: (<antlr.MakeGrammar: void endSubRule()> $r10.synPred = r28,$r10 (MakeGrammar.endSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRLexer: void mBANG(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mBANG));BackwardQuery: (<antlr.ANTLRLexer: void mCHAR_LITERAL(boolean)> r0._returnToken = r9,r0 (ANTLRLexer.mCHAR_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void refAction(antlr.Token)> $r5 = r0.grammar,r0 (MakeGrammar.refAction));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;244;false;true;229;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r16 = $r15.block,$r15 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r6 = $r5.exceptionSpec,$r5 (MakeGrammar.endExceptionSpec));BackwardQuery: (<antlr.MakeGrammar: void endExceptionSpec()> $r8.exceptionSpec = $r9,$r8 (MakeGrammar.endExceptionSpec));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> r0.initAction = $r3,r0 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.initAction = varReplacer2239,r0 (AlternativeBlock.<init>));true;-1;true;true;212;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void notTerminal(antlr.Token)> $i5 = $r13.guessing,$r13 (ANTLRParser.notTerminal));true;-1;true;true;241;false;true;4;false
BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r3 = $r2.block,$r2 (MakeGrammar.setUserExceptions));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;2;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));BackwardQuery: (<antlr.MakeGrammar: void refToken(antlr.Token,antlr.Token,antlr.Token,antlr.Token,boolean,int,boolean)> $r7 = r0.grammar,r0 (MakeGrammar.refToken));false;0;false;true;237;false;true;5;false
BackwardQuery: (<antlr.preprocessor.Tool: boolean preprocess()> $r5 = r0.grammarFileName,r0 (Tool.preprocess));BackwardQuery: (<antlr.preprocessor.Tool: void processArguments(java.lang.String[])> r0.grammarFileName = $r6,r0 (Tool.processArguments));true;26;false;true;208;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r8 = $r7.block,$r7 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: void mOR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.GrammarFile: void addHeaderAction(java.lang.String)> $r3 = r0.headerAction,r0 (GrammarFile.addHeaderAction));BackwardQuery: (<antlr.preprocessor.GrammarFile: void <init>(antlr.Tool,java.lang.String)> r0.headerAction = varReplacer1854,r0 (GrammarFile.<init>));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void _refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r5 = r0.grammar,r0 (DefineGrammarSymbols._refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;238;false;true;-1;true
BackwardQuery: (<antlr.MakeGrammar: void refTokensSpecElementOption(antlr.Token,antlr.Token,antlr.Token)> $r16 = r0.grammar,r0 (MakeGrammar.refTokensSpecElementOption));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));false;0;false;true;242;false;true;51;false
BackwardQuery: (<antlr.ANTLRLexer: void mRANGE(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRANGE));BackwardQuery: (<antlr.ANTLRLexer: void mARG_ACTION(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mARG_ACTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r13.block = r1,$r13 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginSubRule(antlr.Token,antlr.Token,boolean)> $r17 = $r16.block,$r16 (MakeGrammar.beginSubRule));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.ANTLRLexer: void mACTION(boolean)> r0._returnToken = r16,r0 (ANTLRLexer.mACTION));BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.LLkAnalyzer: boolean subruleCanBeInverted(antlr.AlternativeBlock,boolean)> r3 = r2.head,r2 (LLkAnalyzer.subruleCanBeInverted));BackwardQuery: (<antlr.Alternative: void addElement(antlr.AlternativeElement)> r0.head = r1,r0 (Alternative.addElement));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineToken(antlr.Token,antlr.Token)> $r17 = r0.grammar,r0 (DefineGrammarSymbols.defineToken));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;385;false;true;3;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void tokensSpec()> $i4 = $r2.guessing,$r2 (ANTLRParser.tokensSpec));true;-1;true;true;455;false;true;3;false
BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.foundChar = c0,r0 (MismatchedCharException.<init>));BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i4 = r0.foundChar,r0 (MismatchedCharException.getMessage));false;5;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void elementNoOptionSpec()> $i36 = $r60.guessing,$r60 (ANTLRParser.elementNoOptionSpec));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r9.guessing = $i16,$r9 (ANTLRParser.classDef));true;-1;true;true;286;false;true;69;false
BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));BackwardQuery: (<antlr.ANTLRParser: antlr.collections.impl.BitSet charSet()> $r1 = r0.inputState,r0 (ANTLRParser.charSet));true;485;false;true;212;false;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: void mQUESTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mQUESTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;730;false;true;165;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r20 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void abortGrammar()> r0.grammar = varReplacer2447,r0 (DefineGrammarSymbols.abortGrammar));true;-1;true;true;242;false;true;11;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mCLOSE_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCLOSE_ELEMENT_OPTION));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mSTAR(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mSTAR));BackwardQuery: (<antlr.ANTLRLexer: void mSL_COMMENT(boolean)> r0._returnToken = r10,r0 (ANTLRLexer.mSL_COMMENT));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.ANTLRParser: boolean lastInRule()> $i0 = r0.blockNesting,r0 (ANTLRParser.lastInRule));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.blockNesting = varReplacer1576,r0 (ANTLRParser.<init>));true;472;false;true;211;false;true;567;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void parserSpec(java.lang.String)> $i3 = $r4.guessing,$r4 (ANTLRParser.parserSpec));true;-1;true;true;243;false;true;0;false
BackwardQuery: (<antlr.CharQueue: void init(int)> r0.nbrEntries = varReplacer1617,r0 (CharQueue.init));BackwardQuery: (<antlr.CharQueue: void append(char)> $i3 = r0.nbrEntries,r0 (CharQueue.append));true;-1;true;true;-1;true;true;6;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.ANTLRLexer: void mSTRING_LITERAL(boolean)> r0._returnToken = r7,r0 (ANTLRLexer.mSTRING_LITERAL));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mCHAR_LITERAL(boolean)> $r8 = r0.text,r0 (PreprocessorLexer.mCHAR_LITERAL));true;-1;true;true;739;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void oneOrMoreSubRule()> $r18 = r0.grammar,r0 (MakeGrammar.oneOrMoreSubRule));BackwardQuery: (<antlr.DefineGrammarSymbols: void reset()> r0.grammar = varReplacer2407,r0 (DefineGrammarSymbols.reset));true;-1;true;true;237;false;true;946;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r112 = r0.grammar,r0 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;236;false;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mRULE_BLOCK(boolean)> r0._returnToken = r28,r0 (PreprocessorLexer.mRULE_BLOCK));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;884;false;true;392;false
BackwardQuery: (<antlr.MakeGrammar: void abortGrammar()> $r8 = r0.grammar,r0 (MakeGrammar.abortGrammar));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;242;false;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mWS(boolean)> r0._returnToken = r8,r0 (ANTLRLexer.mWS));BackwardQuery: (<antlr.ANTLRLexer: void mWILDCARD(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mWILDCARD));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void defineRuleName(antlr.Token,java.lang.String,boolean,java.lang.String)> $r14 = r0.grammar,r0 (DefineGrammarSymbols.defineRuleName));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));false;0;false;true;416;false;true;29;false
BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r2 = r0.grammar,r0 (MakeGrammar.beginTree));BackwardQuery: (<antlr.DefineGrammarSymbols: void startLexer(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = r6,r0 (DefineGrammarSymbols.startLexer));true;-1;true;true;274;false;true;342;false
BackwardQuery: (<antlr.ANTLRParser: void grammar()> $i5 = $r12.guessing,$r12 (ANTLRParser.grammar));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;240;false;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tokensSpecOptions(antlr.Token)> $r3 = r0.inputState,r0 (ANTLRParser.tokensSpecOptions));BackwardQuery: (<antlr.Parser: void <init>(antlr.ParserSharedInputState)> r0.inputState = r1,r0 (Parser.<init>));true;491;false;true;216;false;true;32;false
BackwardQuery: (<antlr.ANTLRParser: void alternative()> $i4 = $r11.guessing,$r11 (ANTLRParser.alternative));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r2.guessing = $i4,$r2 (ANTLRParser.classDef));true;-1;true;true;244;false;true;7;false
BackwardQuery: (<antlr.MismatchedCharException: java.lang.String getMessage()> $i0 = r0.mismatchType,r0 (MismatchedCharException.getMessage));BackwardQuery: (<antlr.MismatchedCharException: void <init>(char,char,boolean,antlr.CharScanner)> r0.mismatchType = $b4,r0 (MismatchedCharException.<init>));true;-1;true;true;-1;true;true;3;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOLON(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mCOLON));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;737;false;true;160;false
BackwardQuery: (<antlr.MakeGrammar: antlr.AlternativeBlock createOptionalRuleRef(java.lang.String,antlr.Token)> $r15 = r0.grammar,r0 (MakeGrammar.createOptionalRuleRef));BackwardQuery: (<antlr.DefineGrammarSymbols: void startParser(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startParser));true;-1;true;true;274;false;true;-1;true
BackwardQuery: (<antlr.MismatchedTokenException: void <init>(java.lang.String[],antlr.Token,int,boolean,java.lang.String)> r0.tokenText = varReplacer1574,r0 (MismatchedTokenException.<init>));BackwardQuery: (<antlr.MismatchedTokenException: java.lang.String getMessage()> $r23 = r0.tokenText,r0 (MismatchedTokenException.getMessage));false;3;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void tree()> $i3 = $r7.guessing,$r7 (ANTLRParser.tree));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;237;false;true;90;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r15 = r2.blockEnd,r2 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r14.blockEnd = $r15,$r14 (MakeGrammar.zeroOrMoreSubRule));true;-1;true;true;-1;true;true;1;false
BackwardQuery: (<antlr.CommonToken: java.lang.String toString()> $i0 = r0.type,r0 (CommonToken.toString));BackwardQuery: (<antlr.CommonToken: void <init>(int,java.lang.String)> r0.type = i0,r0 (CommonToken.<init>));false;0;false;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mOPEN_ELEMENT_OPTION(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mOPEN_ELEMENT_OPTION));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void rule()> $i7 = $r5.guessing,$r5 (ANTLRParser.rule));BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r8.guessing = $i14,$r8 (ANTLRParser.classDef));true;-1;true;true;241;false;true;1;false
BackwardQuery: (<antlr.MakeGrammar: void setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock)> $z4 = r1.greedy,r1 (MakeGrammar.setBlock));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.greedy = varReplacer2246,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;13;false
BackwardQuery: (<antlr.ANTLRTokdefLexer: antlr.Token nextToken()> r0._returnToken = $r6,r0 (ANTLRTokdefLexer.nextToken));BackwardQuery: (<antlr.ANTLRTokdefLexer: void mRPAREN(boolean)> r0._returnToken = r6,r0 (ANTLRTokdefLexer.mRPAREN));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mSL_COMMENT(boolean)> r0._returnToken = r6,r0 (PreprocessorLexer.mSL_COMMENT));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r2 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRParser: void exceptionSpecNoLabel()> $r4 = r0.behavior,r0 (ANTLRParser.exceptionSpecNoLabel));BackwardQuery: (<antlr.ANTLRParser: void <init>(antlr.TokenBuffer,antlr.ANTLRGrammarParseBehavior,antlr.Tool)> r0.behavior = r2,r0 (ANTLRParser.<init>));true;631;false;true;279;false;true;59;false
BackwardQuery: (<antlr.ANTLRParser: void classDef()> $r3.guessing = $i7,$r3 (ANTLRParser.classDef));BackwardQuery: (<antlr.ANTLRParser: void range(antlr.Token)> $i4 = $r7.guessing,$r7 (ANTLRParser.range));true;-1;true;true;303;false;true;5;false
BackwardQuery: (<antlr.ANTLRLexer: void mCOMMENT(boolean)> $r5 = r0.text,r0 (ANTLRLexer.mCOMMENT));BackwardQuery: (<antlr.CharScanner: void <init>()> r0.text = $r1,r0 (CharScanner.<init>));true;-1;true;true;-1;true;true;828;false
BackwardQuery: (<antlr.MakeGrammar: void refStringLiteral(antlr.Token,antlr.Token,int,boolean)> $r6 = r0.grammar,r0 (MakeGrammar.refStringLiteral));BackwardQuery: (<antlr.DefineGrammarSymbols: void startTreeWalker(java.lang.String,antlr.Token,java.lang.String,java.lang.String)> r0.grammar = $r7,r0 (DefineGrammarSymbols.startTreeWalker));true;-1;true;true;250;false;true;492;false
BackwardQuery: (<antlr.MakeGrammar: void zeroOrMoreSubRule()> $r13.block = r1,$r13 (MakeGrammar.zeroOrMoreSubRule));BackwardQuery: (<antlr.MakeGrammar: void setUserExceptions(java.lang.String)> $r3 = $r2.block,$r2 (MakeGrammar.setUserExceptions));true;-1;true;true;-1;true;true;9;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mASSIGN_RHS(boolean)> r0._returnToken = r9,r0 (PreprocessorLexer.mASSIGN_RHS));BackwardQuery: (<antlr.CharScanner: void <init>()> r0._returnToken = varReplacer1661,r0 (CharScanner.<init>));true;-1;true;true;753;false;true;280;false
BackwardQuery: (<antlr.MakeGrammar: void synPred()> $r8 = $r7.block,$r7 (MakeGrammar.synPred));BackwardQuery: (<antlr.MakeGrammar: void beginTree(antlr.Token)> $r5.block = $r6,$r5 (MakeGrammar.beginTree));true;-1;true;true;-1;true;true;8;false
BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: void mARG_ACTION(boolean)> r0._returnToken = r7,r0 (PreprocessorLexer.mARG_ACTION));BackwardQuery: (<antlr.preprocessor.PreprocessorLexer: antlr.Token nextToken()> $r3 = r0._returnToken,r0 (PreprocessorLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.ANTLRLexer: void mRCURLY(boolean)> r0._returnToken = r6,r0 (ANTLRLexer.mRCURLY));BackwardQuery: (<antlr.ANTLRLexer: antlr.Token nextToken()> $r15 = r0._returnToken,r0 (ANTLRLexer.nextToken));true;-1;true;true;-1;true;true;0;false
BackwardQuery: (<antlr.DefineGrammarSymbols: void endOptions()> $r78 = $r77.exportVocab,$r77 (DefineGrammarSymbols.endOptions));BackwardQuery: (<antlr.DefineGrammarSymbols: void setGrammarOption(antlr.Token,antlr.Token)> $r18.exportVocab = $r19,$r18 (DefineGrammarSymbols.setGrammarOption));true;-1;true;true;488;false;true;0;false
BackwardQuery: (<antlr.MakeGrammar: void optionalSubRule()> $z0 = $r2.not,$r2 (MakeGrammar.optionalSubRule));BackwardQuery: (<antlr.AlternativeBlock: void <init>(antlr.Grammar)> r0.not = varReplacer2247,r0 (AlternativeBlock.<init>));true;-1;true;true;-1;true;true;7;false
BackwardQuery: (<antlr.Tool: void processArguments(java.lang.String[])> r0.genHTML = varReplacer1884,r0 (Tool.processArguments));BackwardQuery: (<antlr.Tool: java.lang.String getLanguage(antlr.MakeGrammar)> $z1 = r0.genHTML,r0 (Tool.getLanguage));true;-1;true;true;209;false;true;0;false
