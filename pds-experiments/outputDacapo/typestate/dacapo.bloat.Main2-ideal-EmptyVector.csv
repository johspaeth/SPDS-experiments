Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;VisitedMethod;ReachableMethods;CallRecursion;FieldLoop;MaxAccessPath;MaxMemory
ideal;EmptyVector;ForwardQuery: (<dacapo.parser.ConfigFile: void <init>(java.io.InputStream,java.lang.String)> $r4 = new Vector,$r4 (ConfigFile.<init>) Value: new java.util.Vector);$r4 = new java.util.Vector;<dacapo.parser.ConfigFile: void <init>(java.io.InputStream,java.lang.String)>;dacapo.parser.ConfigFile;true;false;2895;1669;34;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<dacapo.parser.ConfigFile: void <init>(java.io.InputStream,java.lang.String)> $r4 = new Vector,$r4 (ConfigFile.<init>) Value: new java.util.Vector);$r4 = new java.util.Vector;<dacapo.parser.ConfigFile: void <init>(java.io.InputStream,java.lang.String)>;dacapo.parser.ConfigFile;true;false;2899;1669;34;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.tree.LEGatherer: java.util.Vector getLEs(EDU.purdue.cs.bloat.cfg.Block)> $r2 = new Vector,$r2 (LEGatherer.getLEs) Value: new java.util.Vector);$r2 = new java.util.Vector;<EDU.purdue.cs.bloat.tree.LEGatherer: java.util.Vector getLEs(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.LEGatherer;false;false;74428;2128;723;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.tree.LEGatherer: java.util.Vector getLEs(EDU.purdue.cs.bloat.cfg.Block)> $r2 = new Vector,$r2 (LEGatherer.getLEs) Value: new java.util.Vector);$r2 = new java.util.Vector;<EDU.purdue.cs.bloat.tree.LEGatherer: java.util.Vector getLEs(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.LEGatherer;false;false;74432;2128;723;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.tree.AscendVisitor: void <init>(java.util.Hashtable,java.util.Hashtable)> $r3 = new Vector,$r3 (AscendVisitor.<init>) Value: new java.util.Vector);$r3 = new java.util.Vector;<EDU.purdue.cs.bloat.tree.AscendVisitor: void <init>(java.util.Hashtable,java.util.Hashtable)>;EDU.purdue.cs.bloat.tree.AscendVisitor;false;false;19596;33547;797;4467;true;true;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.tree.AscendVisitor: void <init>(java.util.Hashtable,java.util.Hashtable)> $r3 = new Vector,$r3 (AscendVisitor.<init>) Value: new java.util.Vector);$r3 = new java.util.Vector;<EDU.purdue.cs.bloat.tree.AscendVisitor: void <init>(java.util.Hashtable,java.util.Hashtable)>;EDU.purdue.cs.bloat.tree.AscendVisitor;false;false;19674;33547;797;4467;true;true;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()> $r22 = new Stack,$r22 (CodeArray.buildCode) Value: new java.util.Stack);$r22 = new java.util.Stack;<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;3140;90;9;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()> $r22 = new Stack,$r22 (CodeArray.buildCode) Value: new java.util.Stack);$r22 = new java.util.Stack;<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;3141;90;9;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()> $r7 = new Stack,$r7 (FlowGraph.splitReducibleLoops) Value: new java.util.Stack);$r7 = new java.util.Stack;<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;302;809;20;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()> $r7 = new Stack,$r7 (FlowGraph.splitReducibleLoops) Value: new java.util.Stack);$r7 = new java.util.Stack;<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;304;809;20;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.util.UnionFind: EDU.purdue.cs.bloat.util.UnionFind$Node findNode(EDU.purdue.cs.bloat.util.UnionFind$Node)> $r3 = new Stack,$r3 (UnionFind.findNode) Value: new java.util.Stack);$r3 = new java.util.Stack;<EDU.purdue.cs.bloat.util.UnionFind: EDU.purdue.cs.bloat.util.UnionFind$Node findNode(EDU.purdue.cs.bloat.util.UnionFind$Node)>;EDU.purdue.cs.bloat.util.UnionFind;true;false;247;424;20;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.util.UnionFind: EDU.purdue.cs.bloat.util.UnionFind$Node findNode(EDU.purdue.cs.bloat.util.UnionFind$Node)> $r3 = new Stack,$r3 (UnionFind.findNode) Value: new java.util.Stack);$r3 = new java.util.Stack;<EDU.purdue.cs.bloat.util.UnionFind: EDU.purdue.cs.bloat.util.UnionFind$Node findNode(EDU.purdue.cs.bloat.util.UnionFind$Node)>;EDU.purdue.cs.bloat.util.UnionFind;true;false;247;424;20;4467;true;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)> $r11 = new Stack,$r11 (Peephole.removeUnreachable) Value: new java.util.Stack);$r11 = new java.util.Stack;<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;616;86;9;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)> $r11 = new Stack,$r11 (Peephole.removeUnreachable) Value: new java.util.Stack);$r11 = new java.util.Stack;<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;616;86;9;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<dacapo.TestHarness: java.util.Vector vectorise(java.lang.String[])> $r3 = new Vector,$r3 (TestHarness.vectorise) Value: new java.util.Vector);$r3 = new java.util.Vector;<dacapo.TestHarness: java.util.Vector vectorise(java.lang.String[])>;dacapo.TestHarness;true;false;127;488;14;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<dacapo.TestHarness: java.util.Vector vectorise(java.lang.String[])> $r3 = new Vector,$r3 (TestHarness.vectorise) Value: new java.util.Vector);$r3 = new java.util.Vector;<dacapo.TestHarness: java.util.Vector vectorise(java.lang.String[])>;dacapo.TestHarness;true;false;128;488;14;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<dacapo.parser.ConfigFile: void sizeClause(dacapo.parser.Config,java.lang.String)> $r4 = new Vector,$r4 (ConfigFile.sizeClause) Value: new java.util.Vector);$r4 = new java.util.Vector;<dacapo.parser.ConfigFile: void sizeClause(dacapo.parser.Config,java.lang.String)>;dacapo.parser.ConfigFile;false;false;92;492;14;4467;false;false;0;0;
ideal;EmptyVector;ForwardQuery: (<dacapo.parser.ConfigFile: void sizeClause(dacapo.parser.Config,java.lang.String)> $r4 = new Vector,$r4 (ConfigFile.sizeClause) Value: new java.util.Vector);$r4 = new java.util.Vector;<dacapo.parser.ConfigFile: void sizeClause(dacapo.parser.Config,java.lang.String)>;dacapo.parser.ConfigFile;false;false;93;492;14;4467;false;false;0;0;
