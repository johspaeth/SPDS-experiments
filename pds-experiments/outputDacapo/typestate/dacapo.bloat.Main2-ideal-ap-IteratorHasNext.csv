Analysis;Rule;Seed;SeedStatement;SeedMethod;SeedClass;Is_In_Error;Timedout;AnalysisTimes;PropagationCount;Phase1Time;Phase2Time;VisitedMethod;ReachableMethods;MaxAccessPath;MaxMemory
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.trans.ValueFolder;true;false;60307;316;60093;214;7;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$2: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.tbaa.TypeInference$2;false;false;60164;59;60059;105;4;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.tree.MemExpr get_local(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;240;67;45;195;4;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30217;291;30057;160;4;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r139 @ r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();r139 = virtualinvoke $r15.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;90173;267;90065;108;6;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r26 @ r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r26 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;127;63;26;101;6;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r159 @ r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();r159 = virtualinvoke $r158.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;90126;88;90035;91;6;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;9324;165;9324;0;4;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1478;74;1478;0;4;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r168 @ r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();r168 = interfaceinvoke $r56.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;31006;8227;30513;493;4;4467;r0[target, dimensions, array, object, parent];0;
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();r25 = virtualinvoke r5.<java.util.HashSet: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;32348;204;32221;127;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;true;false;34422;431;34284;138;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void allocReturnAddresses(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.RegisterAllocator)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;1225;67;1225;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r164 @ r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();r164 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;25563;6972;25563;0;5;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;90227;76;90111;116;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30226;67;30135;91;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r53 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;116;112;24;92;8;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitEdge(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1758;89;1758;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;60669;122;60575;94;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1360;117;1360;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;60129;56;60040;89;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke $r61.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;714;265;714;0;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;60131;52;60041;90;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;60128;64;60041;87;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.lang.String toString()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;90164;154;90076;88;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;false;90128;105;90038;90;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1493;663;1493;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void start(EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;true;false;30109;73;30024;85;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;90178;92;90061;117;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1365;181;1365;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;66882;2256536;66882;0;785;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1349;79;1349;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r25 @ r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r25 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;60181;76;60039;142;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;145;191;49;96;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r88 @ r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r88 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;1480;225;1480;0;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1401;1164;1401;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;935;113;935;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$Phi: java.util.List leaves()>;EDU.purdue.cs.bloat.trans.SSAPRE$Phi;false;false;60116;63;60029;87;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60217;449;60042;175;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;60175;1696;60067;108;7;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();r40 = interfaceinvoke r32.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30116;63;30021;95;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r36 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30172;123;30027;145;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;188;400;31;157;7;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph$6: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph$6;false;false;60205;95;60047;158;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$1: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$1;false;false;90717;2769;90186;531;61;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r151 @ r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();r151 = interfaceinvoke r138.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;31616;8161;31290;326;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;116;162;19;97;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30130;188;30030;100;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r35 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1066;37;1066;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;110;227;19;91;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$1: void <init>(EDU.purdue.cs.bloat.codegen.Liveness,EDU.purdue.cs.bloat.util.GraphNode)>;EDU.purdue.cs.bloat.codegen.Liveness$1;false;true;828;468;828;0;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r54 @ r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r54 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30182;976;30037;145;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r108 @ r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();r108 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;136;192;20;116;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolder: void cleanup()>;EDU.purdue.cs.bloat.trans.ValueFolder;false;false;60155;50;60037;118;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;90503;61;90390;113;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;701;191;701;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke r24.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;94871;120;94780;91;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r145 @ r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();r145 = interfaceinvoke r139.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30701;8895;30256;445;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree: void initLocals(java.util.Collection)>;EDU.purdue.cs.bloat.tree.Tree;false;true;4410;55;4410;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1190;118;1190;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r40.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1629;189;1629;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r244 @ r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();r244 = interfaceinvoke r243.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30707;8598;30277;430;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$4: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$4;false;false;60150;36;60065;85;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r55 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3743;189;3743;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r143 @ r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();r143 = virtualinvoke r138.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;60137;247;60045;92;5;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();r100 = interfaceinvoke $r59.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;60136;348;60044;92;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60123;107;60031;92;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: EDU.purdue.cs.bloat.cfg.Block isMu(EDU.purdue.cs.bloat.tree.PhiJoinStmt,EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;107;103;18;89;2;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: EDU.purdue.cs.bloat.editor.Type superclass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;60140;78;60032;108;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;944;40;944;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;963;101;963;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r86 @ r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r86 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;1373;202;1373;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r172 @ r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();r172 = virtualinvoke r168.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;60270;181;60150;120;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: EDU.purdue.cs.bloat.cfg.Block copyBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;64680;25;64586;94;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r33 @ r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();r33 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;849;65;849;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();r55 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;60131;128;60037;94;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r166 @ r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();r166 = virtualinvoke r160.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;741;398;741;0;5;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r35 @ r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();r35 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;715;96;715;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r210 @ r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r210 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;150151;596;150053;98;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1933;323;1933;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void <init>(EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;false;true;1725;84;1725;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$1;true;false;60523;149;60208;315;7;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInference$1: void visitInitStmt(EDU.purdue.cs.bloat.tree.InitStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInference$1;true;false;30117;144;30025;92;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();r14 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;false;false;60248;53;60160;88;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r208 @ r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();r208 = interfaceinvoke $r202.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;90136;609;90040;96;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r62.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1421;109;1421;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void insertCode(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;4672;25;4672;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;$r3 @ $r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();$r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.ImmutableIterator: void <init>(java.util.Collection)>;EDU.purdue.cs.bloat.util.ImmutableIterator;false;true;602815;12886;602815;0;10;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r105 @ r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r105 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;60144;103;60027;117;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();r57 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1200;160;1200;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r58 @ r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();r58 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;61556;231;61460;96;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r156 @ r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();r156 = interfaceinvoke $r31.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1326;405;1326;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;$r4 @ $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();$r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;false;true;93174;3439800;93174;0;827;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30112;115;30021;91;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;909;100;909;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r73 @ r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r73 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30115;63;30024;91;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r93 @ r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();r93 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;60118;209;60026;92;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.CompactArrayInitializer: boolean transform(EDU.purdue.cs.bloat.editor.MethodEditor)>;EDU.purdue.cs.bloat.trans.CompactArrayInitializer;false;false;119;336;22;97;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;90133;63;90043;90;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r37 @ r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r37 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;30134;63;30025;109;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r25 @ r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();r25 = virtualinvoke $r11.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void print(java.io.PrintStream)>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;130;75;20;110;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r130 @ r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r130 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;60198;91;60106;92;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PhiJoinStmt: void visitForceChildren(EDU.purdue.cs.bloat.tree.TreeVisitor)>;EDU.purdue.cs.bloat.tree.PhiJoinStmt;true;false;60211;127;60120;91;7;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30107;100;30024;83;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r47.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1253;405;1253;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r69.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;4253;308;4253;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r98 @ r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();r98 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;309;467;216;93;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;94884;195;94792;92;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r154 @ r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();r154 = virtualinvoke $r37.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;90123;109;90035;88;6;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1247;73;1247;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtectedRegionStores()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1495;72;1495;0;4;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2280;193;2280;0;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;$r58 @ $r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();$r58 = interfaceinvoke $r53.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60163;449;60037;126;3;4467;r0[params, array, array, expr, size, array, expr, value, map];0;
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$NodeList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$NodeList;false;false;120273;812;120173;100;22;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r126 @ r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();r126 = interfaceinvoke $r115.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;90119;467;90025;94;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r72 @ r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();r72 = interfaceinvoke r71.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;true;false;30204;2325;30063;141;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r7 @ r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;61933;209;60124;1809;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2435;129;2435;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void insertEdgesToSinkDFS(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet,java.util.BitSet,java.util.Map,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60146;123;60032;114;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;60126;80;60037;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;4576;87;4576;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.FieldInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30111;76;30023;88;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r133 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;61453;11267;61025;428;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;957;109;957;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1329;357;1329;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void verifyTargets(EDU.purdue.cs.bloat.cfg.Block,java.util.Set)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30124;105;30032;92;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r231 @ r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r231 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;false;false;90131;407;90038;93;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r9 @ r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();r9 = interfaceinvoke $r44.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitPhiBlocks()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1290;1271;1290;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();r179 = interfaceinvoke r163.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;90265;385;90158;107;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;$r7 @ $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();$r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$12: void <init>(EDU.purdue.cs.bloat.trans.SSAPRE$11)>;EDU.purdue.cs.bloat.trans.SSAPRE$12;false;false;130;374;30;100;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r110 @ r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r110 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;108;137;19;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r59 @ r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();r59 = virtualinvoke r57.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;false;false;60134;78;60043;91;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r52 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1007;129;1007;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r94 @ r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();r94 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.file.ClassFileLoader: EDU.purdue.cs.bloat.reflect.ClassInfo loadClass(java.lang.String)>;EDU.purdue.cs.bloat.file.ClassFileLoader;false;false;90130;254;90036;94;8;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.StackOptimizer: void optimizeCFG(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.tree.StackOptimizer;false;true;1289;37;1289;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r34 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;106;32;18;88;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: java.lang.Object get_swizzler(int)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;true;false;104;75;17;87;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiCatchStmt(EDU.purdue.cs.bloat.tree.PhiCatchStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;false;false;90180;54;90091;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r181 @ r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();r181 = interfaceinvoke $r24.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;30125;248;30026;99;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r40 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;976;47;976;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r15 @ r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();r15 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;60122;105;60033;89;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void removeCriticalEdges()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;5842;133;5842;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: java.util.Set beginTry()>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;711;78;711;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void replaceJoinPhis(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;1299;64;1299;0;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r61 @ r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();r61 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60128;62;60040;88;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r53 @ r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30158;443;30027;131;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r140 @ r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();r140 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;61664;8936;61227;437;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r19 @ r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();r19 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30133;299;30040;93;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$3: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$3;false;true;101642;3441524;101642;0;827;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r41 @ r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r41 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1317;109;1317;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r159 @ r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();r159 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1311;385;1311;0;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke r48.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30152;1013;30051;101;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void makeEquiv(EDU.purdue.cs.bloat.tree.Node,EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30111;65;30022;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r12 @ r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r12 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.tbaa.TypeInferenceVisitor;true;false;60142;192;60050;92;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r16 @ r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r16 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitIrreducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1384;57;1384;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r112 @ r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r112 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;120;82;23;97;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r14 @ r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2673;52;2673;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r142 @ r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();r142 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2532;727;2532;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetDownSafe(EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1680;79;1680;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueFolding$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueFolding$1;false;false;60128;85;60038;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.ReplaceVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.ReplaceVisitor;false;true;5211;84;5211;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r26 @ r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r26 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;60120;62;60029;91;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3312;88;3312;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r28 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1345;123;1345;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r31 @ r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r31 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1362;67;1362;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;150154;206;150064;90;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: java.util.Collection idf(java.util.Collection,boolean)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30111;113;30024;87;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$5: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$5;false;false;60123;50;60033;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;60123;149;60032;91;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r62 @ r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r62 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;5066;33;5066;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetCanBeAvail(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;945;41;945;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;973;42;973;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;97895;148;97805;90;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void codeMotion(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;2297;31;2297;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1084;114;1084;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;false;false;150280;5462;150117;163;67;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.DefExpr: void cleanupOnly()>;EDU.purdue.cs.bloat.tree.DefExpr;false;false;60132;50;60043;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.SSAPRE$1;true;false;60176;123;60038;138;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r170 @ r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r170 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;6215;405;6215;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r171 @ r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();r171 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;29649;8190;29649;0;5;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;$r26 @ $r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();$r26 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;false;false;60123;150;60031;92;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r226 @ r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();r226 = interfaceinvoke r225.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;31387;10396;30532;855;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r50 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1384;63;1384;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r22 @ r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();r22 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominanceFrontier: java.util.LinkedList calcFrontier(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominanceFrontier;true;false;30119;292;30026;93;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r46.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30125;563;30029;96;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void removeUnreachable()>;EDU.purdue.cs.bloat.util.Graph;false;false;60113;80;60023;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r63 @ r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2427;55;2427;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1496;93;1496;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r11 @ r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();r11 = interfaceinvoke $r57.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;60230;349;60133;97;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.ClassHierarchy: void <init>(EDU.purdue.cs.bloat.editor.EditorContext,java.util.Collection,boolean)>;EDU.purdue.cs.bloat.editor.ClassHierarchy;false;false;60128;50;60038;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r179 @ r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();r179 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;true;false;30118;192;30024;94;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r20 @ r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r20 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.PrintVisitor: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.tree.PrintVisitor;true;false;90129;120;90038;91;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void number(EDU.purdue.cs.bloat.util.GraphNode,java.util.Set)>;EDU.purdue.cs.bloat.util.Graph;false;false;60119;86;60028;91;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r154 @ r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r154 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;false;60159;388;60042;117;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r91 @ r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();r91 = interfaceinvoke $r72.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTreeForBlock(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.OperandStack,EDU.purdue.cs.bloat.cfg.Subroutine,java.util.Map,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;4456;52;4456;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;true;false;111;72;19;92;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r50 @ r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();r50 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph$5: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.ssa.SSAGraph$5;true;false;30123;626;30027;96;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r30 @ r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r30 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void placePhiFunctions(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1290;71;1290;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r104 @ r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();r104 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;112;302;20;92;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: void buildLists()>;EDU.purdue.cs.bloat.util.Graph;false;false;60143;36;60028;115;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r24 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;9244;161;9244;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;$r5 @ $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();$r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: java.util.Iterator collectVars(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;115;64;23;92;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;false;99641;120;99549;92;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r169 @ r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r169 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;841;197;841;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r106 @ r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r106 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;113;247;20;93;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r59 @ r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r59 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1309;88;1309;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph$EdgeSet: void clear()>;EDU.purdue.cs.bloat.util.Graph$EdgeSet;true;false;30114;145;30024;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: EDU.purdue.cs.bloat.editor.Label firstBlock()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;true;8267;63;8267;0;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r78 @ r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();r78 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;60124;101;60031;93;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r43 @ r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r43 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.tree.VarExpr,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1319;104;1319;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r50.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;true;false;30123;798;30026;97;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer: void insert_aswrange(EDU.purdue.cs.bloat.tree.Swizzler)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer;false;false;109;124;18;91;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r148 @ r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();r148 = interfaceinvoke $r85.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;2535;405;2535;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.SSAPRE$ExprKey;false;false;90131;95;90037;94;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.DeadCodeElimination$5: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.trans.DeadCodeElimination$5;false;false;60118;51;60029;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r47 @ r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r47 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30121;187;30028;93;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void downSafety(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1007;33;1007;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r218 @ r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();r218 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30890;11566;30392;498;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA$1: void visitTree(EDU.purdue.cs.bloat.tree.Tree)>;EDU.purdue.cs.bloat.ssa.SSA$1;false;false;60119;38;60027;92;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r75.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitBlock(EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;false;60143;129;60032;111;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void addHandlerEdges(EDU.purdue.cs.bloat.cfg.Block,java.util.Map,java.util.Map,EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30123;147;30029;94;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr buildPhiOperand(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi,EDU.purdue.cs.bloat.cfg.Block)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;55043;2252490;55043;0;785;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r133 @ r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();r133 = interfaceinvoke r123.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.optimize.Main: void main(java.lang.String[])>;EDU.purdue.cs.bloat.optimize.Main;false;false;60127;52;60038;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r102 @ r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();r102 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;115;357;21;94;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r52 @ r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();r52 = interfaceinvoke r50.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void splitReducibleLoops()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30130;846;30030;100;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r42 @ r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();r42 = interfaceinvoke $r36.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1299;225;1299;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r28 @ r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r28 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;90130;65;90036;94;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r40 @ r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();r40 = interfaceinvoke $r29.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;true;false;30127;737;30033;94;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();r6 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;false;false;60118;173;60029;89;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator$7: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.CodeGenerator$7;false;false;60118;113;60028;90;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r95 @ r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();r95 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void liveOut(java.util.BitSet,java.util.List[],EDU.purdue.cs.bloat.cfg.Block,int,EDU.purdue.cs.bloat.codegen.Liveness$IGNode,java.util.Collection)>;EDU.purdue.cs.bloat.codegen.Liveness;false;false;60121;238;60031;90;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r32 @ r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();r32 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void rename(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1277;372;1277;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void coalesce(EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30111;65;30024;87;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void placePhis(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;60115;240;60025;90;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAConstructionInfo: void addRetPhis(EDU.purdue.cs.bloat.cfg.Subroutine)>;EDU.purdue.cs.bloat.ssa.SSAConstructionInfo;false;true;1482;51;1482;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();r1 = specialinvoke r0.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.tree.Tree$StmtList: java.util.Iterator iterator()>;EDU.purdue.cs.bloat.tree.Tree$StmtList;false;true;217954;6888384;217954;0;853;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: EDU.purdue.cs.bloat.tree.Expr phiRelatedFind(EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60126;51;60038;88;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r24 @ r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();r24 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;60120;75;60029;91;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r175 @ r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();r175 = interfaceinvoke $r28.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;1333;211;1333;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r130 @ r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();r130 = virtualinvoke $r12.<java.util.LinkedList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.MethodEditor: void commit()>;EDU.purdue.cs.bloat.editor.MethodEditor;false;false;30135;333;30030;105;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering: boolean valnum(EDU.purdue.cs.bloat.tree.Node,java.util.HashMap)>;EDU.purdue.cs.bloat.trans.ValueNumbering;false;true;825;127;825;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.BloatContext: boolean ignoreClass(EDU.purdue.cs.bloat.editor.Type)>;EDU.purdue.cs.bloat.context.BloatContext;true;false;158;71;35;123;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r66 @ r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();r66 = interfaceinvoke $r62.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;3456;391;3456;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r57 @ r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r57 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1369;153;1369;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void enqueueParents(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;90142;82;90051;91;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.PersistentBloatContext: void addClasses(java.util.Collection)>;EDU.purdue.cs.bloat.context.PersistentBloatContext;false;false;60126;51;60039;87;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r76 @ r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r76 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60121;121;60032;89;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r177 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator: void <init>(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.codegen.Liveness)>;EDU.purdue.cs.bloat.codegen.RegisterAllocator;false;true;826;56;826;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildTrees(EDU.purdue.cs.bloat.cfg.Block,java.util.Map)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;16068;147;16068;0;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation$1: void visitPhiStmt(EDU.purdue.cs.bloat.tree.PhiStmt)>;EDU.purdue.cs.bloat.trans.ExprPropagation$1;true;false;123076;142;122983;93;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r100 @ r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();r100 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;119;412;22;97;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.trans.ValueNumbering$1;false;false;60130;92;60039;91;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();r4 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void finalizeVisit(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$Def)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;1497;119;1497;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r223 @ r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();r223 = interfaceinvoke $r146.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: void buildCode()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30693;9458;30297;396;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r177 @ r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();r177 = interfaceinvoke r162.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;false;104496;385;104400;96;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r6 @ r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();r6 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;false;90132;90;90043;89;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.util.Graph: java.lang.String toString()>;EDU.purdue.cs.bloat.util.Graph;false;false;60127;44;60037;90;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.ClassInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30114;158;30024;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void rename(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;716;178;716;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r29 @ r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();r29 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple: boolean equals(java.lang.Object)>;EDU.purdue.cs.bloat.trans.ValueNumbering$Tuple;false;false;90124;75;90035;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: void postIterationCleanup(java.lang.String)>;dacapo.Benchmark;true;false;134;71;44;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();<dacapo.Benchmark: boolean validate(java.lang.String)>;dacapo.Benchmark;true;false;140;410;45;95;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.ReplaceTarget: void visitRetStmt(EDU.purdue.cs.bloat.tree.RetStmt)>;EDU.purdue.cs.bloat.cfg.ReplaceTarget;false;false;60123;86;60034;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r34 @ r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r34 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.ExprPropagation: boolean propExpr(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr,EDU.purdue.cs.bloat.tree.Expr)>;EDU.purdue.cs.bloat.trans.ExprPropagation;true;false;30111;77;30023;88;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r69 @ r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();r69 = interfaceinvoke r68.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60124;283;60033;91;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r21 @ r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void insertProtStores(EDU.purdue.cs.bloat.cfg.Block,java.util.HashSet,EDU.purdue.cs.bloat.util.ResizeableArrayList)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1292;67;1292;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r74 @ r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r74 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.DominatorTree: void buildTree(EDU.purdue.cs.bloat.cfg.FlowGraph,boolean)>;EDU.purdue.cs.bloat.cfg.DominatorTree;false;false;60121;136;60032;89;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void resetLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.trans.SSAPRE$Phi)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;955;37;955;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSA: void addCatchPhiOperands(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo,EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.tree.LocalExpr)>;EDU.purdue.cs.bloat.ssa.SSA;false;true;1683;89;1683;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r1 @ r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode: void computeWeight()>;EDU.purdue.cs.bloat.codegen.RegisterAllocator$IGNode;true;false;30137;161;30045;92;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r5 @ r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.ssa.SSAGraph: void printSCCs(java.io.PrintWriter)>;EDU.purdue.cs.bloat.ssa.SSAGraph;true;false;30109;142;30021;88;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r64 @ r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();r64 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.CodeGenerator: void removeEmptyBlocks(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.codegen.CodeGenerator;false;true;1227;209;1227;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r135 @ r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();r135 = interfaceinvoke $r91.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void peelLoops(int)>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;1402;405;1402;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r38 @ r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();r38 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void setValueNumbers(EDU.purdue.cs.bloat.ssa.SSAConstructionInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;true;false;60166;202;60074;92;7;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r13 @ r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();r13 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.PersistentCheckElimination: void search(EDU.purdue.cs.bloat.cfg.FlowGraph,EDU.purdue.cs.bloat.cfg.Block,java.util.BitSet[])>;EDU.purdue.cs.bloat.trans.PersistentCheckElimination;false;true;1304;82;1304;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r17 @ r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();r17 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void computeLater(EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;true;3234;39;3234;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r90 @ r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();r90 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness: void computeIntersections()>;EDU.purdue.cs.bloat.codegen.Liveness;false;true;755;214;755;0;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();r4 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: void release(EDU.purdue.cs.bloat.reflect.MethodInfo)>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;30112;76;30023;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1: void visitComponent(java.util.List)>;EDU.purdue.cs.bloat.diva.InductionVarAnalyzer$1;false;false;60130;67;60040;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r70 @ r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();r70 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.SSAPRE: void search(EDU.purdue.cs.bloat.cfg.Block,EDU.purdue.cs.bloat.trans.SSAPRE$ExprInfo,EDU.purdue.cs.bloat.tree.Expr,EDU.purdue.cs.bloat.trans.SSAPRE$Def,java.util.List)>;EDU.purdue.cs.bloat.trans.SSAPRE;false;false;60122;100;60031;91;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r96 @ r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r96 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.context.CachingBloatContext: java.lang.String toString()>;EDU.purdue.cs.bloat.context.CachingBloatContext;true;false;123;522;23;100;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r4 @ r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();r4 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.trans.Peephole: void removeUnreachable(EDU.purdue.cs.bloat.editor.MethodEditor,java.util.List)>;EDU.purdue.cs.bloat.trans.Peephole;false;false;116;166;24;92;6;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();r3 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.codegen.Liveness$2: void visitPhiJoinStmt(EDU.purdue.cs.bloat.tree.PhiJoinStmt)>;EDU.purdue.cs.bloat.codegen.Liveness$2;false;false;60116;110;60029;87;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r27 @ r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();r27 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.editor.CodeArray: byte[] array()>;EDU.purdue.cs.bloat.editor.CodeArray;true;false;30115;302;30025;90;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r36 @ r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();r36 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void buildLoopTree()>;EDU.purdue.cs.bloat.cfg.FlowGraph;false;true;899;69;899;0;3;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r2 @ r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitFlowGraph(EDU.purdue.cs.bloat.cfg.FlowGraph)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;true;false;30115;118;30026;89;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r55 @ r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();r55 = interfaceinvoke r49.<java.util.Set: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.FlowGraph: void setBlockTypes()>;EDU.purdue.cs.bloat.cfg.FlowGraph;true;false;30134;1281;30032;102;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
ideal-ap;IteratorHasNext;r3 @ r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();<EDU.purdue.cs.bloat.cfg.VerifyCFG: void visitNode(EDU.purdue.cs.bloat.tree.Node)>;EDU.purdue.cs.bloat.cfg.VerifyCFG;false;true;742;53;742;0;4;4467;r0[table, array, next, after, before, prev, right, parent, left, value];0;
