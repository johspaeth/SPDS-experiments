<?xml version="1.0" encoding="ASCII"?>
<typestateRule>  
  <automaton name="automaton_1">
    <state name="open" initial="true"/>
    <state name="closed"/>
    <state name="err" accepting="true"/>
    
    <event type="IDispatchEvent" name="read">
      <pattern pattern=".*read\(.*" />
    </event>
    <event type="IDispatchEvent" name="close">
      <pattern pattern=".*close\(.*" />
    </event>
  
    <transition source="open" event="read" destination="open"/>
    <transition source="open" event="close" destination="closed"/>
    <transition source="closed" event="read" destination="err"/>
    <transition source="closed" event="close" destination="closed"/>
    <transition source="err" event="read" destination="err"/>
    <transition source="err" event="close" destination="err"/>
  </automaton>

  <attributes 
  		name="Never read from an InputStream class implementation after it has been closed" 
  		severity="Warning"
  		category="Correctness"
  		level="MethodLevel"
  		typeStateAutomaton="automaton_1"/>
  	<type name="Ljava/io/InputStream"/>
  	<description>
  	
<![CDATA[
Reading an InputStream after it has been closed will always produce a <b>java.io.IOException</b>.
]]>
  	</description>
  	
  	<example>
<![CDATA[
<code><b>final</b> InputStream ipStream = getInputStream();
<b>if</b> ( isValid() ) {
  <em>// Some code...</em>
  ipStream.read( buffer );
  <em>//...</em>
} <b>else</b> {
  <em>//...</em>
  ipStream.close();
}
<em>//...</em>
ipStream.read( buffer );</code>

Such code may potentially lead to an error state if the else clause is executed from a certain calling context.
]]>
</example>
  	
  	<action>
<![CDATA[
Be sure that in every context reading in a stream is done from an appropriate state.
  	  
Code could be refactored like this for instance from the example,
<code><b>try</b> {
  <em>//...</em>
  <b>final</b> InputStream ipStream = getInputStream();
  <b>if</b> ( isValid() ) {
    <em>// Some code...</em>
    ipStream.read( buffer );
    <em>//...</em>
  } <b>else</b> {
    <em>//...</em>
  }
  <em>//...</em>
  ipStream.read( buffer );
  <em>//...</em>
} <b>finally</b> {
  <b>try</b> {
    ipStream.close();
  } <b>catch</b>( IOException except ) {
    LogUtil.log( except );
  }
}</code>
]]>
    </action>
</typestateRule>  
