<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0"
                 xmlns:xmi="http://www.omg.org/XMI"
                 xmlns:rules="http:///com/ibm/safe/rules.ecore"
                 xmlns:typestate="http:///com/ibm/safe/typestate.ecore">

  <typestate:IDeterministicFiniteAutomaton xmi:id="automaton_1">
    <states name="uninitialized"/>
    <states name="initialized"/>
    <states name="err" accepting="true"/>

	<events xsi:type="typestate:IDispatchEvent" name="load">
      <pattern pattern=".*load\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="is_Methods">
      <pattern pattern="java.security.KeyStore.is.*\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="s_Methods">
      <pattern pattern="java.security.KeyStore.s.*\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="getC_Methods">
      <pattern pattern="java.security.KeyStore.getC.*\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="getKey">
      <pattern pattern="java.security.KeyStore.getKey\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="aliases">
      <pattern pattern=".*aliases\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="containsAlias">
      <pattern pattern=".*containsAlias\(.*" />
    </events>
    <events xsi:type="typestate:IDispatchEvent" name="deleteEntry">
      <pattern pattern=".*deleteEntry\(.*" />
    </events>

	<transitions source="uninitialized" event="load" destination="initialized"/>
    <transitions source="uninitialized" event="is_Methods" destination="err"/>
    <transitions source="uninitialized" event="s_Methods" destination="err"/>
    <transitions source="uninitialized" event="getC_Methods" destination="err"/>
    <transitions source="uninitialized" event="getKey" destination="err"/>
    <transitions source="uninitialized" event="aliases" destination="err"/>
    <transitions source="uninitialized" event="containsAlias" destination="err"/>
    <transitions source="uninitialized" event="deleteEntry" destination="err"/>
    
    <transitions source="initialized" event="load" destination="initialized"/>
    <transitions source="initialized" event="is_Methods" destination="initialized"/>
    <transitions source="initialized" event="s_Methods" destination="initialized"/>
    <transitions source="initialized" event="getC_Methods" destination="initialized"/>
    <transitions source="initialized" event="getKey" destination="initialized"/>
    <transitions source="initialized" event="aliases" destination="initialized"/>
    <transitions source="initialized" event="containsAlias" destination="initialized"/>
    <transitions source="initialized" event="deleteEntry" destination="initialized"/>
    
    <transitions source="err" event="load" destination="err"/>
    <transitions source="err" event="is_Methods" destination="err"/>
    <transitions source="err" event="s_Methods" destination="err"/>
    <transitions source="err" event="getC_Methods" destination="err"/>
    <transitions source="err" event="getKey" destination="err"/>
    <transitions source="err" event="aliases" destination="err"/>
    <transitions source="err" event="containsAlias" destination="err"/>
    <transitions source="err" event="deleteEntry" destination="err"/>
  </typestate:IDeterministicFiniteAutomaton>

  <rules:ITypeStateRule
        name="Always initialize java.security.KeyStore before using it"
        severity="Warning"
        category="Correctness"
        level="MethodLevel"
        typeStateAutomaton="automaton_1">
    <types name="Ljava/security/KeyStore"/>
    <description>

<![CDATA[
The following is the extract from Java doc (copyright by Sun Microsystems).
<b>KeyStore</b> represents an in-memory collection of keys and certificates...
Before a keystore can be accessed, it must be loaded. In order to create an empty keystore, 
you pass <b>null</b> as the <b>InputStream</b> argument to the <i>load</i> method.
]]>
    </description>

    <example>
<![CDATA[
<code><b>final</b> KeyStore keyStore = KeyStore.getInstance( getType() );
keyStore.setCertificateEntry( getAlias(), getCertificate() );</code>

Since the class has not been completely initialized, such code will raise a <b>KeyStoreException</b>.
]]>
</example>

    <action>
<![CDATA[
Be sure to call <i>load</i> method before any other calls.

Code should be refactored like this,
<code><b>final</b> KeyStore keyStore = KeyStore.getInstance( getType() );
keyStore.load( getInputStream(), getPassword() );
keyStore.setCertificateEntry( getAlias(), getCertificate() );</code>
]]>
    </action>

  </rules:ITypeStateRule>

</xmi:XMI>
