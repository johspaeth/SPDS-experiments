<?xml version="1.0" encoding="ASCII"?>
<typestateRule>  
  <automaton name="automaton_1">
    <state name="open" initial="true"/>
    <state name="closed"/>
    <state name="err" accepting="true"/>

    <event type="IDispatchEvent" name="write">
      <pattern pattern=".*write\(.*" />
    </event>
    <event type="IDispatchEvent" name="print">
      <pattern pattern="java.io.PrintStream.print\(.*" />
    </event>
    <event type="IDispatchEvent" name="println">
      <pattern pattern="java.io.PrintStream.println\(.*" />
    </event>
    <event type="IDispatchEvent" name="close">
      <pattern pattern=".*close\(.*" />
    </event>

    <transition source="open" event="write" destination="open"/>
    <transition source="open" event="print" destination="open"/>
    <transition source="open" event="println" destination="open"/>
    <transition source="open" event="close" destination="closed"/>

    <transition source="closed" event="write" destination="err"/>
    <transition source="closed" event="print" destination="err"/>
    <transition source="closed" event="println" destination="err"/>
    <transition source="closed" event="close" destination="closed"/>

    <transition source="err" event="write" destination="err"/>
    <transition source="err" event="print" destination="err"/>
    <transition source="err" event="println" destination="err"/>
    <transition source="err" event="close" destination="err"/>
  </automaton>

  <attributes
        name="Never use a PrintStream after it has been closed"
        severity="Warning"
        category="Correctness"
        level="MethodLevel"
        typeStateAutomaton="automaton_1"/>
  <type name="Ljava/io/PrintStream"/>
    <description>

<![CDATA[
Using a PrintStream after it has been closed will always produce a <b>java.io.IOException</b>.
]]>
    </description>

    <example>
<![CDATA[
<code><b>final</b> PrintStream pStream = getPrintStream();
<b>if</b> ( isValid() ) {
  <em>// Some code...</em>
  pStream.print( buffer );
  <em>//...</em>
} <b>else</b> {
  <em>//...</em>
  pStream.close();
}
<em>//...</em>
pStream.print( buffer );</code>

Such code may potentially lead to an error state if the else clause is executed from a certain calling context.
]]>
</example>

    <action>
<![CDATA[
Be sure that in every context reading in a file is done from an appropriate state.

Code could be refactored like this for instance from the example,
<code><b>try</b> {
  <em>//...</em>
  <b>final</b> PrintStream pStream = getPrintStream();
  <b>if</b> ( isValid() ) {
    <em>// Some code...</em>
    pStream.print( buffer );
    <em>//...</em>
  } <b>else</b> {
    <em>//...</em>
  }
  <em>//...</em>
  pStream.print( buffer );
  <em>//...</em>
} <b>finally</b> {
  <b>try</b> {
    pStream.close();
  } <b>catch</b>( IOException except ) {
    LogUtil.log( except );
  }
}</code>
]]>
    </action>

</typestateRule>  
