<?xml version="1.0" encoding="ASCII"?>
<typestateRule>  

  <automaton name="automaton_1">
    <state name="uninitialized"  initial="true"/>
    <state name="sign_check"/>
    <state name="verify_check"/>
    <state name="err" accepting="true"/>

	<event type="IDispatchEvent" name="initSign">
      <pattern pattern=".*initSign\(.*" />
    </event>
    <event type="IDispatchEvent" name="initVerify">
      <pattern pattern=".*initVerify\(.*" />
    </event>
    <event type="IDispatchEvent" name="sign">
      <pattern pattern=".*sign\(.*" />
    </event>
    <event type="IDispatchEvent" name="verify">
      <pattern pattern=".*verify\(.*" />
    </event>
    <event type="IDispatchEvent" name="update">
      <pattern pattern=".*update\(.*" />
    </event>

	<transition source="uninitialized" event="initSign" destination="sign_check"/>
    <transition source="uninitialized" event="initVerify" destination="verify_check"/>
    <transition source="uninitialized" event="sign" destination="err"/>
    <transition source="uninitialized" event="verify" destination="err"/>
    <transition source="uninitialized" event="update" destination="err"/>
    
    <transition source="sign_check" event="initSign" destination="sign_check"/>
    <transition source="sign_check" event="initVerify" destination="verify_check"/>
    <transition source="sign_check" event="sign" destination="sign_check"/>
    <transition source="sign_check" event="verify" destination="err"/>
    <transition source="sign_check" event="update" destination="sign_check"/>
    
    <transition source="verify_check" event="initSign" destination="sign_check"/>
    <transition source="verify_check" event="initVerify" destination="verify_check"/>
    <transition source="verify_check" event="sign" destination="err"/>
    <transition source="verify_check" event="verify" destination="verify_check"/>
    <transition source="verify_check" event="update" destination="verify_check"/>
    
    <transition source="err" event="initSign" destination="err"/>
    <transition source="err" event="initVerify" destination="err"/>
    <transition source="err" event="sign" destination="err"/>
    <transition source="err" event="verify" destination="err"/>
    <transition source="err" event="update" destination="err"/>
  </automaton>

  <attributes
        name="Always follow phases of initialization of java.security.Signature"
        severity="Warning"
        category="Correctness"
        level="MethodLevel"
        typeStateAutomaton="automaton_1"/>
    <type name="Ljava/security/Signature"/>
    <description>

<![CDATA[
The following is the extract from Java doc (copyright by Sun Microsystems).
<p><b>Signature</b> class is used to provide applications the functionality of a digital signature 
algorithm. Digital signatures are used for authentication and integrity assurance 
of digital data.</p>
<p>There are three phases to the use of a Signature object for either signing data or 
verifying a signature:
<ol>
<li>Initialization, with either
  <ul>
    <li>
      a public key, which initializes the signature for verification (see <i>initVerify</i>), or
    </li>
    <li>
      a private key (and optionally a Secure Random Number Generator), which initializes the 
      signature for signing (see <i>initSign(PrivateKey)</i> and 
      <i>initSign(PrivateKey, SecureRandom)</i>).
    </li>
  </ul>
</li>
<li>Updating
<p>Depending on the type of initialization, this will update the bytes to be signed or 
verified. See the <i>update</i> methods.
</p>
</li>
<li>
Signing or Verifying a signature on all updated bytes. See the <i>sign</i> methods and 
the <i>verify</i> method.
</li>
</ol>
</p>
]]>
    </description>

    <example>
<![CDATA[
<code><b>final</b> Signature signature = createMySignatureImplementation();
signature.initSign( getPrivateKey() );
signature.verify( getSignature() );
</code>

With such example <b>Signature</b> class is in the <b>Sign</b> state (i.e. has been initialized 
for signing). Consequently a call to <i>verify</i> is not allowed.
]]>
</example>

    <action>
<![CDATA[
Be sure to call the appropriate set of methods allowed according to the state of the object as
defined by the class contract.

In the particular case of the example, code should be refactored like this,
<code><b>final</b> Signature signature = createMySignatureImplementation();
signature.initVerify( getCertificate() );
signature.verify( getSignature() );
</code>
]]>
    </action>

</typestateRule>  